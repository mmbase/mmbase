<?xml version="1.0" encoding="UTF-8" ?>
<!-- 

   @author  Michiel Meeuwissen
   @version $Id: log4j.xml,v 1.15 2002-07-24 09:52:58 michiel Exp $
   @since   MMBase-1.4

   Location of the log4j.dtd. 
   In Tomcat a simple "log4j.dtd" will do, but this does not work in
   older versions of Orion (because of limitation of Xerces). 
   You can give the full path to the dtd in the jar, like:
   SYSTEM "jar:file:/bigdisk/dev/lib/test/log4j.jar!/org/apache/log4j/xml/log4j.dtd"
   or somewhere on the web:
   SYSTEM "http://web.omroep.nl/mmbase/logging/log4j.dtd"
   
   It seems to work better in Orion if you put the log4j.dtd in
   WEB-INF/classes/org/apache/log4j/xml/log4j.dtd
   
-->
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd"
   [
    <!ENTITY logger   "org.mmbase.util.logging.log4j2.Log4jImpl" >
    <!ENTITY priority "org.mmbase.util.logging.log4j2.Log4jPriority" >
    <!ENTITY logdir   "/tmp/" >
]>

<!-- 
  MMBase logging configuration 

  MMBase can use log4j for logging. See
  http://jakarta.apache.org. This is a sample configuration file for
  it. The name of this file is indicated in <CONFIGDIR>/log/log.xml

  Quick introduction on how to configure log4j.

  In the configuration you find two kind of things: Appenders, and
  Categories. 

  The Appenders are describing the logfiles. There is only one defined
  in this file. It is a very slow one, it is better use another
  Pattern layout in a speed critical situation.

  There is one special 'Category', namely 'root'. Other categories
  inherit from this one, but can override for example the priority. 

  Currently the categories are simply the complete MMBase class-names,
  with only one exception, namely 'STDERR'.

-->

<log4j:configuration debug="false" xmlns:log4j="http://jakarta.apache.org/log4j/">

  <!-- 
  The appenders of the default log4j configuration are writing to 
  STDOUT on default. 
  This is problably not what you want, but at least it works always.
  (This also means that the &logdir; entity is not used in this example configuration)
  See in the eother examples how to configure a log file.
  -->

  <appender name="logfile" class="org.apache.log4j.ConsoleAppender" >
    <param name="Target" value="System.out" />
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d{ABSOLUTE} %-7p %c{4} - %m%n" />
    </layout>
  </appender>

  <!-- 
  A different appender for 'page' logging. This is writing to stdout now too, but probably you want 
  this to go to another file.
  -->     
  <appender name="pagedebug" class="org.apache.log4j.ConsoleAppender" >
    <param name="Target" value="System.out" />
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d{MM-dd HH:mm:ss} PAGE %-7p %c{2} %L - %m%n" />
    </layout>
  </appender>
  
  <!-- categories -->
  
  <!-- examples: different priority for a few subtrees -->
  <category name="org.mmbase.bridge" class ="&logger;">
    <priority class="&priority;" value ="info" />
  </category>

  <category name="org.mmbase.security" class ="&logger;">
    <priority class="&priority;" value ="info" />
  </category>


  <!-- 'page logging' goes to a different appender -->
  <category name="org.mmbase.PAGE" class ="&logger;" additivity="false" >
    <priority class="&priority;" value ="service" />
    <appender-ref ref="pagedebug" />
  </category>

  
  <!-- perhaps you use your own extensions to MMBase -->
  <category name="nl.omroep" class ="&logger;">
    <priority class="&priority;" value ="trace" />
  </category>
  
  <!-- 
  STDERR is a special Category, to wich stderr will be written
  (always with priority 'warn' or higher)  
  -->
  
  <category name="STDERR" class ="&logger;">
    <priority class="&priority;" value ="info" />	
  </category>
  
  <root>
    <priority class="&priority;" value ="service" />
    <appender-ref ref="logfile" />
  </root>

</log4j:configuration>
