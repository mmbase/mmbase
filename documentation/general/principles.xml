<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTS DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<article>
  <articleinfo>
    <title>MMBase princinples (demo version)</title>
    <date>Tue May 30 19:04:44 CEST 2006</date>
    <edition>$Id: principles.xml,v 1.1 2006-05-30 21:11:31 daniel Exp $</edition>
    <authorgroup>
      <author>
        <firstname>MMBase</firstname><surname>Community</surname>
        <affiliation><orgname>MMBase.org</orgname></affiliation>
      </author>
    </authorgroup>
    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified is a certification mark of the Open Source Initiative.</para>
      <para>The license (Mozilla version 1.0) can be read at the MMBase site. See <ulink url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>
  </articleinfo>
  <section>
    <title>1) Database independency</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0.2

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Technical

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : MMBase is principally indepent of the chosen database. 
So no code in MMBase should depend on features of a specific database (unless of course the code _is_ the specific database layer).

Therefore this is also a principle for applications built on MMBase, otherwise they are not portable to other MMBase installations.


]]></para></listitem>
    <listitem><para><![CDATA[Explenation : All code is implemented in a database independent way.

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : You should use the search-query frame-work to build queries, without falling back to 'legacy'
constraints.

You should not need JDBC-connections yourself, but if you do, use ((DatabaseStorageManager) MMBase.getStorageManager()).getConnection() - do not try to make your own connections nor create your own database configuration - but leave that to MMBase.


You should also add an issue to the mmbase bugtracker to report the problem you try to circumvent.

]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : 

]]></para></listitem>
    <listitem><para><![CDATA[Source : 

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>2) Assume that you are in a servlet environment</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0.2

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Technical

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : Code is not optimally portable if no consideration is given to this principle.


]]></para></listitem>
    <listitem><para><![CDATA[Explenation : Your Java code is not just java code, it is java code running in a servlet environment, so it may be subject to certain resctrictions while running.

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : Make no assumptions on the OS.

Make no assumptions on location or writeability of resources. To open resources (like configuration) you should use the MMBase ResourceLoader. 

Do not use java.io.File. 

The webapp may be installed as a 'war' and it's contents not available as File at all.

If a file-system is needed for some reason, the MMBase 'data directory' can be used, or use File.getTempFile().

Do not write anything to stdout, use the MMBase logging system. This can be configured to go to stdout if desired.

]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : 

]]></para></listitem>
    <listitem><para><![CDATA[Source : 

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>3) Code conventions</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0.3

]]></para></listitem>
    <listitem><para><![CDATA[Themes : 

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : When writing java, JSP or XML sources, you must take the MMBase Code Conventions into account.

]]></para></listitem>
    <listitem><para><![CDATA[Explenation : Code conventions make it easier and more comfortable to read and understand each others code.

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : When writing java, JSP or XML sources, you must take the MMBase Code Conventions into account.

Summary for java:

 Java code is indented by 4 spaces. Do not use tabs.
 Use SUN's code conventions. See link for MMBase specific conventions.

XML:

 XML code is indented by 2 spaces. Do not use tabs.

JSP:
 Preferably, JSP is like XML (e.g. JSPX). Java code in JSP should be limited to an absolute minimum. Use taglib (MMBase taglib, JSTL). 

 Complicated functionality could be done in some MVC-framework, or be delegated to functions implemented on MMBase datatypes, fields, builders or function sets.


 A JSP should be short.  A few hunderd lines is much.

 Use includes, prefering dynamic includes (mm:include, jsp:include) over static include (jsp:directive.include)

 Switch off the session <jsp:directive.page session="false" />, unless good reason for using the session exists.

 Make pages cacheable by a front-proxy, (e.g. by using mm:content), unless a good reason exists not to (then explicitely make it uncacheable, e.g. by using mm:content expires="0")

Always use UTF-8 for the response.

 Preferred is (valid) XHTML Strict.

Javascript:
 Like java.

CSS:
 K&R, indent with 2 spaces.




]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : Code wich obeys the conventions.

]]></para></listitem>
    <listitem><para><![CDATA[Source : 

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>4) Use the bridge</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0.5

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Technical

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : In this way you separate MMBase core code from your own code. This gives core developers more freedom. Your code is less prone to break on an update of MMBase. The bridge is a subset of all MMBase classes, so it is easier to use.

By using the bridge, you also automatically use MMBase security. We desire all exposed MMBase data to be subject to security.

]]></para></listitem>
    <listitem><para><![CDATA[Explenation : When using Java code to communicate to MMBase one should only use the bridge interfaces.

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : The following classes from the org.mmbase package can be used (this list is maintained in
      the build script of RMMCI)
        org/mmbase/bridge/*
        org/mmbase/bridge/util/**
        org/mmbase/storage/search/*
        org/mmbase/datatypes/**
        org/mmbase/security/UserContext
        org/mmbase/security/AuthenticationData*
        org/mmbase/security/Rank
        org/mmbase/security/SecurityException.class

        org/mmbase/util/functions/**

        org/mmbase/cache/CachePolicy*
        org/mmbase/cache/Cache*

        org/mmbase/util/**
        /only if they themselves obey this principle

        org/mmbase/storage/Storable.class
        org/mmbase/storage/StorageException.class

        org/mmbase/core/util/Fields
        org/mmbase/core/*
        org/mmbase/core/event/**




]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : Implementations can use the above classes. Normally they should leave instantiating the classes to the bridge - do not instantiate them through their constructors.

]]></para></listitem>
    <listitem><para><![CDATA[Source : 

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>5) Dependencies</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0.2

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Technical

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : It is easier for people not to have to know about several mutually similar functionalities.

]]></para></listitem>
    <listitem><para><![CDATA[Explenation : Dependencies should be minimal, and preferably on already existings ones (no redundancy).

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : MMBase 1.8 depends on:

java 1.4

servlet api

backport-concurrency (dropped when migrating to java 1.5)

it's own logging framework (mapping to commons-logging, log4j, java logging exist)

xalan  (may be dropped when migrating to java 1.5)

commons-fileupload



Taglib also depends on: jstl.jar, standard.jar

Other known (optional) dependencies:
 imagemagick
 JAI
 activation and mail

You should not depend on libraries providing the same functionality.

Other dependencies can be introduced with reluctance and with good reason (e.g. several jakarta commons libraries, commons-collections, commons-validator etc)

]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : 

]]></para></listitem>
    <listitem><para><![CDATA[Source : 

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>6) The core of MMBase should strive for the maximum in backwards compatibility throughout new releases.</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0.1

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Core

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : For the users is maintainability of the deployment very important. Backwards compatibility is not a holy grail but the core must be as stable as possible as far as code is concerned

]]></para></listitem>
    <listitem><para><![CDATA[Explenation : 

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : Changes in the core should deal with issues of backwards compatibility. This can result to more development time. Furthermore, any changes that are not backwards compatible should be sufficiently documented. 
The documentation should contain explanations about changes that are not backwards compatible as well as advice on the impact on upgrades.
This principle also implies that the core must be as lean as possible. In this way it is possible to greatly avoid compatibility issues and the reworks that accompany them.


]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : The database schema and the bridge must never be changed in a way that distorts their backwards compatibility.

]]></para></listitem>
    <listitem><para><![CDATA[Source : MMBase Technical Board

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>7) MMBase components should offer the maximum in flexibility during deployment</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Technical Architecture, Components

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : 

]]></para></listitem>
    <listitem><para><![CDATA[Explenation : 

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : The deployment of MMBase components and implementations should be configurable in a way that allows the users to deploy only what they need. 

]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : Each component should adhere to the deployment rules of KARMA and Didactor. It must be possible to integrate components run-time.

]]></para></listitem>
    <listitem><para><![CDATA[Source : MMBase Technical Board

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>8) The functionality of the MMBase core and its components should be built in the most generic and reusable way possible</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Software development, users, core, components, framework

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : By following this principle, it becomes easier to reuse and expand existing components.

]]></para></listitem>
    <listitem><para><![CDATA[Explenation : 

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : Developers and architects of MMBase projects (core/components) should take reusability into account throughout design and development.

]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : 

]]></para></listitem>
    <listitem><para><![CDATA[Source : MMBase Technical Board

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>9) MMBase packages (core and components) should adhere to the principle of graceful degradation</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Software development, components, core, framework

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : Graceful degradation contributes to MMBase implementations that can be used in high-demand production environments and adds significantly to the availability and stability of the product.

]]></para></listitem>
    <listitem><para><![CDATA[Explenation : Eventual degradation of the system should happen in such a manner that the system continues to operate, but provides a reduced level of service instead of failing completely.

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : Developers should implement the necessary classes, exceptions etc. in order to guarantee graceful degradation of the system for the part that they are building. Chosen solutions should be thoroughly tested. 

]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : 

]]></para></listitem>
    <listitem><para><![CDATA[Source : MMBase Technical Board

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>10) All source code of MMBase is subject to the Open Source licence MPL 1.0</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Core, framework, components

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : The core of MMBase and the framework must have the same open source license to avoid license incompatibilities. 
For components that are developed for the MMBase-framework, or MMBase-portals, the MPL 1.0 is strongly advised, however, there might be reasons to use another license. In all cases this should not affect the license used for the core and framework. 


]]></para></listitem>
    <listitem><para><![CDATA[Explenation : The license chosen for MMBase at the release date (April 4, 2000) was the MPL 1.0. There are no plans to change the license.

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : Components or technology-solutions might be rejected because of incompatibility of licenses.

]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : MPL 1.0

]]></para></listitem>
    <listitem><para><![CDATA[Source : MMBase Technical Board

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>11) MMBase is platform independent.</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0

]]></para></listitem>
    <listitem><para><![CDATA[Themes : All.
Core, framework, components


]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : Following this principle makes it possible for MMBase implementations to run in heterogeneous environments. Using operating system specific functionalities has a negative effect on the portability of applications and components.

]]></para></listitem>
    <listitem><para><![CDATA[Explenation : It should be possible to run MMBase implementations on different platforms. The fact that MMBase is written in Java, covers this principle per definition.

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : To run an MMBase-application, only a Java Virtual Machine (JVM) is necessary. A JVM is not dependent on operating systems. 

]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : Java

]]></para></listitem>
    <listitem><para><![CDATA[Source : MMBase Technical Board

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>12) MMBase applications communicate with each other only via the allowed Web Services protocols.</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Standards, Service, Components, Framework

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : A Web Services Layer as a means of exposing content is compliant with a Service Oriented Architecture. Once properly implemented, this architecture has many advantages. For example:
- Business driven development
- Better modularisation and exchangeability


]]></para></listitem>
    <listitem><para><![CDATA[Explenation : 

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : The communication between MMBase applications should go through the allowed Web Services protocol

]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : -	XML-RPC
-	SOAP
-	RMMCi


]]></para></listitem>
    <listitem><para><![CDATA[Source : MMBase Technical Board

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>13) The MMBase core and its components should demonstrate high-end performance on production environments. </title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Software development, performance, users, core, components, framework

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : Traditionally, development projects are focused on implementing functionality while ignoring issues of performance. This becomes more evident in situations of time pressure and tight deadlines. This can have undesirable side effects when it comes to performance, which should be avoided.

]]></para></listitem>
    <listitem><para><![CDATA[Explenation : 

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : Developers and architects of MMBase projects (core/components) should take performance into account throughout developing or testing.
Ideally, MMBase projects should test the performance of their deliverables and provide the results of performance tests as part of the documentation.
If performance tests are absolutely not possible, MMBase projects should include in their documentation any available information about the behaviour of the application when it on comes to its performance in real-life situations.


]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : Tools like Apache JMeter and JUnitPerf recommended for the testing of performance throughout the development lifecycle

]]></para></listitem>
    <listitem><para><![CDATA[Source : MMBase Technical Board

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
  <section>
    <title>14) The functionality of the MMBase core and its components should be built in the most generic and reusable way possible</title>
    <para>
    <itemizedlist>
    <listitem><para><![CDATA[State : active

]]></para></listitem>
    <listitem><para><![CDATA[Version : 1.0

]]></para></listitem>
    <listitem><para><![CDATA[Themes : Software development, users, core, components, framework

]]></para></listitem>
    <listitem><para><![CDATA[Argumentation : By following this principle, it becomes easier to reuse and expand existing components.

]]></para></listitem>
    <listitem><para><![CDATA[Explenation : 

]]></para></listitem>
    <listitem><para><![CDATA[Consequence : Developers and architects of MMBase projects (core/components) should take reusability into account throughout design and development.

]]></para></listitem>
    <listitem><para><![CDATA[Allowed Implementation : 

]]></para></listitem>
    <listitem><para><![CDATA[Source : MMBase Technical Board

]]></para></listitem>
    </itemizedlist>
    </para>
  </section>
</article>
