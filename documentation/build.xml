<!--
  $Id: build.xml,v 1.31 2006-11-16 10:26:46 michiel Exp $
-->
<project name="MMBase-Documentation" default="documentation" basedir=".">

  <!-- ===================== Initialize Property Values =================== -->

  <!-- Copy "build.properties.default" to "build.properties" if -->
  <!-- you want to customize the build                          -->

  <!-- user customized properties, these override everything -->
  <property file="${user.home}/build.properties"/>

  <!-- project customized properties -->
  <!-- these override the onces in build.properties.default -->
  <property file="build.properties"/>


  <!-- mmbase defaults, properties available also in ../build.xml -->
  <property name="source.dir"   location=".." />
  <property file="${source.dir}/build.properties"/> <!-- use the same overriding -->

  <property name="build.dir"            value="${source.dir}/build" />
  <property name="download.dir"         value="${build.dir}/download" />
  <property name="expand.dir"           value="${download.dir}/expanded" />

  <property name="source-config.dir"    value="${source.dir}/config"/>
  <property name="source-html.dir"      value="${source.dir}/html"/>
  <property name="source-src.dir"       value="${source.dir}/src"/>
  <property name="webapp.dir"           value="${build.dir}/mmbase/mmbase-webapp"/>
  <property name="mmdocs.dir"           value="${webapp.dir}/mmdocs"/>
  <property name="reference.dir"        value="${webapp.dir}/mmdocs/reference"/>
  <property name="web.dir"              value="${webapp.dir}/WEB-INF"/>
  <property name="release.lib.dir"      value="${web.dir}/lib"/>
  <property name="compile.lib.dir"      value="${build.dir}/lib"/>
  <property name="optional.lib.dir"     value="${source.dir}" /> <!-- just a dir that does not contain libs..-->
  <property name="applications.dir"     value="${source.dir}/applications" />
  <property name="mmbase.jar"           value="${build.dir}/mmbase.jar"/>


  <!-- project defaults -->
  <property file="build.properties.default"/>

  <!-- documentation related settings -->
  <property name="mmbase.html.documentation.dir" value="${source-html.dir}/mmdocs" />
  <property name="documentation.dest.dir" value="${mmdocs.dir}"/>
  <property name="documentation.src.dir"  value="."/>

  <property name="documentation.xml-source.dir" value="${documentation.src.dir}"/>
  <property name="documentation.builders.language" value="en" />
  <property name="documentation.temp.dir" value="${documentation.build.dir}/temp" />
  <!-- try xhtml/chunk.xsl (in build.properties) if you like chunks -->
  <!-- property name="docbook.stylesheet" value="xhtml/chunk.xsl" /-->
  <property name="docbook.stylesheet" value="xhtml/docbook.xsl" />
  <property name="documentation.docbook.html.stylesheet"
            value="${download.dir}/${docbook-xsl.version}/${docbook.stylesheet}" />
  <property name="documentation.docbook.fo.stylesheet"
            value="${download.dir}/${docbook-xsl.version}/fo/docbook.xsl" />

  <import file="${source.dir}/download.xml" />

  <!-- =============== Init  ============================================= -->
  <target name="init">
    <mkdir dir="${documentation.build.dir}" />
    <mkdir dir="${documentation.dest.dir}" />
    <echo message="docbook" />

    <antcall target="downloadgz">
      <param name="sourcefile" value="${docbook-xsl.loc}"/>
      <param name="destfile" value="${docbook-xsl.dest}"/>
      <param name="expandedfile" value="${docbook-xsl.exp}"/>
    </antcall>
  </target>

  <!-- =================================================================== -->
  <!-- This target prepares the style file. It will only recreate the      -->
  <!-- Style file if the original one has changed. This way documentation  -->
  <!-- generation will only occur when either a documentation file has     -->
  <!-- changed (or been added), or if the stylefile has changed            -->
  <target name="style.prepare">
    <copy tofile="${documentation.build.dir}/newstyle.xslt"
          file="${documentation.src.dir}/style/docbook2xhtml.xslt" />
    <replace file="${documentation.build.dir}/newstyle.xslt"
             token="[BASESTYLESHEET]"
             value="${documentation.docbook.html.stylesheet}" />
    <condition property="stylechanged">
      <not>
        <filesmatch file1="${documentation.build.dir}/newstyle.xslt"
                    file2="${documentation.build.dir}/docbook2xhtml.xslt" />
      </not>
    </condition>
  </target>

  <target name="style.copy" if="stylechanged" depends="style.prepare">
    <copy tofile="${documentation.build.dir}/docbook2xhtml.xslt"
          file="${documentation.build.dir}/newstyle.xslt" />
  </target>

  <!-- copy all the images and resources -->
  <target name="documentation.resources" depends="style.copy">
    <!-- echo file="${documentation.build.dir}/applications.xml" append="false" /-->
    <copy todir="${documentation.dest.dir}/" >
      <fileset dir="${documentation.xml-source.dir}" >
        <exclude name="**/*.xml"/>
        <exclude name="**/*.sgm"/>
        <exclude name="**/*.xslt"/>
        <exclude name="**/*.properties*"/>
        <exclude name="build/**"/>
        <exclude name="build.*" />
      </fileset>
    </copy>
    <copy todir="${documentation.dest.dir}/" >
      <fileset dir="${documentation.src.dir}" >
        <include name="style/*.css"/>
        <include name="style/*.png"/>
        <include name="style/*.ico"/>
      </fileset>
    </copy>
  </target>


  <!-- copy all documentation from the mmdocs dir                  -->
  <!-- this is documentation that hasn't been converted to docbook -->
  <!-- (yet)                                                       -->
  <target name="documentation.static.copy">
    <!--
    <copy todir="${documentation.dest.dir}/" >
      <fileset dir="${mmbase.html.documentation.dir}" />
    </copy>
    -->
  </target>

  <target name="applications.documentation.copy"
    description="Copies documentation from applications to documentation directory">
    <copy todir="${documentation.src.dir}/applications">
      <mapper type="regexp" from="(.*)/documentation(.*)" to="\1\2" />
      <fileset dir="${applications.dir}/">
        <include name="**"/>
      </fileset>
    </copy>
  </target>

  <target name="lib.compile">
    <ant inheritAll="false" dir="${source.dir}" target="lib.compile">
      <property name="build.dir"        value="${build.dir}" />
      <property name="download.dir"     value="${download.dir}" />
    </ant>
  </target>

  <!-- compile the XSLTransformer -->

  <target name="xsltransformer" depends="jar,lib.compile">
    <mkdir dir="${build.dir}/classes" />
    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/classes"
           depend="true"
           debug="${debug}"
           source="1.4"
           optimize="${optimize}"
           deprecation="${deprecation}">
      <include name="org/mmbase/util/XSLTransformer.java" />
      <classpath>
        <fileset dir="${compile.lib.dir}">
          <include name="*.jar"/>
          <include name="*.zip"/>
          <exclude name="mmbase.jar"/>
        </fileset>
      </classpath>
    </javac>

    <copy todir="${build.dir}/classes">
      <fileset dir="${source-src.dir}">
        <include name="**/caches*.dtd"/>
      </fileset>
    </copy>
  </target>



  <!-- ================================================================================ -->
  <!-- Perform docbook2html conversion                                                  -->
  <!-- ================================================================================ -->
  <target name="documentation.html"
          depends="documentation.resources,applications.documentation.copy,xsltransformer,download"
          description="Create HTML documentation from the DocBook sources">

    <echo message="${documentation.dest.dir}" />
    <java classname="org.mmbase.util.XSLTransformer"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Dmmbase.config=${source-config.dir}" />
      <jvmarg value="-Djava.endorsed.dirs=${build.dir}/lib" />
      <!-- jvmarg value="-Dusecache=false" /-->
      <jvmarg value="-mx200m" />
      <classpath>
        <pathelement path="${build.dir}/classes" />
        <fileset dir="${compile.lib.dir}">
          <include name="*.jar"/>
          <include name="*.zip"/>
          <exclude name="mmbase.jar"/>
        </fileset>
      </classpath>
      <arg value="${documentation.build.dir}/docbook2xhtml.xslt" />
      <arg value="${documentation.xml-source.dir}" />
      <arg value="${documentation.dest.dir}" />
      <arg value="exclude=build.xml" />
      <arg value="exclude=build" />
      <arg value="exclude=templates" />
    </java>
  </target>



  <!-- ================================================================================ -->
  <!-- Perform docbook2pdf conversion                                                   -->
  <!-- ================================================================================ -->
  <target name="documentation.pdf"  depends="xsltransformer,download"
          description="Create PDF documentation from the DocBook sources">

    <mkdir dir="${documentation.temp.dir}" />
    <mkdir dir="${basedir}/media" />

    <!-- copy the images to a temp dir, this is needed because of -->
    <!-- a strange problem with fop's basedir                     -->
    <!-- It's a very bad hack, but it's needed                    -->
    <copy todir="${basedir}/media/" flatten="yes" >
      <fileset dir="${documentation.xml-source.dir}" >
        <exclude name="build/**"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
        <include name="**/*.gif"/>
      </fileset>
    </copy>

    <!-- transform xml into xsl-fo                             -->
    <!-- need a customized stylesheet for this:                -->
    <!-- own style, a4, etc                                    -->
    <!-- but, as said earlier, first the build must be working -->
    <java classname="org.mmbase.util.XSLTransformer"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Dmmbase.config=${source-config.dir}" />
      <jvmarg value="-Djava.endorsed.dirs=${build.dir}/lib" />
      <jvmarg value="-mx200m" />
      <classpath>
        <pathelement path="${build.dir}/classes" />
        <fileset dir="${compile.lib.dir}">
          <include name="*.jar"/>
          <include name="*.zip"/>
        </fileset>
      </classpath>
      <arg value="${documentation.docbook.fo.stylesheet}" />
      <arg value="${documentation.xml-source.dir}" />
      <arg value="${documentation.temp.dir}" />
      <arg value="extension=fo" />
      <arg value="exclude=build" />
      <arg value="exclude=build.xml" />
      <arg value="exclude=templates" />
      <arg value="paper.type=A4" />
    </java>


    <!-- test if jai-jars inside fop-dir are working -->
    <copy file="${jai.codec.jar}" todir="${fop.home}/lib"/>
    <copy file="${jai.core.jar}" todir="${fop.home}/lib"/>

    <!-- needed jars for fop-task         -->
    <path id="fop.classpath">
      <pathelement location="${fop.avalon.jar}"/>
      <pathelement location="${fop.batik.jar}"/>
      <pathelement location="${fop.jar}"/>
      <pathelement location="${jai.codec.jar}"/>
      <pathelement location="${jai.core.jar}"/>
    </path>

    <!-- define fop-task before it can be used -->
    <taskdef name="fop"
             classname="org.apache.fop.tools.anttasks.Fop"
             classpathref="fop.classpath"/>

    <!-- transform fo-xml into pdf -->
    <fop format="application/pdf" outdir="${documentation.dest.dir}"
         messagelevel="info">
      <fileset dir="${documentation.temp.dir}">
        <include name="**/*.fo"/>
        <exclude name="**/builders.fo" />
      </fileset>
    </fop>

    <!-- remove temp xslt-fo files and temp dir with images -->
    <!-- delete>
      <fileset dir="${documentation.temp.dir}">
        <include name="**/*.fo"/>
      </fileset>
    </delete -->
    <delete dir="${basedir}/media/" />
  </target>

  <!-- ================================================================================ -->
  <!-- Main documentation Target                                                        -->
  <!-- ================================================================================ -->
  <target name="documentation" depends="javadocs,documentation.html,documentation.static.copy">
    <!-- delete dir="${documentation.temp.dir}"/ -->
  </target>

  <!-- clean everything -->
  <target name="clean">
    <delete dir="${documentation.dest.dir}"/>
    <delete dir="${documentation.temp.dir}"/>
    <delete file="${documentation.build.dir}/docbook2xhtml.xslt"/>
    <delete file="${documentation.build.dir}/newstyle.xslt"/>
  </target>

  <!-- ================================================================================ -->
  <!-- Generate javadocs                                                                -->
  <!-- ================================================================================ -->

  <target name="javadocs">
    <ant dir="${source.dir}" target="javadocs">
    </ant>
  </target>

  <!-- ================================================================================ -->
  <!-- Download or build the required binary packages                                   -->
  <!-- ================================================================================ -->
  <target name="download" depends="proxyflags"
          description="Download binary packages" >
    <mkdir dir="${download.dir}" />

    <echo message="docbook" />
    <!-- Download any sub package or tools needed. -->
    <antcall target="downloadgz">
      <param name="sourcefile" value="${docbook-xsl.loc}"/>
      <param name="destfile" value="${docbook-xsl.home}"/>
    </antcall>

    <echo message="fop" />
    <antcall target="downloadgz">
      <param name="sourcefile" value="${fop.loc}"/>
      <param name="destfile" value="${fop.home}"/>
    </antcall>

    <echo message="jai" />
    <antcall target="downloadbz2">
      <param name="sourcefile" value="${jai.loc}"/>
      <param name="destfile" value="${jai.home}"/>
      <param name="destdir" value="${jai.home}"/>
    </antcall>

  </target>

  <target name="proxyflags" depends="init">
    <!-- check proxy parameters. -->
    <condition property="useproxy">
      <equals arg1="${proxy.use}" arg2="on" />
    </condition>
  </target>

  <target name="setproxy"  if="useproxy">
    <taskdef name="setproxy"
      classname="org.apache.tools.ant.taskdefs.optional.net.SetProxy" />
    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
    <echo message="Using ${proxy.host}:${proxy.port} to download ${sourcefile}"/>
  </target>

  <target name="testexist">
    <echo message="Testing  for ${destfile}"/>
    <available file="${destfile}" property="exist"/>
  </target>

  <!--
  <target name="testsrc">
    <echo message="Testing  for ${destfile} versus ${cvs.base}/${location}/src"/>
    <uptodate property="exist"
              targetfile="${destfile}">
      <srcfiles dir="${cvs.base}/${location}/src" includes="**" />
    </uptodate>
  </target>
  -->

  <target name="downloadgz" unless="exist" depends="setproxy,testexist">
    <!-- Download and extract the package -->
    <get src="${sourcefile}" dest="${download.dir}/file.tar.gz" />
    <gunzip src="${download.dir}/file.tar.gz" dest="${download.dir}/file.tar"/>
    <untar src="${download.dir}/file.tar" dest="${download.dir}"/>
    <delete file="${download.dir}/file.tar"/>
    <delete file="${download.dir}/file.tar.gz"/>
  </target>

  <target name="downloadbz2" unless="exist" depends="setproxy,testexist">
    <!-- Download and extract the package -->
    <get src="${sourcefile}" dest="${download.dir}/file.tar.bz2" />
    <mkdir dir="${destdir}" />
    <bunzip2 src="${download.dir}/file.tar.bz2" dest="${download.dir}/file.tar"/>
    <untar src="${download.dir}/file.tar" dest="${destdir}"/>
    <delete file="${download.dir}/file.tar"/>
    <delete file="${download.dir}/file.tar.bz2"/>
  </target>

  <target name="downloadzip" unless="exist" depends="setproxy,testexist">
    <!-- Download and extract the package -->
    <get src="${sourcefile}" dest="${download.dir}/file.zip" />
    <mkdir dir="${destdir}" />
    <unzip src="${download.dir}/file.zip" dest="${destdir}"/>
    <delete file="${download.dir}/file.zip"/>
  </target>

  <!-- for some reason the documentation depends on the mmbase.jar, at least
  	the target xsltransformer i believe -->
  <target name="jar">
    <ant dir="${source.dir}" target="jar">
    </ant>
  </target>

</project>
