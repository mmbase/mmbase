<!--
  $Id: build.xml,v 1.42 2007-05-30 08:19:22 michiel Exp $
-->
<project name="MMBase-Documentation" default="documentation" basedir=".">

  <!-- ===================== Initialize Property Values =================== -->

  <!-- Copy "build.properties.default" to "build.properties" if -->
  <!-- you want to customize the build                          -->

  <!-- user customized properties, these override everything -->
  <property file="${user.home}/build.properties"/>

  <!-- project customized properties -->
  <!-- these override the onces in build.properties.default -->
  <property file="build.properties"/>


  <!-- mmbase defaults, properties available also in ../build.xml -->
  <property name="source.dir"   location=".." />
  <property file="${source.dir}/build.properties"/> <!-- use the same overriding -->

  <property name="build.dir"            value="${source.dir}/build" />
  <property name="download.dir"         value="${build.dir}/download" />
  <property name="expand.dir"           value="${download.dir}/expanded" />

  <property name="source-config.dir"    value="${source.dir}/config"/>
  <property name="source-html.dir"      value="${source.dir}/html"/>
  <property name="source-src.dir"       value="${source.dir}/src"/>
  <property name="webapp.dir"           value="${build.dir}/mmbase/mmbase-webapp"/>
  <property name="mmdocs.dir"           value="${webapp.dir}/mmdocs"/>
  <property name="reference.dir"        value="${webapp.dir}/mmdocs/reference"/>
  <property name="web.dir"              value="${webapp.dir}/WEB-INF"/>
  <property name="release.lib.dir"      value="${web.dir}/lib"/>
  <property name="compile.lib.dir"      value="${build.dir}/lib"/>
  <property name="optional.lib.dir"     value="${source.dir}" /> <!-- just a dir that does not contain libs..-->
  <property name="applications.dir"     value="${source.dir}/applications" />
  <property name="mmbase.jar"           value="${build.dir}/mmbase.jar"/>


  <!-- project defaults -->
  <property file="build.properties.default"/>

  <!-- documentation related settings -->
  <property name="mmbase.html.documentation.dir" value="${source-html.dir}/mmdocs" />
  <property name="documentation.dest.dir" value="${mmdocs.dir}"/>
  <property name="documentation.src.dir"  value="."/>

  <property name="documentation.xml-source.dir" value="${documentation.src.dir}"/>
  <property name="documentation.builders.language" value="en" />
  <property name="documentation.temp.dir" value="${documentation.build.dir}/temp" />
  <!-- try xhtml/chunk.xsl (in build.properties) if you like chunks -->
  <!-- property name="docbook.stylesheet" value="xhtml/chunk.xsl" /-->
  <property name="docbook.stylesheet" value="xhtml/docbook.xsl" />
  <property name="documentation.docbook.html.stylesheet"
            value="${expand.dir}/${docbook-xsl.version}/${docbook.stylesheet}" />
  <property name="documentation.docbook.fo.stylesheet"
            value="${expand.dir}/${docbook-xsl.version}/fo/docbook.xsl" />

  <import file="${source.dir}/download.xml" />
  <import file="xslt.xml" />

  <!-- =============== Init  ============================================= -->
  <target name="init">
    <mkdir dir="${documentation.build.dir}" />
    <mkdir dir="${documentation.dest.dir}" />
    <echo message="docbook" />


  </target>

  <!-- =================================================================== -->
  <!-- This target prepares the style file. It will only recreate the      -->
  <!-- Style file if the original one has changed. This way documentation  -->
  <!-- generation will only occur when either a documentation file has     -->
  <!-- changed (or been added), or if the stylefile has changed            -->
  <target name="style.prepare">
    <copy tofile="${documentation.build.dir}/newstyle.xslt"
          file="${documentation.src.dir}/style/docbook2xhtml.xslt" />
    <replace file="${documentation.build.dir}/newstyle.xslt"
             token="[BASESTYLESHEET]"
             value="${documentation.docbook.html.stylesheet}" />
    <condition property="stylechanged">
      <not>
        <filesmatch file1="${documentation.build.dir}/newstyle.xslt"
                    file2="${documentation.build.dir}/docbook2xhtml.xslt" />
      </not>
    </condition>
  </target>

  <target name="style.copy" if="stylechanged" depends="style.prepare">
    <copy tofile="${documentation.build.dir}/docbook2xhtml.xslt"
          file="${documentation.build.dir}/newstyle.xslt" />
  </target>

  <!-- copy all the images and resources -->
  <target name="documentation.resources" depends="style.copy">
    <!-- echo file="${documentation.build.dir}/applications.xml" append="false" /-->
    <copy todir="${documentation.dest.dir}/" >
      <fileset dir="${documentation.xml-source.dir}" >
        <exclude name="**/*.xml"/>
        <exclude name="**/*.sgm"/>
        <exclude name="**/*.xslt"/>
        <exclude name="**/*.properties*"/>
        <exclude name="build/**"/>
        <exclude name="build.*" />
      </fileset>
    </copy>
    <copy todir="${documentation.dest.dir}/" >
      <fileset dir="${documentation.src.dir}" >
        <include name="style/*.css"/>
        <include name="style/*.png"/>
        <include name="style/*.ico"/>
      </fileset>
    </copy>
  </target>


  <!-- copy all documentation from the mmdocs dir                  -->
  <!-- this is documentation that hasn't been converted to docbook -->
  <!-- (yet)                                                       -->
  <target name="documentation.static.copy">
    <!--
    <copy todir="${documentation.dest.dir}/" >
      <fileset dir="${mmbase.html.documentation.dir}" />
    </copy>
    -->
  </target>

  <target name="applications.documentation.copy"
    description="Copies documentation from applications to documentation directory">
    <copy todir="${documentation.src.dir}/applications" preservelastmodified="true">
      <mapper type="regexp" from="(.*)/documentation(.*)" to="\1\2" />
      <fileset dir="${applications.dir}/">
        <include name="**"/>
      </fileset>
    </copy>
  </target>

  <target name="lib.compile">
    <ant inheritAll="false" dir="${source.dir}" target="lib.compile">
      <property name="build.dir"        value="${build.dir}" />
      <property name="download.dir"     value="${download.dir}" />
    </ant>
  </target>


  <target name="datatypes.docbook" depends="xsltransformer">
    <antcall target="xsl">
      <param name="xsl"   location="datatypes2docbook.xslt" />
      <param name="xml"   value="${source.dir}/config/datatypes.xml" />
      <param name="output"   value="${documentation.build.dir}/datatypes.docbook.xml" />
    </antcall>
  </target>

  <!-- ================================================================================ -->
  <!-- Perform docbook2html conversion                                                  -->
  <!-- ================================================================================ -->
  <target name="documentation.html"
          depends="documentation.resources,applications.documentation.copy,xsltransformer,download.deps,datatypes.docbook"
          description="Create HTML documentation from the DocBook sources">

    <echo message="${documentation.dest.dir}" />
    <java classname="org.mmbase.util.XSLTransformer"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Dmmbase.config=${source-config.dir}" />
      <jvmarg value="-Djava.endorsed.dirs=${build.dir}/lib" />
      <!-- jvmarg value="-Dusecache=false" /-->
      <jvmarg value="-mx200m" />
      <classpath>
        <pathelement path="${build.dir}/classes" />
        <fileset dir="${compile.lib.dir}">
          <include name="*.jar"/>
          <include name="*.zip"/>
          <exclude name="mmbase.jar"/>
        </fileset>
        <pathelement location="${xalan.jar}" />
        <pathelement location="${serializer.jar}" />
      </classpath>
      <arg value="${documentation.build.dir}/docbook2xhtml.xslt" />
      <arg value="${documentation.xml-source.dir}" />
      <arg value="${documentation.dest.dir}" />
      <arg value="namespaceaware=false" />
      <arg value="exclude=build.xml" />
      <arg value="exclude=xslt.xml" />
      <arg value="exclude=build" />
      <arg value="exclude=templates" />
    </java>
  </target>



  <!-- ================================================================================ -->
  <!-- Perform docbook2pdf conversion                                                   -->
  <!-- ================================================================================ -->
  <target name="documentation.pdf"  depends="xsltransformer,download.deps,datatypes.docbook"
          description="Create PDF documentation from the DocBook sources">

    <mkdir dir="${documentation.temp.dir}" />
    <mkdir dir="${basedir}/media" />

    <!-- copy the images to a temp dir, this is needed because of -->
    <!-- a strange problem with fop's basedir                     -->
    <!-- It's a very bad hack, but it's needed                    -->
    <copy todir="${basedir}/media/" flatten="yes" >
      <fileset dir="${documentation.xml-source.dir}" >
        <exclude name="build/**"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
        <include name="**/*.gif"/>
      </fileset>
    </copy>

    <!-- transform xml into xsl-fo                             -->
    <!-- need a customized stylesheet for this:                -->
    <!-- own style, a4, etc                                    -->
    <!-- but, as said earlier, first the build must be working -->
    <java classname="org.mmbase.util.XSLTransformer"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Dmmbase.config=${source-config.dir}" />
      <jvmarg value="-Djava.endorsed.dirs=${build.dir}/lib" />
      <jvmarg value="-mx200m" />
      <classpath>
        <pathelement path="${build.dir}/classes" />
        <fileset dir="${compile.lib.dir}">
          <include name="*.jar"/>
          <include name="*.zip"/>
        </fileset>
      </classpath>
      <arg value="${documentation.docbook.fo.stylesheet}" />
      <arg value="${documentation.xml-source.dir}" />
      <arg value="${documentation.temp.dir}" />
      <arg value="extension=fo" />
      <arg value="exclude=build" />
      <arg value="exclude=build.xml" />
      <arg value="exclude=xslt.xml" />
      <arg value="exclude=templates" />
      <arg value="paper.type=A4" />
    </java>


    <!-- test if jai-jars inside fop-dir are working -->
    <copy file="${jai.codec.jar}" todir="${fop.exp}/lib"/>
    <copy file="${jai.core.jar}"  todir="${fop.exp}/lib"/>

    <!-- needed jars for fop-task         -->
    <path id="fop.classpath">
      <fileset dir="${fop.exp}/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${fop.exp}/build">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- define fop-task before it can be used -->
    <!--
    <taskdef name="fop"
             classname="org.apache.fop.tools.anttasks.Fop"
             classpathref="fop.classpath"/>

    <fop format="application/pdf" outdir="${documentation.dest.dir}"
         messagelevel="info">
      <fileset dir="${documentation.temp.dir}">
        <include name="**/*.fo"/>
        <exclude name="**/builders.fo" />
      </fileset>
    </fop>
    -->
    <!-- remove temp xslt-fo files and temp dir with images -->
    <!-- delete>
      <fileset dir="${documentation.temp.dir}">
        <include name="**/*.fo"/>
      </fileset>
    </delete -->
    <delete dir="${basedir}/media/" />
  </target>

  <!-- ================================================================================ -->
  <!-- Main documentation Target                                                        -->
  <!-- ================================================================================ -->
  <target name="documentation" depends="javadocs,documentation.html,documentation.static.copy">
    <!-- delete dir="${documentation.temp.dir}"/ -->
  </target>

  <!-- clean everything -->
  <target name="clean">
    <delete dir="${documentation.dest.dir}"/>
    <delete dir="${documentation.temp.dir}"/>
    <delete file="${documentation.build.dir}/docbook2xhtml.xslt"/>
    <delete file="${documentation.build.dir}/newstyle.xslt"/>
    <delete file="${documentation.build.dir}/datatypes.docbook.xml"/>
  </target>

  <!-- ================================================================================ -->
  <!-- Generate javadocs                                                                -->
  <!-- ================================================================================ -->

  <target name="javadocs">
    <ant dir="${source.dir}" target="javadocs">
    </ant>
  </target>

  <!-- ================================================================================ -->
  <!-- Download or build the required binary packages                                   -->
  <!-- ================================================================================ -->
  <target name="download.deps" depends="proxyflags"
          description="Download binary packages" >
    <mkdir dir="${download.dir}" />

    <echo message="docbook" />
    <!-- Download any sub package or tools needed. -->
    <antcall target="downloadgz">
      <param name="sourcefile"   value="${docbook-xsl.loc}"/>
      <param name="destfile"     value="${docbook-xsl.dest}"/>
      <param name="expandedfile" value="${docbook-xsl.exp}"/>
    </antcall>

    <echo message="fop" />
    <antcall target="downloadgz">
      <param name="sourcefile"   value="${fop.loc}"/>
      <param name="destfile"     value="${fop.dest}"/>
      <param name="expandedfile" value="${fop.exp}"/>
    </antcall>

    <echo message="xalan" />
    <antcall target="downloadgz">
      <param name="sourcefile" value="${xalan.loc}"/>
      <param name="destfile" value="${xalan.dest}"/>
      <param name="expandedfile" value="${xalan.jar}"/>
    </antcall>

  </target>
  <!--
  <target name="testsrc">
    <echo message="Testing  for ${destfile} versus ${cvs.base}/${location}/src"/>
    <uptodate property="exist"
              targetfile="${destfile}">
      <srcfiles dir="${cvs.base}/${location}/src" includes="**" />
    </uptodate>
  </target>
  -->

  <!-- for some reason the documentation depends on the mmbase.jar, at least
  	the target xsltransformer i believe -->
  <target name="jar">
    <ant dir="${source.dir}" target="jar">
    </ant>
  </target>



  <!-- =================================================================== -->
  <!--  Create the Builder documentation                                   -->

  <!-- =================================================================== -->

  <!-- only needed for builder.docs -->
  <target name="doc.resources" depends="init.get">
    <delete file="${build.dir}/docbook2xhtml.xslt" />
    <copy todir="${build.dir}" file="${source-documentation.dir}/style/docbook2xhtml.xslt" />
    <replace  file="${build.dir}/docbook2xhtml.xslt"
              token="[BASESTYLESHEET]"
              value="${expand.dir}/${docbook-xsl.version}/${docbook.stylesheet}" />

  </target>


  <target name="documentation.builders"
          depends="doc.resources,xsltransformer"
          description="Generate builder-documentation from the builder config files">

    <mkdir dir="${mmdocs.dir}/frontenddevelopers/builders"/>

    <copy todir="${mmdocs.dir}/frontenddevelopers/builders"
          file="${source-documentation.dir}/style/docbook2xhtml.xslt"
          />

    <!-- not used at the moment
    <replace file="${mmdocs.dir}/frontenddevelopers/builders/docbook2xhtml.xslt"
             token="[BASESTYLESHEET]"
             value="${expand.dir}/${docbook-xsl.version}/xhtml/chunk.xsl" />
    -->
    <replace file="${mmdocs.dir}/frontenddevelopers/builders/docbook2xhtml.xslt"
             token="[BASESTYLESHEET]"
             value="${expand.dir}/${docbook-xsl.version}/xhtml/docbook.xsl" />


    <!-- compile class for listing of builders -->
    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           nowarn="${nowarn}"
           source="1.5"
           deprecation="${deprecation}">
           <include name="org/mmbase/util/BuilderList.java" />
    </javac>


    <!-- call class, this will give an xml file with a listing of all the builders -->
    <java classname="org.mmbase.util.BuilderList"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="no"
          output="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-total.xml">
      <jvmarg value="-Dmmbase.config=${source.dir}/config" />
      <jvmarg value="-mx100m" />
      <classpath>
        <pathelement location="${build.dir}/classes" />
      </classpath>
      <arg value="${source-config-builders.dir}" />
    </java>

    <!-- convert this file into docbook -->
    <!-- <style
      style="${source-config.dir}/xslt/builder2docbook.xsl"
      extension=".xml"
      in="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-total.xml"
      out="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-docbook.xml"
      >
        <param name="language" expression="${documentation.builders.language}"/>
    </style> -->


    <!-- generate xhtml -->
    <!-- <style
      style="${mmdocs.dir}/frontenddevelopers/builders/docbook2xhtml.xslt"
      extension=".html"
      in="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-docbook.xml"
      out="${mmdocs.dir}/frontenddevelopers/builders/index.html"
      >
        <param name="root" expression="../../"/>
    </style> -->

    <java classname="org.mmbase.util.XSLTransformer"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Djava.endorsed.dirs=${build.dir}/lib" />
      <jvmarg value="-Dmmbase.config=${source.dir}/config" />
      <jvmarg value="-mx100m" />
      <classpath>
        <pathelement location="${build.dir}/classes" />
      </classpath>
      <arg value="${source-config.dir}/xslt/builder2docbook.xsl" />
      <arg value="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-total.xml" />
      <arg value="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-docbook.xml" />
      <arg value="language=${documentation.builders.language}" />
    </java>

    <java classname="org.mmbase.util.XSLTransformer"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Djava.endorsed.dirs=${build.dir}/lib" />
      <jvmarg value="-Dmmbase.config=${source.dir}/config" />
      <jvmarg value="-mx100m" />
      <classpath>
        <pathelement location="${build.dir}/classes" />
        <pathelement location="${xalan.jar}" />
        <pathelement location="${serializer.jar}" />
      </classpath>
      <arg value="${mmdocs.dir}/frontenddevelopers/builders/docbook2xhtml.xslt" />
      <arg value="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-docbook.xml" />
      <arg value="${mmdocs.dir}/frontenddevelopers/builders/index.html" />
      <arg value="root=../../" />
    </java>

    <!-- remove temp files -->
    <!-- delete file="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-total.xml"/>
    <delete file="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-docbook.xml"/>
    <delete file="${mmdocs.dir}/frontenddevelopers/builders/docbook2xhtml.xslt"/ -->
  </target>

</project>
