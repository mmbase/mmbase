<project name="MMBase-Documentation" default="documentation" basedir=".">

  <!-- ===================== Initialize Property Values =================== -->
  
  <!-- Copy "build.properties.default" to "build.properties" if -->
  <!-- you want to customize the build                          -->

  <!-- user customized properties, these override everything -->
  <property file="${user.home}/build.properties"/>
  <!-- project customized properties -->
  <!-- these override the onces in build.properties.default -->
  <property file="build.properties"/>
  <!-- project defaults -->  
  <property file="build.properties.default"/>

  <!-- mmbase defaults-->
  <property name="mmbase.default.dir"
            location=".." />
  <property name="mmbase.build.dir"  
            location="${mmbase.default.dir}/build" /> <!-- mmbase build dir -->
  <property name="mmbase.html.dir"  
            location="${mmbase.default.dir}/html" />
  <property name="mmbase.html.documentation.dir"  
            location="${mmbase.html.dir}/mmdocs" />
  <property name="mmbase.lib.dir"
            location="${mmbase.build.dir}/lib"/>
  <property name="mmbase.jar.dir"
            location="${mmbase.build.dir}/mmbase/mmbase-webapp/WEB-INF/lib"/>
  <property name="mmbase.jar"    
            value="${mmbase.jar.dir}/mmbase.jar"/>
  <property name="xerces.jar"    
            value="${mmbase.lib.dir}/xerces.jar"/>
  <property name="xalan.jar"    
            value="${mmbase.lib.dir}/xalan.jar"/>
  <property name="servlet.jar"    
            value="${mmbase.lib.dir}/servlet.jar"/>
  <property name="mmbase.config" 
            value="${mmbase.default.dir}/config"/>

  <!-- documentation related settings -->
  <property name="documentation.dest.dir" value="${build.dir}/documentation"/>
  <property name="documentation.src.dir" value="."/>
  <property name="documentation.temp.dir" value="${build.dir}/temp"/>
  <property name="documentation.builders.language" value="en" />
  <!-- try xhtml/docbook.xsl (in build.properties) if you don't like chunks -->
  <property name="documentation.docbook.html.stylesheet" 
            value="${download.dir}/${docbook-xsl.version}/xhtml/chunk.xsl" />  
  <property name="documentation.docbook.fo.stylesheet" 
            value="${download.dir}/${docbook-xsl.version}/fo/docbook.xsl" />  


  <!-- =============== Init  ============================================= -->
  <target name="init">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${documentation.dest.dir}" />
  </target>

  <!-- =================================================================== -->
  <!-- This target prepares the style file. It will only recreate the      -->
  <!-- Style file if the original one has changed. This way documentation  -->
  <!-- generation will only occur when either a documentation file has     -->
  <!-- changed (or been added), or if the stylefile has changed            -->
  <target name="style.prepare">
    <copy tofile="${build.dir}/newstyle.xslt" 
          file="${documentation.src.dir}/style/docbook2xhtml.xslt" />
    <replace file="${build.dir}/newstyle.xslt" 
             token="[BASESTYLESHEET]" 
             value="${documentation.docbook.html.stylesheet}" />
    <condition property="stylechanged">
      <not>
        <filesmatch file1="${build.dir}/newstyle.xslt"
                    file2="${build.dir}/docbook2xhtml.xslt" />
      </not>
    </condition>
  </target>

  <target name="style.copy" if="stylechanged" depends="style.prepare">
    <copy tofile="${build.dir}/docbook2xhtml.xslt"
          file="${build.dir}/newstyle.xslt" />
  </target>

  <!-- copy all the images and resources -->
  <target name="documentation.resources" depends="download,style.copy">
    <copy todir="${documentation.dest.dir}/" >
      <fileset dir="${documentation.src.dir}" >
        <exclude name="**/*.xml"/>
        <exclude name="**/*.sgm"/>
        <exclude name="**/*.xslt"/>
        <exclude name="**/*.properties*"/>
        <exclude name="build/**"/>
        <exclude name="build.*" />
      </fileset>
    </copy>
  </target>

  <!-- copy all documentation from the mmdocs dir                  -->
  <!-- this is documentation that hasn't been converted to docbook -->
  <!-- (yet)                                                       -->
  <target name="documentation.static.copy"
          depends="documentation.resources">
    <copy todir="${documentation.dest.dir}/" >
      <fileset dir="${mmbase.html.documentation.dir}" />
    </copy>
  </target>

  <!-- copy all docbook xml's to temp dir            -->
  <!-- this is needed because XSLTransformer doesn't -->
  <!-- have some kind of exclusion system            -->
  <!-- this must be changed, but first, let's try    -->
  <!-- and create a build.xml for the documentation  -->
  <!-- and fix XSLTransformer later ;-)              -->
  <target name="documentation.temporary.copy" depends="documentation.resources">
    <copy todir="${documentation.temp.dir}/" >
      <fileset dir="${documentation.src.dir}" >
        <include name="**/*.xml"/>
        <include name="**/*.sgm"/>
        <exclude name="build/**"/>
        <exclude name="build.*" />
      </fileset>
    </copy>
  </target>


  <!-- ================================================================================ -->
  <!-- Perform docbook2html conversion                                                  -->
  <!-- ================================================================================ -->
  <target name="documentation.html"
          depends="documentation.temporary.copy,documentation.static.copy"
          description="Create HTML documentation from the DocBook sources">

    <java classname="org.mmbase.util.XSLTransformer"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Dmmbase.config=${mmbase.config}" />
      <jvmarg value="-mx150m" />
      <classpath>
        <pathelement path="${mmbase.jar}" />
        <pathelement path="${xerces.jar}" />
        <pathelement path="${xalan.jar}" />
        <pathelement path="${servlet.jar}" />
      </classpath>
      <arg value="${build.dir}/docbook2xhtml.xslt" />
      <arg value="${documentation.temp.dir}" />
      <arg value="${documentation.dest.dir}" />
    </java>
  </target>

 
  <!-- ================================================================================ -->
  <!-- Perform docbook2pdf conversion                                                   -->
  <!-- ================================================================================ -->
  <target name="documentation.pdf" 
          depends="documentation.temporary.copy"
          description="Create PDF documentation from the DocBook sources">

    <!-- remove html files which may be left over from the documentation.html target -->
    <!-- this is only needed because XSLTransformer defaults to .html                -->
    <!-- this must be removed when the XSLTransformer has been changed               -->
    <delete>
      <fileset dir="${documentation.temp.dir}">
        <include name="**/*.html"/>
      </fileset>
    </delete>

    <!-- copy the images to a temp dir, this is needed because of -->
    <!-- a strange problem with fop's basedir                     -->
    <!-- It's a very bad hack, but it's needed                    -->
    <copy todir="${basedir}/media/" flatten="yes" >
      <fileset dir="${documentation.src.dir}" >
        <exclude name="build/**"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
        <include name="**/*.gif"/>
      </fileset>
    </copy>

    <!-- transform xml into xsl-fo                             -->
    <!-- need a customized stylesheet for this:                -->
    <!-- own style, a4, etc                                    -->
    <!-- but, as said earlier, first the build must be working -->
    <java classname="org.mmbase.util.XSLTransformer"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Dmmbase.config=${mmbase.config}" />
      <jvmarg value="-mx150m" />
      <classpath>
        <pathelement path="${mmbase.jar}" />
        <pathelement path="${xerces.jar}" />
        <pathelement path="${xalan.jar}" />
        <pathelement path="${servlet.jar}" />
      </classpath>
      <arg value="${documentation.docbook.fo.stylesheet}" />
      <arg value="${documentation.temp.dir}" />
      <arg value="${documentation.temp.dir}" />
    </java>

    <!-- hmmm...another thing that needs to be hacked into XSLTransformer -->
    <!-- extensions aren't allways html                                   -->
    <!-- change all .html into .fo                                        -->
    <move todir="${documentation.temp.dir}">
      <fileset dir="${documentation.temp.dir}">
        <exclude name="**/*.fo"/>
      </fileset>
      <mapper type="glob" from="*.html" to="*.fo"/>
    </move>

    <!-- test if jai-jars inside fop-dir are working -->
    <copy file="${jai.codec.jar}" todir="${fop.home}/lib"/>
    <copy file="${jai.core.jar}" todir="${fop.home}/lib"/>

    <!-- needed jars for fop-task        -->
    <path id="fop.classpath">
      <pathelement location="${fop.avalon.jar}"/>
      <pathelement location="${fop.batik.jar}"/>
      <pathelement location="${fop.jar}"/>
      <pathelement location="${jai.codec.jar}"/>
      <pathelement location="${jai.core.jar}"/>
    </path>

    <!-- define fop-task before it can be used -->
    <taskdef name="fop"
             classname="org.apache.fop.tools.anttasks.Fop"
             classpathref="fop.classpath"/>
    
    <!-- transform xsl-fo into pdf --> 
    <fop format="application/pdf" outdir="${documentation.dest.dir}">
      <fileset dir="${documentation.temp.dir}">
        <include name="**/*.fo"/>
        <!-- fop runs crazy on this document -->
        <!-- have to check what's causing the problem -->
        <exclude name="**/editwizard-reference.fo" />
        <!-- fop gives an error on this document -->
        <!-- have to check what's causing the problem -->
        <exclude name="**/taglib-tutorial.fo" />
      </fileset>
    </fop>

    <!-- remove temp xslt-fo files and temp dir with images -->
    <delete>
      <fileset dir="${documentation.temp.dir}">
        <include name="**/*.fo"/>
      </fileset>
    </delete>
    <delete dir="${basedir}/media/" />
  </target>

  <!-- ================================================================================ -->
  <!-- Main documentation Target                                                        -->
  <!-- ================================================================================ -->
  <target name="documentation"
          depends="documentation.html,documentation.pdf">
    <delete dir="${documentation.temp.dir}"/>
  </target>
 
  <!-- clean everything -->
  <target name="clean">
    <delete dir="${documentation.dest.dir}"/>
    <delete file="${build.dir}/docbook2xhtml.xslt"/>
    <delete file="${build.dir}/newstyle.xslt"/>
  </target>



  <!-- ================================================================================ -->
  <!-- Download or build the required binary packages                                   -->
  <!-- ================================================================================ -->
  <target name="download" depends="proxyflags" 
          description="Download binary packages" >
    <mkdir dir="${download.dir}" />
    <!-- Download any sub package or tools needed. -->
    <antcall target="downloadgz">
      <param name="sourcefile" value="${docbook-xsl.loc}"/>
      <param name="destfile" value="${docbook-xsl.home}"/>
    </antcall>

    <antcall target="downloadgz">
      <param name="sourcefile" value="${fop.loc}"/>
      <param name="destfile" value="${fop.home}"/>
    </antcall>
    
    <antcall target="downloadbz2">
      <param name="sourcefile" value="${jai.loc}"/>
      <param name="destfile" value="${jai.home}"/>
      <param name="destdir" value="${jai.home}"/>
    </antcall>
    
  </target>

  <target name="proxyflags" depends="init">
    <!-- check proxy parameters. -->
    <condition property="useproxy">
      <equals arg1="${proxy.use}" arg2="on" />
    </condition>
  </target>

  <target name="setproxy"  if="useproxy">
    <taskdef name="setproxy"
      classname="org.apache.tools.ant.taskdefs.optional.net.SetProxy" />
    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/> 
    <echo message="Using ${proxy.host}:${proxy.port} to download ${sourcefile}"/>
  </target>

  <target name="testexist">
    <echo message="Testing  for ${destfile}"/>
    <available file="${destfile}" property="exist"/>
  </target>

  <!--
  <target name="testsrc">
    <echo message="Testing  for ${destfile} versus ${cvs.base}/${location}/src"/>
    <uptodate property="exist"
              targetfile="${destfile}">
      <srcfiles dir="${cvs.base}/${location}/src" includes="**" />
    </uptodate>
  </target>
  -->

  <target name="downloadgz" unless="exist" depends="setproxy,testexist">
    <!-- Download and extract the package -->
    <get src="${sourcefile}" dest="${download.dir}/file.tar.gz" />
    <gunzip src="${download.dir}/file.tar.gz" dest="${download.dir}/file.tar"/>
    <untar src="${download.dir}/file.tar" dest="${download.dir}"/>
    <delete file="${download.dir}/file.tar"/>
    <delete file="${download.dir}/file.tar.gz"/>
  </target>

  <target name="downloadbz2" unless="exist" depends="setproxy,testexist">
    <!-- Download and extract the package -->
    <get src="${sourcefile}" dest="${download.dir}/file.tar.bz2" />
    <mkdir dir="${destdir}" />
    <bunzip2 src="${download.dir}/file.tar.bz2" dest="${download.dir}/file.tar"/>
    <untar src="${download.dir}/file.tar" dest="${destdir}"/>
    <delete file="${download.dir}/file.tar"/>
    <delete file="${download.dir}/file.tar.bz2"/>
  </target>

  <target name="downloadzip" unless="exist" depends="setproxy,testexist">
    <!-- Download and extract the package -->
    <get src="${sourcefile}" dest="${download.dir}/file.zip" />
    <mkdir dir="${destdir}" />
    <unzip src="${download.dir}/file.zip" dest="${destdir}"/>
    <delete file="${download.dir}/file.zip"/>
  </target>

  <target name="documentation.all" depends="documentation.html,documentation.pdf"/>
</project>
