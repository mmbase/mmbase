<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<article>
  <articleinfo>
    <title>Summary of Coding Standards</title>
    <date>2003-02-14</date>
    <edition>$Id: codingstandards.xml,v 1.12 2008-08-27 07:18:26 michiel Exp $</edition>
    <authorgroup>
      <author>
        <firstname>Pierre</firstname>
        <surname>van Rooden</surname>
        <affiliation>
          <orgname>Publieke Omroep</orgname>
        </affiliation>
      </author>
      <author>
        <firstname>Nico</firstname>
        <surname>Klasens</surname>
        <affiliation>
          <orgname>Finalist IT Group</orgname>
        </affiliation>
      </author>
    </authorgroup>
    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified is a certification mark of the Open Source Initiative.</para>
      <para>The license (Mozilla version 1.0) can be read at the MMBase site. See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>
  </articleinfo>
  <section id="references">
    <title>References</title>
    <para>The following is a summary of coding standards that need to be applied to source code.</para>
    <para>All future sources need to conform to these standards.</para>
    <para>The style conventions were based on suggestions from the following documents:</para>
    <itemizedlist>
      <listitem>
        <para><ulink url="http://java.sun.com/docs/codeconv/">Code Conventions for the JavaTM Programming Language</ulink></para>
        <simpara>This is the basis for these guidelines. Unless otherwise specified, the conventions described here follow those as outlined in the
        above document.</simpara>
      </listitem>
      <listitem>
        <para><ulink url="http://www.ambysoft.com/javaCodingStandards.html">AmbySoft Inc. Coding Standards for Java</ulink></para>
        <simpara>This document contains several suggestions which were used to expand the standard conventions, especially for naming
        identifiers.</simpara>
      </listitem>
      <listitem>
        <para><ulink url="http://www.objectmentor.com/publications/naming.htm">Ottinger's Rules for Variable and Class Naming</ulink></para>
        <simpara>This document also contains suggestions for naming, focused on improving the readability of your code.</simpara>
      </listitem>
    </itemizedlist>
  </section>
  <section id="introduction">
    <title>Introduction</title>
    <para>We understand that formatting is a matter of taste and that many developers prefer other formmatting styles, but try to stick to the
    guidelines. We are using them to keep the code readable. Don't take it personally when someone points you to the coding standards when you submit
    some code. We will accept your code anyway.</para>
  </section>
  <section id="documentation">
    <title>Documentation</title>
    <para>Every method, whether public or private, must start out with a documentation comment that describes what the method does. The documentation
    should mention every parameter received by the method, every possible return value, and (if not obvious) the conditions under which the method
    could return an error. Put the parameter names in the same case in the doc string as in the method signature,</para>
    <para>Read over the MMBase code to get an overview of how documentation looks in practice; in particular, see src/org/mmbase/bridge/* for
    examples.</para>
    <itemizedlist>
      <listitem>
        <simpara>Java documentation is mandatory!</simpara>
      </listitem>
      <listitem>
        <simpara>Use C-style documentation (/*...*/) for documenting-out obsolete code</simpara>
      </listitem>
      <listitem>
        <simpara>Use Single line documentation (// ...) for in-code documentation.</simpara>
        <simpara>Single line comments should be on their own line, preceding the statement concerned. The exception is local variables declaration,
        where the line comment may follow directly behind the declaration.</simpara>
      </listitem>
      <listitem>
        <simpara>Required javadoc tags:</simpara>
        <itemizedlist>
          <listitem>
            <simpara>For a class/interface:</simpara>
            <simpara><token>@author</token> (by alphabetical order)</simpara>
            <simpara><token>@version</token> (versions should be annotated with <token>@version</token> $Id: codingstandards.xml,v 1.6 2004/02/17
            10:21:13 gerard Exp $ , so that CVS can insert the correct version number.)</simpara>
          </listitem>
          <listitem>
            <simpara>For a member function:</simpara>
            <simpara><token>@param</token></simpara>
            <simpara><token>@return</token></simpara>
            <simpara><token>@exception</token></simpara>
          </listitem>
          <listitem>
            <simpara>From version 1.5 of MMBase and onwards, new classes and member functions should contain the <token>@since</token>tag (i.e.
            <token>@since</token> MMBase-1.6)</simpara>
            <simpara>The version to use during development will be defined by the MMC.</simpara>
          </listitem>
          <listitem>
            <simpara>Deprecated member functions should be indicated as such with <token>@deprecated</token>, and the reason should be given</simpara>
          </listitem>
          <listitem>
            <simpara>Important member function or class dependencies should be documented with <token>@see</token></simpara>
          </listitem>
          <listitem>
            <simpara>Special targeted javadoc tags are documented in the Cleaning Project Notification Plan (see the Cleaning project on the MMBase
            website for more information)</simpara>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <simpara>Use Single line documentation (<token>// ...</token>) for in-code documentation.</simpara>
        <simpara>Single line comments should be on their own line, preceding the statement concerned. The exception is local variables declaration,
        where the line comment may follow directly behind the declaration.</simpara>
      </listitem>
    </itemizedlist>
    <para>If you are one of those developers who has a personal issue with documentation then at least document the public methods of your code.
    Public methods can be used by everyone and should have a clear contract. One exception to this rule are getter and setter methods.</para>
  </section>
  <section id="naming">
    <title>Naming</title>
    <itemizedlist>
      <listitem>
        <simpara>Names should be full English descriptors where possible. They should be smaller than 20 characters and unique within the
        context.</simpara>
        <itemizedlist>
          <listitem>
            <simpara>Interface names may be :</simpara>
            <itemizedlist>
              <listitem>
                <simpara>adjectives, i.e <token>Runnable</token>. These names should apply to interfaces that describe one specific property or
                behavior that applies to different classes but is not the 'main' task of these classes</simpara>
              </listitem>
              <listitem>
                <simpara>&lt;basename&gt;Interface, i.e. <token>TransactionManagerInterface</token>. These names should describe complex behavior
                which is the main task of an implementing class.</simpara>
              </listitem>
              <listitem>
                <simpara>Nouns, i.e. <token>Node</token>. Only a specific set of interfaces (such as the bridge and security) use nouns.</simpara>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <simpara>The first word in a member function name should be an active verb</simpara>
          </listitem>
          <listitem>
            <simpara>Member field names should not start with verbs. They may start with m_ to emphasize them as being member fields in the
            code.</simpara>
          </listitem>
          <listitem>
            <simpara>Collections (lists, enumerations) should be given a plural name</simpara>
          </listitem>
          <listitem>
            <simpara>Names of member functions that retrieve a field should start with <token>get</token>. Member functions that retrieve a boolean
            field should start with <token>is</token>, or optionally <token>has</token>, or <token>can</token>, depending on the data
            retrieved.</simpara>
          </listitem>
          <listitem>
            <simpara>Names of member functions that set a field should start with <token>set</token>.</simpara>
          </listitem>
          <listitem>
            <simpara>Parameters and local variables for streams can be named <token>in</token>, <token>out</token>, or <token>inOut</token>.</simpara>
          </listitem>
          <listitem>
            <simpara>Local variables for loop counters may use short generic names. Accepted names are <token>i</token>, <token>j</token>, or
            <token>k</token>. Note: Collections should use Iterator (preferred) or Enumeration for loops, not counters</simpara>
          </listitem>
          <listitem>
            <simpara>Parameters and local variables for exceptions can be named <token>e</token>.</simpara>
          </listitem>
          <listitem>
            <simpara>Package names should be singular.</simpara>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <simpara>Specific choices for names by category:</simpara>
      </listitem>
      <listitem>
        <simpara>Case:</simpara>
        <itemizedlist>
          <listitem>
            <simpara>Except for constants, Names should use mixed case: capitalize first letters of class, interface, and constructor names (other
            member functions or fields use lowercase), and capitalize the first letter of every non-initial word.</simpara>
          </listitem>
          <listitem>
            <simpara>Constants are all upper case and should be defined as static final.</simpara>
          </listitem>
          <listitem>
            <simpara>Do not fully capitalize acronym such as <token>SQL</token> or <token>XML</token> (but <token>sql/Sql</token> or
            <token>xml/Xml</token>)</simpara>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
  <section id="spacing">
    <title>Spacing</title>
    <itemizedlist>
      <listitem>
        <simpara>Indentation is four spaces for each block. Do not use tabs.</simpara>
        <simpara>This deviates from some standards, there are differences in how people use tabs or
        how editors show them. The alternative would have been to use ONLY tabs, but this conflicts
        with the java code conventions of SUN, which tells us to indent with units of 4 spaces and
        have a tab width of 8. So a tab can only replace <emphasis>two</emphasis> indents. So
        because the logical tab width is 4 and the required tab width is 8. This made us choose to
        require to not use tabs at all, this is compatible with both the logical and the required
        choice of tab-width, while not incompatible with the SUN code conventions because those
        <emphasis>don't</emphasis> say that you have to use tabs. We simply add to these conventions
        that you have to <emphasis>not use tabs</emphasis></simpara>
      </listitem>
      <listitem>
        <simpara>A keyword followed by a parenthesis should be separated by a space (i.e. if (...))</simpara>
      </listitem>
      <listitem>
        <simpara>A method and it's parameter list should NOT be separated by a space.</simpara>
      </listitem>
      <listitem>
        <simpara>A space should be inserted after a comma in a list, or a semicolon in a for-statement.</simpara>
      </listitem>
      <listitem>
        <simpara>All binary operators should be separated by spaces.</simpara>
      </listitem>
      <listitem>
	<simpara>The Code Conventions for the JavaTM Programming Language tells us to avoid lines
	longer than 80 characters. You could do that, but since it is the 21th century, probably not
	many people are using such small terminals. You could instruct your editor to wrap at 100
	characters or so too.</simpara>
      </listitem>
    </itemizedlist>
  </section>
  <section id="other_style_conventions">
    <title>Other style conventions</title>
    <itemizedlist>
      <listitem>
        <simpara>At most one declaration per line.</simpara>
      </listitem>
      <listitem>
        <simpara>Declarations should be at the beginning of a block.</simpara>
      </listitem>
      <listitem>
        <simpara>At most one statement per line.</simpara>
      </listitem>
      <listitem>
        <simpara>Placing of braces for blocks follow the C-standard :</simpara>
        <programlisting format="linespecific">
    statement {
        otherstatement;
    }
          </programlisting>
      </listitem>
      <listitem>
        <simpara><token>if</token>, <token>for</token>, <token>do</token>, <token>while</token>, <token>switch</token> and <token>try/catch</token>
        blocks should be braced.</simpara>
      </listitem>
      <listitem>
        <simpara>Values of return statements should not be put in parenthesis - <token>return</token> is a statement, not a function.</simpara>
      </listitem>
      <listitem>
        <simpara>Restrict access to member functions as much as possible. All fields should be private, unless they are constants. Accessing a field
        should work using the accessor member functions.</simpara>
      </listitem>
      <listitem>
        <simpara>Elements in a class should be ordered in the following way:</simpara>
        <orderedlist>
          <listitem>
            <simpara>public static fields (constants)</simpara>
          </listitem>
          <listitem>
            <simpara>private static fields (i.e. log field)</simpara>
          </listitem>
          <listitem>
            <simpara>private fields</simpara>
          </listitem>
          <listitem>
            <simpara>constructors</simpara>
          </listitem>
          <listitem>
            <simpara>finalize()</simpara>
          </listitem>
          <listitem>
            <simpara>static public member functions</simpara>
          </listitem>
          <listitem>
            <simpara>static protected member functions</simpara>
          </listitem>
          <listitem>
            <simpara>static private member functions</simpara>
          </listitem>
          <listitem>
            <simpara>public member functions</simpara>
          </listitem>
          <listitem>
            <simpara>protected member functions</simpara>
          </listitem>
          <listitem>
            <simpara>private member functions</simpara>
          </listitem>
          <listitem>
            <simpara>public static void main()</simpara>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <simpara>Use named constants, not literals.</simpara>
      </listitem>
      <listitem>
        <simpara>Use wildcards in import statements if you use 3 or more classes from the same package.</simpara>
      </listitem>
    </itemizedlist>
  </section>
  <section id="mmbase_specific">
    <title>Specific MMBase issues</title>
    <itemizedlist>
      <listitem>
        <simpara>Each class should contain the Mozilla license text.</simpara>
      </listitem>
      <listitem>
        <simpara>New java objects are made using member functions that start with <token>create</token>, i,e <methodname>createAlias()</methodname>,
        <methodname>createObject()</methodname>. The prefixes <token>add</token> and <token>insert</token> are only used for Collections.</simpara>
      </listitem>
      <listitem>
        <simpara>Remove java objects with member functions starting with <token>delete</token> (i.e. <methodname>deleteAlias</methodname>,
        <methodname>deleteRelations</methodname>).</simpara>
      </listitem>
    </itemizedlist>
    <section id="logging">
      <title>Logging</title>
      <para>
        MMBase has it's own logging facility (similar, but older than commons logging).
      </para>
      <para>
        Every class has its own logger, identified with the name of the class. The logger instance
        is final static private. It is not necessary that the logger instance is used, and therefore
        this is perhaps the only variable which need not be removed if it is not used.
      </para>
      <para>
        MMBase has the following logging levels, from low to high.
      </para>
      <itemizedlist>        
        <listitem>
          <formalpara>
            <title>trace</title>
            <para>
              log.trace can be used for things which happen very often, and can be used during
              debugging. log.trace should be protected by log.isDebugEnabled, especially if the
              argument is costly (complicated toStrings, may concatations). In inner-loops log.trace
              should perhaps not be used at all (or commented out).
            </para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>debug</title>
            <para>
              log.debug can be used for things which happen not very often, but still are only
              interesing during debugging. log.debug should be protected by log.isDebugEnabled,
              especially if the argument is costly (complicated toStrings, may concatations). In
              inner-loops log.debug should not be used at all (or commented out).
            </para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>service</title>
            <para>
              log.service is to be used for events which can interest the interested
              administrator. It is used for things which happen only seldomly, and which may be
              heavy on resources (like for example sending mail or converting an image). It can also
              be used for one-time messages during start-up and shutdown.
            </para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>info</title>
            <para>
              log.info is even higher then 'service'. Even uninterested adminstrators need to know
              this, or probably want to know this. Very important things during startup and
              shut-down or otherwise one-time only events can also be logged on info.
            </para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>warn</title>
            <para>
              If something's wrong, but there exist a reasonable fall-back, the event can be logged as a warning.
            </para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>error</title>
            <para>
              If something's wrong, and no reasonable fall-back exists, the event can be logged as an error.
            </para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>fatal</title>
            <para>
              Something is so wrong, that MMBase will not work any more. This can be logged as fatal
              error. E.g. no database-connection could be acquired.
            </para>
          </formalpara>
        </listitem>
      </itemizedlist>
      <para>
        When using the value of a variable in the log message and there exists even the tiniest
        chance that this variable's toString evaluates to the empty String, single quotes must
        surround the value. Make absolutely sure that not accidently an Exception (especially
        NullPointerException) can be caused during the creation of the message.
      </para>
    </section>
  </section>
  <section id="input_validation">
    <title>Input validation</title>
    <para>The first lines of a method are usually devoted to checking the validity of all arguments. The idea is to fail as quickly as possible in the
    event of an error. This is particularly important for constructors.</para>
    <para>For non-private methods, an Exception is thrown if a test on an argument fails. This is often IllegalArgumentException or
    NullPointerException. (These are RuntimeExceptions. Checked exceptions may also be thrown Document these exceptions in the @throws clause of the
    method's javadoc, since they clearly state the method's requirements to the caller (the pre-conditions).</para>
    <para>If every object parameter of every method in a class needs to be non-null in order to avoid throwing NullPointerException, then it is
    acceptable to state this once in the general class javadoc, instead of repeating it for each method.</para>
  </section>
  <section id="strings">
    <title>String operations</title>
    <para>To build Strings dynamically, one may use either the String concatenation operator + or the StringBuffer class. In the great majority of
    cases, only a few items are concatenated, and either style may be used freely, according to taste, without concern for performance.</para>
    <para>On relatively rare occasions, however, when performing extensive String manipulation, replacing + with StringBuffer.append is recommended.
    This is because the + operator does not scale well to large numbers of operations, and is much slower than StringBuffer.append under such
    circumstances.</para>
    <para>Cases in which + is very likely acceptable :</para>
    <itemizedlist>
      <listitem>
        <simpara>if concatenating only a small number of items together, then the difference in relative performance is very small, and possibly not
        even measurable (the great majority of use cases of the concatenation operator fall into this category).</simpara>
      </listitem>
      <listitem>
        <simpara>in branches of code which represent a failure in the system - for example, a lost database connection, or an invalid method
        parameter. Since these branches are very rarely exercised, the speed at which the system fails is usually not important</simpara>
      </listitem>
    </itemizedlist>
  </section>
  <section id="portability">
    <title>Portability</title>
    <para>Portability is one of the principal advantages of using Java. Guidelines for ensuring that a Java application remains portable are:</para>
    <itemizedlist>
      <listitem>
        <simpara>do not use hard coded file names and paths - use the File class, and allow file paths to be configured during deployment.</simpara>
      </listitem>
      <listitem>
        <simpara>remember that some systems have case sensitive file names (Unix), while others do not (Windows).</simpara>
      </listitem>
      <listitem>
        <simpara>do not use hard coded constants. Use the System.getProperty method to refer to items which depend on the system, such as line
        terminators and path separators.</simpara>
      </listitem>
      <listitem>
        <simpara>be very wary of Runtime.exec and Method.invoke</simpara>
      </listitem>
      <listitem>
        <simpara>do not rely on thread scheduling to define program logic</simpara>
      </listitem>
      <listitem>
        <simpara>do not use native methods</simpara>
      </listitem>
    </itemizedlist>
  </section>
  <section id="ripples">
    <title>Minimize ripple effects</title>
    <para>Much of object programming is centered on minimizing the ripple effects caused by changes to a program. This is done simply by keeping
    details secret (information hiding or encapsulation).</para>
    <para>The principal ways of doing this are</para>
    <itemizedlist>
      <listitem>
        <simpara>indirection - named constants replacing "magic numbers", for example</simpara>
      </listitem>
      <listitem>
        <simpara>minimizing visibility - private fields, package-private classes, for example</simpara>
      </listitem>
      <listitem>
        <simpara>generic references (polymorphism) - using high level references (interfaces or abstract classes) instead of low level references
        (concrete classes)</simpara>
      </listitem>
    </itemizedlist>
    <para>All of these techniques accomplish the same thing - they confine knowledge of implementation details to the smallest possible part of a
    program. That is, they keep a secret of some sort.</para>
    <para>Constant and liberal use of the above techniques is recommended. For example:</para>
    <itemizedlist>
      <listitem>
        <simpara>fields are almost always private</simpara>
      </listitem>
      <listitem>
        <simpara>Collections, IO streams usually allow use of interface references</simpara>
      </listitem>
    </itemizedlist>
  </section>
  <section id="error_message">
    <title>Error message conventions</title>
    <para>For error messages the following conventions apply:</para>
    <itemizedlist>
      <listitem>
        <simpara>Provide specific error messages with all the relevant information (variables, exceptions, etc.)</simpara>
      </listitem>
      <listitem>
        <simpara>Messages start with a capital letter.</simpara>
      </listitem>
      <listitem>
        <simpara>Try keeping messages below 70 characters.</simpara>
      </listitem>
      <listitem>
        <simpara>Don't end the error message with a '.'.</simpara>
      </listitem>
      <listitem>
        <simpara>Don't use wildcard characters (* ? \) inside the error string. A search in the logs for text containing these characters are always
        difficult.</simpara>
      </listitem>
      <listitem>
        <simpara>Don't include newline characters in error messages.</simpara>
      </listitem>
      <listitem>
        <simpara>Quoting information is done using single quotes ('some info').</simpara>
      </listitem>
      <listitem>
        <simpara>Don't include the name of the method where the error occurs in the error message. Log systems will provide this information by
        itself.</simpara>
      </listitem>
      <listitem>
        <simpara>When including path or filenames in the error string, be sure to quote them. (i.e. "Can't find '/path/to/repos/userfile'")</simpara>
      </listitem>
      <listitem>
        <simpara>Suggestions or other additions can be added after a semi-colon, like this: "Can't write to 'file': object of same name already
        exists; remove before retrying"</simpara>
      </listitem>
      <listitem>
        <simpara>Try to stay within the boundaries of these conventions, so please avoid separating different parts of error messages by other
        separators such as '--' and others.</simpara>
      </listitem>
    </itemizedlist>
  </section>
  <section id="exceptions">
    <title>Exception handling</title>
    <para>Exceptions in java are used to communicate errors between a callee and a caller. They aren't supposed to be used for control flow (throw and
    catch in the same method). Exception declarations are usually found on the boundaries of an API.</para>
    <para>A section on writing error messages can be found elsewhere in this document under the title 'Error message conventions'.</para>
    <para>Here are some of the guidelines for exception handling in MMBase.</para>
    <itemizedlist>
      <listitem>
        <simpara>In the throws clause of a method header, be as specific as possible. Do not group together related exceptions in a generic exception
        class that would represent a loss of possibly important information.</simpara>
      </listitem>
      <listitem>
        <simpara>Do not catch or throw Throwable, Error, RuntimeException or Exception. Narrow types are more informational. Use for example:
        IllegalArgumentException or UnsupportedOperation</simpara>
      </listitem>
      <listitem>
        <simpara>Never throw the error upwards, unmodified:</simpara>
        <programlisting format="linespecific">
            try {
                ......
            } catch(Exception e) {
                throw e;
            }
          </programlisting>
        <simpara>This code only pollutes the code base and adds nothing.</simpara>
      </listitem>
      <listitem>
        <simpara>If you *receive* an error, you have two choices:</simpara>
        <itemizedlist>
          <listitem>
            <simpara>Handle the error yourself. Use either your own code, or just log the error. Never leave a catch clause empty, log the error on
            debug or trace.</simpara>
          </listitem>
          <listitem>
            <simpara>Throw the error upwards, wrapping it in a new exception and including the error as a "child" argument:</simpara>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
  <section id="other_conventions">
    <title>Other conventions</title>
    <para>There are many other unspoken conventions maintained throughout the code, that are only noticed when someone unintentionally fails to follow
    them. Just try to have a sensitive eye for the way things are done, and when in doubt, ask.</para>
  </section>
</article>