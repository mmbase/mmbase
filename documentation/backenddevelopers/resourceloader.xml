<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<article>
  <articleinfo>
    <title>The MMBase Resource loader</title>
    <date>2005-12-09</date>
    <edition>$Id: resourceloader.xml,v 1.3 2008-12-19 21:37:45 michiel Exp $</edition>
    <authorgroup>
      <author>
        <firstname>Michiel</firstname><surname>Meeuwissen</surname>
        <affiliation><orgname>Publieke Omroep</orgname></affiliation>
      </author>
    </authorgroup>
    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified is a certification mark of the Open Source Initiative.</para>
      <para>The license (Mozilla version 1.0) can be read at the MMBase site. See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>
  </articleinfo>
  <section>
    <title>What is a Resourceloader?</title>
    <para>
      As every application, MMBase has very many configuration options. Most of these configurations
      are defined by means of XML Documents. Naively, one associates XML documents with files, and
      the XML Document objects are created by opening those files from the file system.
    </para>
    <para>
      MMBase is however based on java and java servlet technology, where the more generic concept of
      'resource' may be used in stead of files. E.g. a 'jar' is a compressed file containing a set
      of 'resources' which can be used rather like files in java code. A complete 'web application'
      can be packed into a so called 'war' ('web application archive') file. A war is a special kind of jar file with the
      purpose to contain all necessary resources for a web application.
    </para>
    <para>
      A typical example of a resource is a java class. The 'ClassLoader' of a java web application
      knows how to load these from all jars in WEB-INF/lib and from all files in
      WEB-INF/classes. You do that with the method 'getResource(String name)' of ClassLoader. This
      returns an URL object by the name of the resource.
      <programlisting>getClass().getClassLoader().getResource("java/lang/String.class").toString());</programlisting>
      Such an URL typically looks like this then:
      <screen>jar:file:/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Classes/classes.jar!/java/lang/String.class</screen>
    </para>
    <para>
      Actually ClassLoaders are not restricted to loading classes, but they can load any type of
      'resource', as long as they are presented in the 'CLASS PATH' of the JVM. Which in practice
      means that these resources must be either present in a 'jar' in WEB-INF/lib or as a file in
      WEB-INF/classes. You can e.g. place configuration like so.
      The result of <programlisting>getClass().getClassLoader().getResource("oscache.properties").toString());</programlisting>
      <screen>file:/Users/mmbase/mmbase18/WEB-INF/classes/oscache.properties</screen>
    </para>
    <para>
      Resources that cannot be loaded by the ClassLoader of a web application but are part of the
      web-application, can be loaded with the 'getResource(String)' method on the ServletContext
      object.
      E.g. lets get the same resource, but now on this way. Like this, with a jsp scriptlet:
      <programlisting>pageContext.getServletContext().getResource("/WEB-INF/classes/oscache.properties")</programlisting>
      <screen>jndi:/localhost/mm18/WEB-INF/classes/oscache.properties</screen>.
    </para>
    <para>
      So, there are several methods to load resources, and every method has its own advantages and
      disadvantages. A file can easily be changed and 'watched' for changes, a classloader has a
      provision for 'multiple' resources with the same name (every jar can contain a copy of the same file),
      and the servletContext method can access resources, even if the 'war' is still packed .
    </para>
    <para>
      The idea of the MMBase Resource Loader is now, that MMBase decides which way of loading a
      certain resource is the best. A good way is a way that works, so methods that don't work are
      ignored. If for example the MMBase resource 'builders/core/object.xml' is not available as a
      File (which we like most, because they can easily be changed and updated), then the resource
      can be accessed as such. If it is not available as a file, then it tries to do it with a
      ClassLoader or with a ServletContext. For more details, see also <ulink
      url="http://www.mmbase.org/api/org/mmbase/util/ResourceLoader.html">the javadoc of
      org.mmbase.util.ResourceLoader</ulink>
    </para>
    <para>
      The MMBase Resource Loader itself extends from ClassLoader. So, it works like a Class Loader, and it
      basicly serves to produces URL's or InputStreams for you. We add a few convience methods like
      getting a Document immediately (because we have to deal with XML so much...)
    </para>
  </section>
  <section>
    <title>Reading one specific Resource</title>
      <para>
        MMBase resources come in several different flavours, whith which different ResourceLoader
        instances are associated. The most important one is the 'ConfigurationLoader', because we
        mainly think of configuration.
        <programlisting>ResourceLoader configLoader = ResourceLoader.getConfigurationRoot();</programlisting>

        There are also ResourceLoaders for resolving relative to the web-application root, or the
        file system root. Furthermore new ResourceLoaders can be instantiated which are relative to
        one of these staticly defined root ResourceLoaders:
        <programlisting>ResourceLoader builderLoader = ResourceLoader.getConfigurationRoot().getChildResourceLoader("builders");</programlisting>
      </para>
  </section>
  <section>
    <title>Fall back mechanism and shadowing</title>
    <para>
      Because a resource with certain name can be represented with several URL's, corresponding to
      the several strategies which are applied by the ResourceLoader, a kind of conflict
      resolution mechanism is required. If multiple resources with the same name are available,
      then they have a certain order, and the first one is obtained when you request one Resource.
    </para>
    <para>
      The precise mechanism is documented in the javadoc of ResourceLoader.
    </para>
  </section>
  <section>
    <title>Loading from jars. Configuring weights.</title>
    <para>
      Since MMBase 1.8.7 it is possible to configure which of a set of otherwise equivalent resources
      is the one to be used. This can occur with resources present in jars. E.g. any jar can contain
      a config/security/security.xml, and if there are no more important resources, like an actual
      file WEB-INF/config/security.xml, then it is possible that two or more jars contain such a
      resource. There is no intrinsic way to decide which of the jars provides the 'best' version of the
      said xml resource. On default it would simply take one, more or less and random.
    </para>
    <para>
      It is possible to attribute 'weights' to these classloader provided resources, using the
      'classloaderpatterns' setting in the resource config/utils/resourceloader.xml.
    </para>
    <programlisting><![CDATA[
<?xml version="1.0"?>
<!DOCTYPE util PUBLIC "-//MMBase//DTD util config 1.0//EN" "http://www.mmbase.org/dtd/util_1_0.dtd">
<util>
  <properties>
    <property name="classloaderpatterns" type="mergingmap">
      <entry><key>!/org/mmbase/config/datatypes.xml</key><value>-1</value></entry>
    </property>
  </properties>
</util>]]>
    </programlisting>
    <para>
      This is the resourceloader.xml of the mmbase xml itself. The entry keys are regular
      expressions which match the url of the resources. If it starts with '!', then that is
      implicitely replaced with the url of the <emphasis>current jar</emphasis>, which makes it
      possible for a jar to define it's own weights, without having to know its own name.
    </para>
    <para>
      In this case the weight of the datatypes.xml in the mmbase jar itself is made a bit lighter
      then the default (0). This makes sure that it is read in before other datatypes.xml (which are
      read from light to heavy, so if the same datatype occurs twice, the heaviest one will prevail).
    </para>
    <para>
      In the cloudcontext security jar, we find the following entry:
    </para>
    <programlisting><![CDATA[
    <entry><key>!.*</key><value>100</value></entry>
    ]]></programlisting>
    <para>
      So, any resource in this jar is pretty 'heavy'. Most noticeably the security.xml. This means
      that if you install the cloud context security jar, that cloud context security will be
      active. Even if there would be another security.xml in one of the other jars. There could
      e.g. be a default security xml in the mmbase.jar.
    </para>
    <para>
      This mechanism could e.g. also be used to ship variants of the mmbase core builders in your
      own jars.
    </para>
  </section>
  <section>
    <title>Multiple resources</title>
    <para>
      The implementor can also decide that conflict resolution is not actually needed, but that
      simply all URL's can be used. The resulting resources can probably be merged. A lot of
      configuration XML's for example merely state a list of things ('all caches', 'all datatypes', 'all
      functionset' etc), so it is quite trivial to deal with a multiple of such XML Documents
      (Create one List containing all those things).
    </para>
  </section>
  <section>
    <title>Resource writing, and existance checking.</title>
    <para>
      As said, resource-loading is based on URL's. Urls also have a way to acquire an output stream,
      so they can actually also be used to write something to a certain Resource.
    </para>
    <para>
      Therefore a resource URL is never null, because even if it doesn't exist, you may want to
      create it. You can check however if a resource exists, by checking getDoInput on a connection
      to that URL, or getDoOutput to check for write possibility. This is a bit different from the
      standard class loader implementation, which returns 'null' as the URL for non-existing
      resources.
    </para>
  </section>
  <section>
    <title>Resource builder</title>
    <para>
      If the application server has no (sufficient) write-access to the file-system, then, because
      ResourceLoader is not necessarily out of luck when it wants to write a resource, because being
      an MMBase tool it can of course relatively easily use MMBase nodes to store blobs. It can use
      the 'resources' builder for that (if installed). It works by using bridge, and class-security,
      to gain rights, for writing.
    </para>
  </section>
  <section>
    <title>Resource editor</title>
    <para>
      In the mmbase/admin pages a 'resource' editor can be found. It can be used to browse through
      existing resources, and even to edit them. Whether one wants to actually use this tool is
      disputable, but at least it serves as a good example of the features of the MMBase Resource Loader.
    </para>
  </section>

</article>
