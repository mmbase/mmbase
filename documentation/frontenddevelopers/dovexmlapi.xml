<?xml version="1.0" encoding="UTF-8"?>
<article class="specification">
	<articleinfo>
		<title>Dove 1.1 XML API</title>
		<date>20 july 2002</date>
		<edition>$Id: dovexmlapi.xml,v 1.3 2002-12-05 13:14:14 kees Exp $</edition>
		<authorgroup>
			<author>
				<firstname>Pierre</firstname>
				<surname>van Rooden</surname>
				<affiliation>
					<orgname>Publieke Omroep</orgname>
				</affiliation>
			</author>
		</authorgroup>
		<legalnotice>
			<para>This software is OSI Certified Open Source Software. OSI Certified is a certification mark of the Open Source Initiative.</para>
			<para>The license (Mozilla version 1.0) can be read at the MMBase site. See <ulink url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink>
			</para>
		</legalnotice>
		<releaseinfo>Version 1.0 was released with MMBase 1.5.1. Version 1.1 is included with MMBase 1.6.</releaseinfo>
		<releaseinfo>MMBase 1.5 includes a beta version of Dove.</releaseinfo>
	</articleinfo>
	<section>
		<title>Introduction</title>
		<para>The Dove is a support class for MMBase, which adds a protocol for communication with, and passing commands to, the MMBase system using an XML format. The current implementation (org.mmbase.applications.dove.Dove) makes use of the MMCI to communicate with MMBase. Alternate implementations (i.e. versions that work on the Core) can be implemented by extending the AbstractDove class. Every implementation should at the least support the XML format presented here, though it is possible that implementations add custom commands or functionality. Commands are run by passing an XML DOM root element to an instance of Dove (the request). The calling member function returns an Element that contains the result of the passed command (the response). This document focuses on the structure of the request and response XML (the Dove Communication API). The actual mechanics for instantiation of the Dove class and calling its member functions are documented in the Dove class API.</para>
		<para>The version noted here is version 1.0, which is included with MMBase version 1.5.</para>
		<sidebar>
			<title>A Note On XML Validation</title>
			<para>The XML you pass to the Dove is an already parsed tree, to support varying methods of obtaining the XML. This means that XML validation need be done by the calling code.</para>
			<para>The current Dove implementation does not assume that the passed DOM tree is validated against the required DTD. Unsupported attributes are ignored, but the code does performs some syntax checks and returns error tags when it does not recognize a tag. Future implementations may forego this kind of 'validation', so assuming this behavior is discouraged, and is not a part of the API specification.</para>
			<note>
				<para>Specific behavior of the default Dove implementation are included in this document as a note (like this).</para>
			</note>
		</sidebar>
		<sidebar>
			<title>A Note on Syntax</title>
			<para>The commands handled below will include a syntax description and, were appropriate, an example.</para>
			<programlisting format="linespecific"><![CDATA[The syntax descriptions will be in a DTD format, and shown as source text (like this).]]></programlisting>
			<para>Only syntax relevant to the appropriate section will be shown (the actual DTD differs slightly as some elements are used in various places).</para>
			<itemizedlist>
				<title>For more information on how to read DTD's, see:</title>
				<listitem>
					<para>W3 Schools: <ulink url="http://www.w3schools.com/dtd/default.asp">http://www.w3schools.com/dtd/default.asp</ulink>
					</para>
				</listitem>
				<listitem>
					<para>Zvon: <ulink url="http://www.zvon.org/xxl/DTDTutorial/General/book.html">http://www.zvon.org/xxl/DTDTutorial/General/book.html</ulink>
					</para>
				</listitem>
			</itemizedlist>
			<para>The examples are fictitious XML documents. To shorten the examples, the XML declaration and DOCTYPE elements are not included.</para>
			<programlisting format="linespecific"><![CDATA[The XML examples, or fractions thereof, are shown as source text (like this).]]></programlisting>
			<itemizedlist>
				<title>For more information on XML, see:</title>
				<listitem>
					<para>W3 Schools:<ulink url="http://www.w3schools.com/xml/default.asp">http://www.w3schools.com/xml/default.asp</ulink>
					</para>
				</listitem>
				<listitem>
					<para>Zvon: <ulink url="http://www.zvon.org/xxl/XMLTutorial/General/book.html">http://www.zvon.org/xxl/XMLTutorial/General/book.html</ulink>
					</para>
				</listitem>
			</itemizedlist>
			<para>This document deals with three versions of Dove: 1.0 beta (included in MMBase 1.5), 1.0 (included in MMBase 1.5.1), and 1.1. (MMBase 1.6).</para>
			<para>Where appropriate, notes will be used to indicate which versions support certain functionality.</para>
		</sidebar>
		<section>
			<title>Passing Commands</title>
			<para>The root element of the request xml is the <emphasis>request</emphasis> tag.</para>
			<para>Each request tag contains at most one security tag (containing user login information), and one or more dove command tags (each tag being one command). If more than one command is passed, the commands are handled in the order that they apprear in the xml.</para>
			<programlisting format="linespecific"><![CDATA[
<!ELEMENT request (security?,
				 (getdata|getnew|getnewrelation|getrelations| getconstraints|getlist|put)+) >
			]]></programlisting>
			<para>The commands that should be comprehended are : getdata, getnew, getnewrelation, getrelations, getconstraints, getlist, and put.</para>
			<note>
				<para>Note: Custom Dove implementations may implement additional commands.</para>
			</note>
			<para>The command tags support an id attribute. The attribute has no significance to the Dove, but is ment to support a client-generated id system. When an id attribute is provided, this attribute is also returned in the appropriate tag in the response.</para>
			<para>The result of the commands are tallied and returned in an xml with as root the <emphasis>response</emphasis> tag.</para>
			<para>The body of the xml contains either an error tag (when connecting to MMBase failed), or a list of tags containing the results of the command passed, in the order that those commands were given. The response does not contain any security information, even if the request did.</para>
			<programlisting format="linespecific"><![CDATA[
<!ELEMENT response (getdata|getnew|getnewrelation|getrelations|
					 getconstraints|getlist|put|error)+ >
			]]></programlisting>
			<para>Each command contains the result of that command or an error tag if the command failed.</para>
			<note>
				<para>Note: If Dove cannot handle the command, an error tag is returned instead to stay compliant with the response dtd. It is recommended you validate a document before passing it to the Dove.</para>
			</note>
		</section>
		<section>
			<title>Security</title>
			<para>It is possible to pass a security tag to Dove, enabling the class to log in on MMBase. The tag accepts a name and password attribute, as well as a cloud name and a login method name. These attributes are similar in meaning to the attributes of the cloud tag in the MMBase taglib (documented elsewhere). All attributes are optional. In general, name and password will be required unless the default method for authentication is overruled.</para>
			<programlisting format="linespecific"><![CDATA[
<!ELEMENT security EMPTY>
<!ATTLIST security name NMTOKEN #IMPLIED >
<!ATTLIST security password NMTOKEN #IMPLIED >
<!ATTLIST security method CDATA 'name/password' >
<!ATTLIST security cloud CDATA 'mmbase' >
			]]></programlisting>
			<example>
				<title>Example:</title>
				<programlisting format="linespecific"><![CDATA[
<request>

	<security name="admin" password="admin2k" />
	<getdata><object number="675" /></getdata>

</request>
			]]></programlisting>
			</example>
			<note>
				<para>Note: Dove does not allow anonymous access: if you do not provide a security login, you need to provide a secure MMCI cloud as an additional parameter when passing the XML.</para>
			</note>
		</section>
		<section>
			<title>Errors</title>
			<para>When the Dove fails to execute a command it returns an error tag. An error tag contains a type attribute that details the type of the error.</para>
			<itemizedlist>
				<listitem>
					<para>parser</para>
					<para>The xml given is invalid or does not follow the grammar. This likely means there is a bug in the client code.</para>
				</listitem>
				<listitem>
					<para>server</para>
					<para>The code invoked is either not yet implemented or another, server-related, error occurred (such as no memory, bad configuration, etc.). Server errors entirely fail a request.</para>
				</listitem>
				<listitem>
					<para>client</para>
					<para>The data requested could not be retrieved or values specified were invalid. I.e. a requested node does not exist (any more), or a put failed due to invalid data.</para>
				</listitem>
			</itemizedlist>
			<para>The body of the tag contains a description of the actual error.</para>
			<programlisting format="linespecific"><![CDATA[
<!ENTITY % errortype (server,parser,client)>
<!ELEMENT error (#PCDATA)>
<!ATTLIST error type %errortype #REQUIRED >
			]]></programlisting>
			<para>If the error occurs due to a security issue, only the error is returned (no command is executed).</para>
			<example>
				<title>Example:</title>
				<programlisting format="linespecific"><![CDATA[
<response>
	<error type="client">Authentication error : password invalid</error>
</response>
				]]></programlisting>
			</example>
			<para>If the error occurred while attempting to execute a command, it occurs at the location where the error occurred.</para>
			<example>
				<title>Example:</title>
				<programlisting format="linespecific"><![CDATA[
<response>

	<getdata>
		<object number="234">
			<error type="client">node not found</error>
		</object>
 </getdata>

</response>
				]]></programlisting>
			</example>
			<note>
				<para>Note: Except during a put, Dove attempts to continue execution when it runs into an error.</para>
			</note>
		</section>
	</section>
	<section>
		<title>Commands</title>
		<para>The following pages list the commands that can be passed to the Dove.</para>
		<para>An implementation should support the following commands:</para>
		<table frame="all">
			<title>Dove Commands</title>
			<tgroup cols="2">
				<tbody>
					<row>
						<entry>
							<command moreinfo="none">getdata</command>
						</entry>
						<entry>Retrieves an MMBase node</entry>
					</row>
					<row>
						<entry>
							<command moreinfo="none">getnew</command>
						</entry>
						<entry>Returns a new, empty node</entry>
					</row>
					<row>
						<entry>
							<command moreinfo="none">getnewrelation</command>
						</entry>
						<entry>Returns a new, empty relation node</entry>
					</row>
					<row>
						<entry>
							<command moreinfo="none">getrelations</command>
						</entry>
						<entry>Returns the relations of a node of a certain role</entry>
					</row>
					<row>
						<entry>
							<command moreinfo="none">getconstraints</command>
						</entry>
						<entry>Returns the constraints of a node type</entry>
					</row>
					<row>
						<entry>
							<command moreinfo="none">getlist</command>
						</entry>
						<entry>Returns the constraints of a node type</entry>
					</row>
					<row>
						<entry>
							<command moreinfo="none">put</command>
						</entry>
						<entry>Returns the constraints of a node type</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>
	<section>
		<title>getdata</title>
		<para>A <command moreinfo="none">getdata</command> command retrieves objects from MMBase by their number.</para>
		<para>The command should contain one or more object tags, each tag referencing an object through the number attribute. If the referenced object can be found, the object, along with type and all its fields, is returned in the response. If retrieving the object fails, the returned response object tag contains an error tag describing the problem.</para>
		<para>If you do not want to retrieve all an object's fields, you can specify the fields you want to retrieve by including field tags in the body of the object tag. The field tags' name attribute identifies the fields you want to retrieve. If at least one field tag is given, only the selected fields are returned. Note that you should not retrieve relation objects directly - use <command moreinfo="none">getrelations</command> instead.</para>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getdata (object+) >
<!ATTLIST getdata id ID #IMPLIED>

<!ELEMENT object (field*)>
<!ATTLIST object number NMTOKEN #REQUIRED >

<!ELEMENT field EMPTY>
<!ATTLIST field name NMTOKEN #REQUIRED >
	]]></programlisting>
		<para>The response contains, aside from the fields, the type of the object.</para>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getdata (object+) >
<!ATTLIST getdata id ID #IMPLIED>

<!ELEMENT object (field*)>
<!ATTLIST object did ID #IMPLIED>
<!ATTLIST object number NMTOKEN #REQUIRED >
<!ATTLIST object type NMTOKEN #REQUIRED >

<!ELEMENT field (#PCDATA) >
<!ATTLIST field did ID #IMPLIED>
<!ATTLIST field name NMTOKEN #REQUIRED >
	]]></programlisting>
		<example>
			<title>Example</title>
			<programlisting format="linespecific"><![CDATA[
<request>
	<getdata id="1">
		<object number="675" />
	</getdata>

	<getdata id="2">
		<object number="672" >
		 <field name="title" />
		</object>
		<object number="671" >
		 <field name="name" />
		 <field name="url" />
		</object>
	</getdata>

</request>
	]]></programlisting>
			<para>The result of this command could look like this:</para>
			<programlisting format="linespecific"><![CDATA[
<response>
<getdata id="1">
		<object number="675" type="people">
			<field name="firstname">Harrison</field>
			<field name="lastname">Ford</field>
			<field name="email">harrisonford@hollywood.com</field>
		</object>
	</getdata>

	<getdata id="2">
		<object number="672" type="movies">
		 <field name="title">Star Wars</field>
		</object>
		<object number="671" type="urls">
		 <field name="name" >Star Wars Site</field>
		 <field name="url" >http://www.starwars.com</field>
		</object>
	</getdata>
</response>
	]]></programlisting>
		</example>
	</section>
	<section>
		<title>getrelations</title>
		<para>A <command moreinfo="none">getrelations</command> command obtains the relation objects belonging to the specified objects, filtered by a specified destination type or relation role.</para>
		<para>The command should contain one or more object tags, each tag referencing an object through the number attribute. If the referenced object can be found, the object's relations are retrieved and returned.</para>
		<para>An object tag may include one or more relation tags, allowing to retrieve a narrow selection of relations, relating to a specified type of object or using a specified role. Restricting the selection is done by supplying a role or a destinationtype attribute (or both) to a relation tag.</para>
		<para>By default, all fields of a relation are returned. If you do not want to retrieve all an relations's fields, you can specify the fields you want to retrieve by including field tags in the body of the relation tag. The field tags' name attribute identifies the fields you want to retrieve. If at least one field tag is given, only the selected fields are returned.</para>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getrelations (object+) >
<!ATTLIST getrelations id ID #IMPLIED>

<!ELEMENT object (relation*)>
<!ATTLIST object number NMTOKEN #REQUIRED >

<!ELEMENT relation (field*)>
<!ATTLIST relation role NMTOKEN #IMPLIED >
<!ATTLIST relation destinationtype NMTOKEN #IMPLIED >

<!ELEMENT field (#PCDATA) >
<!ATTLIST field name NMTOKEN #REQUIRED >
	]]></programlisting>
		<para>The response contains the requested relation objects, wrapped by the object used to retrieve them. All additonal fields of the relations are also returned.</para>
		<note>
			<para>The common relation fields <systemitem moreinfo="none">snumber</systemitem>, dnumber and rnumber are not returned as field elements, but as the attributes source, destination, and role. In this respect, source is always identical to the object that initiated the search, destination to the object that is looked for. These fields contain MMBase object numbers. The role attribute contains the forward role (sname) of the relation.</para>
		</note>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getrelations (object+) >
<!ATTLIST getrelations id ID #IMPLIED>

<!ELEMENT object (relation*)>
<!ATTLIST object number NMTOKEN #REQUIRED >

<!ELEMENT relation (field*)>
<!ATTLIST relation number NMTOKEN #REQUIRED >
<!ATTLIST relation role NMTOKEN #REQUIRED >
<!ATTLIST relation source NMTOKEN #REQUIRED >
<!ATTLIST relation destination NMTOKEN #REQUIRED >

<!ELEMENT field (#PCDATA) >
<!ATTLIST field name NMTOKEN #REQUIRED >
	]]></programlisting>
		<example>
			<title>Example:</title>
			<programlisting format="linespecific"><![CDATA[
<request>

<getrelations id="1">
		<object number="675" />
	</getrelations>

	<getrelations id="2">
		<object number="672" >
			<relation role="part" />
			<relation destinationtype="scenes" role="posrel">
				<field name="pos" />
			</relation>
		</object>
	</getrelations>

</request>
	]]></programlisting>
			<para>Which may result in the following response:</para>
			<programlisting format="linespecific"><![CDATA[
<response>

	<getrelations id="1">
		<object number="675" type="people">
			<relation number="682" type="insrel" source="675" destination="681" role="related" />
			<relation number="684" type="insrel" source="675" destination="683" role="related" />
			<relation number="690" type="insrel" source="675" destination="678" role="actor" />
		</object>
	</getrelations>

	<getrelations id="2">
		<object number="672" type="movies">
			<relation number="677" type="insrel" source="672" destination="678" role="part" />
			<relation number="700" type="posrel" source="672" destination="699" role="posrel" >
				<field name="pos" >1</field>
			</relation>
			<relation number="702" type="posrel" source="672" destination="701" role="posrel">
				<field name="pos" >2</field>
			</relation>
			<relation number="704" type="posrel" source="672" destination="703" role="posrel">
				<field name="pos" >3</field>
			</relation>
		</object>
	</getrelations>

</response>
	]]></programlisting>
		</example>
	</section>
	<section>
		<title>Nesting calls (getdata/getrelations)</title>
		<note>
			<para>Deep nesting is possible only with Dove version 1.0 that is available with MMBase 1.5.1 and up.</para>
		</note>
		<para>Loading one object or set of realations a atime can be time consuming, especially if a lot of interrelated objects need to be loaded.</para>
		<para>It is possible to define a load action of related objects in one command, by nesting objects and their relations.</para>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getdata (object+) > ...

<!ELEMENT getrelations (object+) > ...
]]></programlisting>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getdata (object+) > ...

<!ELEMENT getrelations (object+) > ...
]]></programlisting>
		<example>
			<title>Example</title>
			<para>A possible combination of nesting objects and relations could look like this:</para>
			<programlisting format="linespecific"><![CDATA[
<request>

<getdata id="1">
		<object number="672">

			<field name="title" />

			<relation role="part" >
				<object >
					<field name="name" />
					<relation destinationtype="people" role=actor" >
						<object >
							 <field name="firstname" />
							 <field name="lastname" />
						</object>
					</relation>
				</object>
			</relation>

			<relation destinationtype="scenes" role="posrel">
				<field name="pos" />
				<object>
					<field name="title" />
				</object>
			</relation>

		</object>

	</getdata>

</request>
	]]></programlisting>
			<para>And this could be the response:</para>
			<programlisting format="linespecific"><![CDATA[
<response>

	<getdata id="1">
		<object number="672" type="movies">

		 <field name="title" >
			<relation number="677" type="insrel" source="672" destination="678" role="part" >
				<object number="678" type="elements">
					<field name="name" >Han Solo</field>
					<relation number="690" type="insrel" source="678" destination="675" role=actor" >
						<object number="690" type="people" >
							 <field name="firstname" >Harrison</field>
							 <field name="lastname" >Ford</field>
						</object>
					</relation>
				</object>
			</relation>

			<relation number="700" type="posrel" source="672" destination="699" role="posrel" >
				<field name="pos" >1</field>
				<object number="699" type="scenes">
					<field name="title">Entering Mos Eisly</field>
				</object>
			</relation>
			<relation number="702" type="posrel" source="672" destination="701" role="posrel">
				<field name="pos" >2</field>
				<object number="701" type="scenes">
					<field name="title">These are not the droids you are looking for</field>
				</object>
			</relation>
			<relation number="704" type="posrel" source="672" destination="703" role="posrel">
				<field name="pos" >3</field>
				<object number="703" type="scenes">
					<field name="title">Boring conversation anyway</field>
				</object>
			</relation>

		</object>
	</getdata>

</response>
	]]></programlisting>
		</example>
	</section>
	<section>
		<title>getnew</title>
		<para>A <command moreinfo="none">getnew</command> command creates a new, empty object of a specified object type.</para>
		<para>The new object is returned with a (system-generated) temporary objectnumber, and any fields for this object, with default values according to the system.
This call is for generating normal objects - for generating relations use <command moreinfo="none">getnewrelation</command>.</para>
		<para>The command requires a type attribute that holds the type to generate
</para>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getnew EMPTY >
<!ATTLIST getnew id ID #IMPLIED>
<!ATTLIST getnew type NMTOKEN #REQUIRED>
]]></programlisting>
		<para>The response contains the new object, in a fashion similar to getdata. The getnew element itself also contains the original type passed.
All fields of the object are returned.</para>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getnew (object|error) >
<!ATTLIST getnew id ID #IMPLIED>
<!ATTLIST getnew type NMTOKEN #REQUIRED>

<!ELEMENT object (field*)>
<!ATTLIST object number NMTOKEN #REQUIRED >
<!ATTLIST object type NMTOKEN #REQUIRED >

<!ELEMENT field (#PCDATA) >
<!ATTLIST field name NMTOKEN #REQUIRED >
]]></programlisting>
		<example>
			<title>Example:</title>
			<programlisting format="linespecific"><![CDATA[
<request>
	<getnew type="people" />
</request>
]]></programlisting>
			<para>And the result may look like this:</para>
			<programlisting format="linespecific"><![CDATA[
<response>

	<getnew id="1" type="people">
		<object number="n62967893564" type="people">
			<field name="firstname" />
			<field name="lastname" />
			<field name="email" />
		</object>
	</getnew>

	</response>
]]></programlisting>
		</example>
	</section>
	<section>
		<title>getnewrelation</title>
		<para>A <command moreinfo="none">getnewrelation</command> command creates a new, empty relation object with a specified role, source, and destination.</para>
		<para>The new object is returned with a (system-generated) temporary objectnumber, role, source, and destination, and any additional fields for this object, with default values according to the system. This call is for generating relations - for normal objects use <command moreinfo="none">getnew</command>.</para>
		<para>The command requires a role, source, and destination attribute that holds information for the relation to generate.
</para>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getnewrelation EMPTY>
<!ATTLIST getnewrelation id ID #IMPLIED>
<!ATTLIST getnewrelation role NMTOKEN #REQUIRED >
<!ATTLIST getnewrelation source NMTOKEN #REQUIRED >
<!ATTLIST getnewrelation destination NMTOKEN #REQUIRED >
]]></programlisting>
		<para>The response contains the new relation, in a fashion similar to getrelations. The getnewrelation element itself also contains the original attributes passed.
All additonal fields of the relation are returned. </para>
		<note>
			<para>snumber,  dnumber and rnumber are not returned as fields, but as the attruibutes source, destination, and role.</para>
		</note>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getnewrelation (relation|error)>
<!ATTLIST getnewrelation id ID #IMPLIED>
<!ATTLIST getnewrelation role NMTOKEN #REQUIRED >
<!ATTLIST getnewrelation source NMTOKEN #REQUIRED >
<!ATTLIST getnewrelation destination NMTOKEN #REQUIRED >

<!ELEMENT relation (field*)>
<!ATTLIST relation number NMTOKEN #REQUIRED >
<!ATTLIST relation type NMTOKEN #REQUIRED >
<!ATTLIST relation role NMTOKEN #REQUIRED >
<!ATTLIST relation source NMTOKEN #REQUIRED >
<!ATTLIST relation destination NMTOKEN #REQUIRED >

<!ELEMENT field (#PCDATA) >
<!ATTLIST field name NMTOKEN #REQUIRED >
]]></programlisting>
		<example>
			<title>Example:</title>
			<programlisting format="linespecific"><![CDATA[
<request>
	<getnewrelation role="posrel" source="134" destination="n72647968" />
</request>
]]></programlisting>
			<para>And the result:</para>
			<programlisting format="linespecific"><![CDATA[
<response>

	<getnewrelation role="posrel" source="134" destination="n72647968" />
		<relation number="n62967893568" role="posrel"
							source="134" destination="n72647968" >
			<field name="dir" >2</field>
			<field name="pos" />
		</relation>
	</getnewrelation>

</response>
]]></programlisting>
		</example>
	</section>
	<section>
		<title>getconstraints</title>
		<para>A <command moreinfo="none">getconstraints</command> command obtains constraint information for an object type.</para>
		<para>The type should be specified in the type attribute. An optional xml:lang attribute can be specified to indicate the preferred language of any gui information (help text, prompts, etc.).  A Dove implementation that supports this will return data in the preferred language where possible.</para>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getconstraints (object+) >
<!ATTLIST getconstraints id ID #IMPLIED>
<!ATTLIST getconstraints TYPE NMTOKEN #REQUIRED>
<!ATTLIST getconstraints xml:lang NMTOKEN "us">
]]></programlisting>
		<para>The response contains various tags containing basic information about the object type, the fields of the type, and any allowed relations.</para>
		<para>Tags supported in API 1.0 are singularname, pluralname, and description.</para>
		<para>The fields tag lists all editable fields of an object. Each field has its own tag, with a name attribute and a number of subtags : guiname, guitype, maxlength and required.</para>
		<para>The guitype of a field has a mime-type like format of the form datatype/presentationtype.</para>
		<para>The datatype part is one of string, int, long, float, double, datetime, or binary.</para>
		<para>The presentationtype may vary (common types are line, text, or date).
</para>
		<programlisting format="linespecific"><![CDATA[
<!ELEMENT getconstraints (error|(singularname,pluralname,description,fields,relations))+) >
<!ATTLIST getconstraints id ID #IMPLIED>
<!ATTLIST getconstraints type NMTOKEN #REQUIRED >
<!ATTLIST getconstraints xml:lang NMTOKEN "us" >

<!ELEMENT singularname (#PCDATA) >
<!ATTLIST singularname xml:lang NMTOKEN "us" >

<!ELEMENT pluralname (#PCDATA) >
<!ATTLIST pluralname xml:lang NMTOKEN "us" >

<!ELEMENT description (#PCDATA) >
<!ATTLIST description xml:lang NMTOKEN "us" >

<!ELEMENT fields (field*) >

<!ELEMENT relations (relation*) >

<!ELEMENT relation EMPTY >
<!ATTLIST relation role NMTOKEN #REQUIRED>
<!ATTLIST relation destinationtype NMTOKEN #REQUIRED >

<!ELEMENT field (guiname,guitype,maxlength,required)>
<!ATTLIST field name NMTOKEN #REQUIRED >

<!ELEMENT guiname (#PCDATA) >
<!ATTLIST guiname xml:lang NMTOKEN "us" >

<!ELEMENT guitype (#PCDATA) >

<!ELEMENT maxlength (#PCDATA) >

<!ELEMENT required (#PCDATA) >
]]></programlisting>
		<example>
			<title>Example:</title>
			<programlisting format="linespecific"><![CDATA[
<request>

	<getconstraints type="people" xml:lang="nl"/>

</request>
]]></programlisting>
			<para>And a possible result:</para>
			<programlisting format="linespecific"><![CDATA[
<response>

 <getconstraints type="people" xml:lang="nl">
		<singularname xml:lang="nl">Persoon</singularname>
		<pluralname xml:lang="nl">Personen</pluralname>
		<description xml:lang="nl">Persoonsgegevens.</description>
		<fields>
			<field name="firstname">
				 <guiname xml:lang="nl">Voornaam</guiname>
				 <guitype>string/line</guitype>
				 <maxlength>20</maxlength>
				 <required>FALSE</required>
			</field>
			<field name="lastname">
				 <guiname xml:lang="nl">Achternaam</guiname>
				 <guitype>string/line</guitype>
				 <maxlength>50</maxlength>
				 <required>TRUE</required>
			</field>
			<field name="email">
				 <guiname xml:lang="nl">Email adres</guiname>
				 <guitype>string/line</guitype>
				 <maxlength>35</maxlength>
				 <required>FALSE</required>
			</field>
		</fields>
		<relations>
			<relation destinationtype="images" role="related" />
			<relation destinationtype="movies" role="actor" />
		</relations>
	</getconstraints>

</response>
]]></programlisting>
		</example>
	</section>
	<section>
		<title>getlist</title>
		<para/>
		<programlisting format="linespecific"/>
		<para/>
		<programlisting format="linespecific"/>
		<example>
			<title>Example:</title>
			<programlisting format="linespecific"/>
			<para/>
			<programlisting format="linespecific"/>
		</example>
	</section>
	<section>
		<title>put</title>
		<para/>
		<programlisting format="linespecific"/>
		<para/>
		<programlisting format="linespecific"/>
		<example>
			<title>Example:</title>
			<programlisting format="linespecific"/>
			<para/>
			<programlisting format="linespecific"/>
		</example>
	</section>
</article>

