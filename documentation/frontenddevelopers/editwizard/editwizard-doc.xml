<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article>
	<articleinfo>
		<title>MMBase Editwizard Documentation</title>
		<date>2 september 2002</date>
		<edition>$Id: editwizard-doc.xml,v 1.12 2003-04-03 11:45:12 pierre Exp $</edition>
		<authorgroup>
			<author>
				<firstname>Kars</firstname>
				<surname>Veling</surname>
				<affiliation>
					<orgname>Q42</orgname>
				</affiliation>
			</author>
			<author>
				<firstname>Henk</firstname>
				<surname>Hangyi</surname>
				<affiliation>
					<orgname>MMatch</orgname>
				</affiliation>
			</author>
			<author>
				<firstname>Pierre</firstname>
				<surname>van Rooden</surname>
				<affiliation>
					<orgname>Publieke Omroep</orgname>
				</affiliation>
			</author>
		</authorgroup>
		<legalnotice>
			<para>This software is OSI Certified Open Source Software. OSI Certified is a certification mark of the Open Source Initiative.</para>
			<para>The license (Mozilla version 1.0) can be read at the MMBase site. See <ulink url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
		</legalnotice>
		<releaseinfo>Version 1.0 is released with MMBase 1.6.</releaseinfo>
	</articleinfo>
	<section id="introduction">
		<title>Introduction</title>
		<para>The editwizards allow designers to easily create wizard-like web-entry forms for content entry and maintance.</para>
		<para>The wizards are not intended to edit all possible relations and fields of an object; they are more suitable for special content tasks, such as editing a news item or adding a user to the system and placing images and organisational information along with it. A wizard with more than 3 steps is generally over the top.</para>
		<para>In this document you will learn how to install the editwizards on your MMBase release, and how to create your own wizards. First the basics are explained, and how the most simple wizards should be set up. Then, you'll see how more complex wizards can be created.</para>
	</section>
	<section id="installation">
		<title>Installation</title>
		<para>If you install and run an 1.6 or higher release of MMBase, the editwizards will be included.</para>
		<para>To let the editwizards run properly, the /mmapps/editwizard directory must be in place (default installed). This directory contains the JSP pages, the wizards, images, XSL's and CSS stylesheets and client-side Javascript code - in short, all the files needed to run the wizards.</para>
		<para>For all practival purposes, you only need to remember the location of the files wizard.jsp (which you call to edit a specific object or create a new one), and list.jsp (which you use to list objects which you can then select for edit).</para>
		<para>You are free to move the /mmapps/editwizard directory somewhere else. If you do, you need to change the calls in the examples below so they point to the right directory.</para>
		<section id="requirements">
			<title>Requirements and Assumptions</title>
			<para>The editwizards can be used by the following browsers:</para>
			<itemizedlist>
				<listitem>
					<para>Internet Explorer 5.0 and higher on Windows platforms</para>
				</listitem>
				<listitem>
					<para>Internet Explorer 5.1 and higher on Apple Macintosh platforms</para>
				</listitem>
				<listitem>
					<para>Netscape 6.1 and higher on any platform</para>
				</listitem>
				<listitem>
					<para>Mozilla 0.9.6 and higher on any platform</para>
				</listitem>
			</itemizedlist>
			<para>You'll need a running instance of MMBase (as from version 1.6, the editwizards are included).</para>
		</section>
		<section id="assumptions">
			<title>Assumptions</title>
			<para>The examples below assume the right builders and relations are available for the demo's. If not, make sure the right builders are active. You can do this by deploying the 'MyNews' application (By the admin pages or by setting the autodeploy status of the MyNews.xml to true).</para>
			<para>The editwizards rely heavily on XML and XSL. Therefore, this guide assumes you know something about xml nodes and attributes and how to make valid xml documents.</para>
			<para>You also need a decent version of an xml parser. MMBase comes with xalan and xerces, which should suffice. If you are an administrator, note that the xalan/xerces jars that ship with orion are older versions. You will need to replace the orion jars with the ones that ship with the MMBase distribution.</para>
		</section>
		<section id="upandrunning">
			<title>Are the editwizards up and running?</title>
			<para>To make sure the wizards are up and running, you can try the following:</para>
			<orderedlist inheritnum="ignore" continuation="restarts">
				<listitem>
					<para>Make sure your MMBase and webserver is up and running</para>
				</listitem>
				<listitem>
					<para>Open a browser</para>
				</listitem>
				<listitem>
					<para>The examples can be found in the 'mmexamples' subdirectory that is installed with the MMBase distribution.
Type in the url to the editwizard examples, eg.: http://localhost:4242/mmexamples/editwizard/</para>
				</listitem>
				<listitem>
					<para>A simple html file should show with a few online demo's</para>
				</listitem>
				<listitem>
					<para>Click on the link to "A very simple example"</para>
				</listitem>
				<listitem>
					<para>Click on the demo "Images"</para>
				</listitem>
				<listitem>
					<para>A login screen should popup. Login as you would with the MMEditors or the MMBase admin.</para>
				</listitem>
				<listitem>
					<para>If you logged in correctly, a list of images is shown (this can be an empty list).</para>
				</listitem>
				<listitem>
					<para>Let's try to upload a new image. Click on the right-bottom plus-icon to upload a new image.</para>
				</listitem>
				<listitem>
					<para>A wizard-form is shown. Enter a title of the image and its description. The 'title' and 'description' are required fields. Their prompts stay red until you enter something.
					Click on 'Upload new image'</para>
				</listitem>
				<listitem>
					<para>Browse to an image, select it and click on 'upload'. The page with the image information will refresh, showing the newly uploaded image filename and size. (in Internet Explorer, the image itself can be previewed. In Netscape or Mozilla preview is not available) </para>
				</listitem>
				<listitem>
					<para>By clicking on "Save" you store the image in MMBase. You return to the image list. The image you just uploaded is added to this list.</para>
				</listitem>
			</orderedlist>
		</section>
	</section>
	<section id="gettingstarted">
		<title>Getting Started</title>
		<para>In this section we will make a simple wizard to learn the basics about the wizards. Let's try to build up a simple wizard.</para>
		<section>
			<title>Step 1. Deciding what to do</title>
			<para>First, you need to decide what your wizard should do. In our first example, we just want to let the user edit the plain fields of a very simple object. We use the builder: "people" to make our first wizard (this builder is present if you installed the MyNews application).</para>
			<para>Users will be able to add, delete and change people-objects (persons in real-life) using this wizard. If you just want to see how it's done, see the working example in the editwizard installation.</para>
			<para>We also need to decide where to put our wizards; for the purpose of the current example, we suggest to place them in the directory 'data' inside the mmapps/editwizard directory. This will enable us to directly call the wizards and use the examples (we will later see how you can place your wizard files somewhere else).</para>
			<para>Let's say we make a new directory, named "practice" in the "data" directory. So, the path from the web-root looks as follows: mmapps/editwizard/data/practice</para>
		</section>
		<section>
			<title>Step 2. Create a basic wizard</title>
			<para>Create a text file in the subdir you decided, with the extension ".xml". In our example, it should be named: /practice/simple.xml . Open the newly created simple.xml in a text-editor and copy or type the following code into simple.xml. Save the simple.xml file.</para>
			<programlisting format="linespecific">
			<![CDATA[
<?xml version="1.0"?>
<!DOCTYPE wizard-schema PUBLIC "-//MMBase/DTD editwizard 1.0//EN" "http://www.mmbase.org/dtd/wizard-schema_1_0.dtd">
<wizard-schema id="some_id">
	<!-- give the wizard a title -->
	<title>Practice</title>

	<!-- define an action to create a people object -->
	<action type="create">
	 <object type="people" />
	</action>

	<!-- define an action to delete a people object -->
	<action type="delete" />

	<!-- define an form to edit a people object -->
	<form-schema id="step1">
		<!-- form title -->
		<title>People Wizard</title>

		<!-- edit field 'firstname' -->
		<field name="firstname">
			<prompt>First name</prompt>
		</field>

		<!-- edit field 'lastname' -->
		<field name="lastname">
			<prompt>Last name</prompt>
		</field>

	</form-schema>
</wizard-schema>
			]]>
			</programlisting>
		</section>
		<section>
			<title>Step 3. Get it working</title>
			<para>Check if your newly created wizard works.</para>
			<para>Open your webbrowser and type in the url to the editwizards list.jsp page, as follows (replace with the correct domain name if your site does not run at localhost:4242) :</para>
			<programlisting format="linespecific">http://localhost:4242/mmapps/editwizard/jsp/list.jsp?wizard=practice/simple&amp;nodepath=people&amp;fields=firstname</programlisting>
			<para>
			The list.jsp page is one of two pages you can call to start the wizards. List.jsp reads the xml you provide as the 'wizard' parameter, and creates a list of items to pick from - either to edit or to delete. It may also provide a button with which you can add new people.</para>
			<para>You should see a login screen first. Login as you would with the MMEditors or the MMBase admin. After you logged in, you're screen may look like this:</para>
			<figure float="0">
				<title>List of persons</title>
				<screenshot>
					<graphic fileref="media/list_of_persons.jpg"/>
				</screenshot>
			</figure>
			<para>There is one person ('Rob') entered in the list example above (this may be different in your case). It has a delete button (the minus-sign) with which you can remove the person. Clicking on the name 'Rob' will allow you to edit the person name. The 'plus' sign in the bottom-right screen allows you to add new people.</para>
			<para>Let's create a new person. Click on the plus-icon. If you filled in the editwizard correctly, you should see the following page:</para>
			<figure float="0">
				<title>Creating a person.</title>
				<screenshot>
					<graphic fileref="media/new_person.jpg"/>
				</screenshot>
			</figure>
			<para>Here you can see your first wizard in action! Two fields are visible (as defined in the simple.xml file). Fill in the two fields and press save. You are returned to the list, which shoul now contain your newly added person.</para>
			<para>You can image you can change the fieldnames, titles and object-types in the wizard so that you can edit different objects in the system. But wizards can do a lot more. We'll get to that in the following section.</para>
		</section>
	</section>
	<section id="wizardbasics">
		<title>Wizard Basics</title>
		<para>You can already make and run a simple wizard. In this section, we go deeper into the features of the wizards. We will take the simple wizard from the practice example in the former section, and expand this simple example with new elements.</para>
		<section id="createaction">
			<title>Create action</title>
			<para>The create action defines whether, and more importantly, what should be created in MMBase if the user clicks on the create-button in the list view. A create action is placed inside the /wizard-schema node. You can create multiple objects inside each other (and create relations between them), and place default values in some fields. Example:</para>
			<programlisting format="linespecific">
			<![CDATA[
<action type="create" >
	<!-- create an object of type 'people' -->
	<object type="people" >
		<!-- initialize the firstname field to 'NOBODY'  -->
		<field name="firstname">NOBODY</field>

		<!-- add a relation to a newly created, empty news object  -->
		<relation role="related">
			<object type="news" />
		</relation>
	</object>
</action>
			]]>
			</programlisting>
			<para>This action creates 2 objects and 1 relation. It first creates a new 'people' object, and fills the field "firstname" with the value "NOBODY". It then creates a new 'news' object, and relation with role 'related' between the two new objects.</para>
			<note>
				<para>The relation between people and news need be defined before MMBase will create it for you. As noted previously, the MyNews application defines all these relations for you once installed.</para>
			</note>
			<para>If you do not define a create action, the wizard does not allow you to create anything, and the list page will not show a create button.</para>
		</section>
		<section id="loadaction">
			<title>Load action</title>
			<para>Generally, the wizard needs to know what objects and relations to &lt;load&gt; before the wizard-pages are displayed. By default, it loads the MMBase object that was passed to it, and all its fields. But often we will want to edit more than one object at once. In that case, we need to also load these other objects. You can use the load-action to define the load behaviour of the wizards, forcing it to load related objects so you can edit or display them along with the main object. Example:</para>
			<programlisting format="linespecific">
			<![CDATA[
<action type="load" >
	<!-- for the object passed, only load the firstname and lastname fields -->
	<field name="firstname"/>
	<field name="lastname"/>

	<!-- load all relations from this object to 'news' objects with role 'posrel' -->
	<relation role="posrel" destinationtype="news" >
		<object>
			<!-- only load the titel field of these news objects -->
			<field name="title"/>
		</object>
	</relation>
</action>
			]]>
			</programlisting>
			<para>This load action loads only the firstname and lastname fields of the object passed (a person). It also loads all the news objects (but only the title field) that are related to this object.
			</para>
		</section>
		<section id="deleteaction">
			<title>Delete action</title>
			<para>Place a delete action in the wizard if you want to allow the users to delete objects. Try to remove the &lt;action type="delete" /&gt; from the practice wizard and reload the list to see what the impact is.</para>
			<note>
				<para>The delete buttons will disappear.</para>
			</note>
			<note>
				<para>When you delete an object in the editwizards, all relations with other objects will also be deleted. It is not possible to automatically delete the objects related to, just the relations themselves.</para>
			</note>
		</section>
		<section id="fieldformattypes">
			<title>Field format types</title>
			<para>You need to specify each field you like to edit in one of the form-schema's in a wizard. Every field has a format type that determines how the field can be edited. Fields can be edited using textboxes, text areas, dropdown lists, or using an upload button, all depending on the fields' format type.</para>
			<para>By default, the wizard uses the format types (or guitype) as defined in the builders in MMBase. You can override these types with your own if you prefer another format. In the reference section you will find what field types you can use and what options they have.</para>
		</section>
		<section id="validation">
			<title>Validation</title>
			<para>An important element of the editwizards is the ability to do basic validation on the fields. You can add attributes to specify limits on what a field can contain.  Eg.:</para>
			<programlisting format="linespecific"><![CDATA[ <field name="firstname"> ...]]></programlisting>
			<para>can be extended with validation fields. Because the "firstname" field is a text-field, you can apply text-validation rules, such as a minimum or maximum text length. Eg.:</para>
			<programlisting format="linespecific"><![CDATA[ <field name="firstname" dtminlength="1" dtmaxlength="20" > ...]]></programlisting>
			<para>The field is now only valid if it contain at least 1 and at most 20 characters. As long as the field is invalid, it will be marked red in the wizard, and you cannot save the object</para>
			<note>
				<para>The exact validation rules available are dependent on the field's datatype. The datatype is automatically determined by MMBase. Examples of datatypes are string, integer, and datetime.
				You can override the datatype to force certain constraints, but it is advised you stick to the types MMBase advises, unless you know what you are doing.</para>
			</note>
		</section>
	</section>
	<section id="usinglists">
		<title>Using lists</title>
		<para>A quite important feature of the editwizard are the "lists". With lists, you can show, edit, delete and create objects related to the object you are working on.</para>
		<para>For this example you'll need the people and the news objects in MMBase.</para>
		<section id="createwizard">
			<title>Create a new wizard</title>
			<para>In the practice directory, create a new file named people.xml. Enter the following xml:</para>
			<programlisting format="linespecific">
			<![CDATA[
<?xml version="1.0"?>
<!DOCTYPE wizard-schema PUBLIC "-//MMBase/DTD editwizard 1.0//EN" "http://www.mmbase.org/dtd/wizard-schema_1_0.dtd">
<wizard-schema id="people">
	<title>People</title>

	<!-- Action to create a new people object -->
	<action type="create">
		<object type="people">
			<field name="firstname">Enter firstname HERE</field>
		</object>
	</action>

	<!-- Action to delete a people object -->
	<action type="delete" />

	<!-- Action to load a people object, including all posrel relations to news  -->
	<action type="load">
		<relation destinationtype="news" role="posrel" />
	</action>

	<form-schema id="step1">
		<title>People</title>
		<!-- Show people object -->
		<field name="firstname" >
			<prompt>Firstname</prompt>
		</field>
		<field name="lastname">
			<prompt>Lastname</prompt>
		</field>

		<!-- List all news items related with role posrel
				 This list can have a minumum of 0 and a amximum of inifinite ("*") items.
				 This is also the default for a list
		-->
		<list role="posrel" destination="news" minoccurs="0" maxoccurs="*">
			<title>Related newsitems</title>
			<!-- Show the 'item' in a list (the object) -->
			<item>
				<field name="title" ftype="data">
					<prompt>Newsitem</prompt>
					<description>Here you can see the name of the related newsitem</description>
				</field>
			</item>

			<!-- defines a search command.
					 This creates a search box that allows you to search for objects
					 using a specified ndoepath.
					 In this case, the searchs ercahes for news items, using the fields
					 'title' and 'subtitle' to show the results of the search in the list.
			-->
			<command name="search" nodepath="news" fields="title,subtitle" age="-1">
				<prompt>Search newsitems</prompt>
				<!-- Search filters determine what you can search on (in this case, on title
						 or both title and subtitle)
						 If you do not specify a search filter, the default is to search on the
						 'title' field.
				-->
				<!-- Search on title -->
				<search-filter>
					<name>subtitle contains</name>
					<search-fields>subtitle</search-fields>
				</search-filter>
				<!-- Search on title and subtitle
						 not the notation in the search-fields for more than one field
				-->
				<search-filter>
					<name>title or subtitle contains</name>
					<search-fields>title|subtitle</search-fields>
				</search-filter>
			</command>
			<!-- Action to create a relation, used by teh search command to create
					 the relation once it is found and chosen.
			-->
			<action type="create">
				<relation destinationtype="news" role="related" />
			</action>
		</list>
	</form-schema>
</wizard-schema>
			]]></programlisting>
		</section>
		<section id="testwizard">
			<title>Test the wizard</title>
			<para>Try the new wizard.</para>
			<orderedlist inheritnum="ignore" continuation="restarts">
				<listitem>
					<para>Open a browser and go to the wizards. Eg.: http://localhost:4242/mmapps/editwizard/jsp/list.jsp?fields=firstname&amp;wizard=practice/people&amp;nodepath=people</para>
				</listitem>
				<listitem>
					<para>Login if needed</para>
				</listitem>
				<listitem>
					<para>Now you should see a list with all people-objects available in the system. In our example, one user exists (Rob).</para>
				</listitem>
				<listitem>
					<para>Let's create a new one. Click on the star-icon in the bottom-right of the window.</para>
				</listitem>
				<listitem>
					<para>Now, you should see a wizard-form with your new people-object. By default, the firstname is filled with "Enter firstname HERE".</para>
					<note>
						<para>You can see that text in the entered wizard above.</para>
					</note>
				</listitem>
				<listitem>
					<para>Fill in your values and press Save. You should see the list again with your new people-object added.</para>
				</listitem>
				<listitem>
					<para>To the list, edit the new people object, by clicking on its name.</para>
				</listitem>
				<listitem>
					<para>Search for a newsitem to relate it to, by click on the search-icon in the square: "Related newsitems".</para>
				</listitem>
				<listitem>
					<para>A popup should be visible now, with all newsitems available at this time. The MyNews application includes a few example items. If none are showing, you can add a new newsitem with the MMBase basic editors (/mmeditors/jsp/).</para>
				</listitem>
				<listitem>
					<para>Click on a newsitem of your choice and press Ok. The wizard-form will reload and you should see the newly related newsitem in the square.</para>
				</listitem>
				<listitem>
					<para>Press Save. The people object is edited; it is related to the newsitem of your choice. Open the people object again to verify.</para>
				</listitem>
			</orderedlist>
		</section>
	</section>
<section
><title
>Using include and extends</title
><para
>You can keep your editwizards manageable by using the include and extends commands to place parts of your editwizard in seperate files.</para
><itemizedlist
><listitem
><para
>include</para
><para
>Can be used to place actions, lists and optionlists in seperate files</para
></listitem
><listitem
><para
>extends</para
><para
>Can be used to place form-schema&#39;s in seperate files.</para
></listitem
><listitem
><para
>Example</para
><programlisting format="linespecific"><![CDATA[
<?xml version="1.0"?>
<!DOCTYPE wizard-schema PUBLIC "-//MMBase/DTD editwizard 1.0//EN" "http://www.mmbase.org/dtd/wizard-schema_1_0.dtd">
<wizard-schema id="empty">
	<title>Artikel</title>
	<action include="wizards/article/create_article.xml" />
    <action include="wizards/article/delete_article.xml" />
	<action include="wizards/article/load_article.xml" />
	<lists>
		<optionlist include="wizards/types/article_type.xml" /> 
	</lists>
	<steps>
		<step form-schema="basic" />
		<step form-schema="paragraphs" />
	</steps>
	<form-schema id="basic" extends="wizards/article/edit_article.xml" />
	<form-schema id="paragraphs">
		<list include="wizards/paragraphs/add_paragraphs.xml" /> 
	</form-schema>
</wizard-schema>
]]></programlisting
><note
><para
>Every file that is included or used in an extend should have a valide doctype. For instance, in case a list in included, this list should start with:</para
><programlisting format="linespecific"><![CDATA[
<?xml version="1.0"?>
<!DOCTYPE list PUBLIC "-//MMBase/DTD editwizard 1.0//EN" "http://www.mmbase.org/dtd/wizard-schema_1_0.dtd">
]]></programlisting></note
></listitem
></itemizedlist
></section
>
	<section id="reference">
		<title>Reference</title>
		<para>This reference describes the syntax of the wizards and how to access them using a browser.</para>
		<section>
			<title>General - wizard definition schemas</title>
			<para>The editwizards need a xml file with a definition of the wizard to operate.			By default, those are found in the subdirectory /editwizard/data/, but it is possible to place your definitions, as well as the wizard stylesheets (whichd efine layout) elsewhere.</para>
			<para>When the wizards search for a requested file (a wizard xsl stylesheet or a wizard xml schema), they look for the referenced file in the following order:
			</para>
			<variablelist>
				<varlistentry>
					<term>The referer page directory</term>
					<listitem>
						<para>You call the editwizard scripts (list.jsp and wizxard.jsp) from a page located in another directory than the editwizard home directory. If you do, the wizards keep a reference to the calling page, the 'referer'. When a xml or xsl file is requested, the wizard first checks whether the file can be found in the directory of the referer page.</para>
						<para>Example: if the file requested is data/my_wizard.xml, and the referencing page is /myeditors/index.jsp, the system first checks for the file /myeditors/data/my_wizard.xml.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>The editwizard home directory</term>
					<listitem>
						<para>The editwizard home is the directory that contains the ditwizard basic stylesheets, data library, and jsp pages. It is one directory lower than the location of the list.jsp and  wizard.jsp files. In the standard distribution, this location is /mmapps/editwizard/ (the list.jsp and wizard.jsp are located in /mmapps/editwizard/jsp/), but you can place the wizards wherever you like.
						</para>
						<para>Example: if the file requested is data/my_wizard.xml, and the editwizard home is in mmapps/ediwtizard/, the system checks for the file /mmapps/editwizard/data/my_wizard.xml.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		<section>
			<title>list.jsp</title>
			<para>To run a wizard, you'll need to call either list.jsp or wizard.jsp. These scripts are located in the jsp subdirectory of the editwizard home directory. In the standard distribution, this is mmapps/editwizard/jsp/.</para>
			<para>List.jsp starts with running a search query on MMBase to create a list of items to search from. It shows a list of all found nodes and allows you to select one of these items to edit, to remove an item, or to add a new item. The actual options given depend on the security settings (if you are allowed to do this by MMBase), and the possibilities offered by the wizard. Note that the list.jsp does NOT run an editwizard itself, it is just a 'starter'. It eventually calls wizard.jsp (see below) to actually edit or create an item.</para>
			<para>You need to specify a number of parameters to tell the list.jsp what wizard should be used, and what nodes and fields should be shown in the list.</para>
			<variablelist>
				<title>The following parameters MUST be specified (list.jsp does not work if you do not specify them):</title>
				<varlistentry>
					<term>wizard</term>
					<listitem>
						<para>The wizard to use. This is a relative reference to the xml schema file. Do not specify the ".xml" prefix.</para>
						<programlisting format="linespecific">wizard=data/simple.xml</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>nodepath</term>
					<listitem>
						<para>The nodepath defines the object types to list. This can be one object type, or a comma-separated list of types, which are treated as a relation chain, like in path attribute of the taglib's &lt;mm:list&gt; tag.
						The last objecttype listed is the object that is used as the objecttype to edit in the wizard.</para>
						<programlisting format="linespecific">nodepath=people or nodepath=people,news</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>fields</term>
					<listitem>
						<para>The fields to show in the list. If you query only one nodetype (see nodepath), you can use simple field names. Otherwise, you need to preface the fieldnames with the name of the objecttype they belong to.
						If the first field listed is a number field, teh objecttype of that field is used as the objecttype to edit in the wizard (instead of the last object type in the nodepath list). This parameter is similar to the fields attribute of the taglib's &lt;mm:list&gt; tag.</para>
						<programlisting format="linespecific">fields=firstname,lastname or fields=news.title,people.firstname,people.lastname</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>The following parameters MAY be specified:</title>
				<varlistentry>
					<term>orderby</term>
					<listitem>
						<para>A list of fieldnames used to order the returning list. This parameter is similar to the orderby attribute of the taglib's &lt;mm:list&gt; tag.</para>
						<programlisting format="linespecific">orderby=lastname or  orderby=people.lastname,news.title</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>directions</term>
					<listitem>
						<para>A list of one or more UP/DOWN keywords. Each keyword determines whether the order of a matching field specified in the orderby parameter is ascending (UP) or descending (DOWN). This parameter is similar to the directions attribute of the taglib's &lt;mm:list&gt; tag.</para>
						<programlisting format="linespecific">directions=UP or  directions=UP,UP</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>constraints</term>
					<listitem>
						<para>A SQL-like constraint, used to filter the list. If you use fieldnames in a constraint, surround it with brackets ([]). This allows MMAbse to recognize the fields and optimize the query. This parameter is similar to the constraints attribute of the taglib's &lt;mm:list&gt; tag.</para>
						<programlisting format="linespecific">constraints=[news.title] like '%Brasil%'</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>distinct</term>
					<listitem>
						<para>If true, double entries in a list are returned only once.</para>
						<programlisting format="linespecific">distinct=true</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>pagelength</term>
					<listitem>
						<para>The maximum number of entries shown on one list page. Default value is 50.</para>
						<programlisting format="linespecific">pagelength=50</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>maxpagecount</term>
					<listitem>
						<para>The maximum number of pages available to browse through. Default value is 10.</para>
						<programlisting format="linespecific">maxpagecount=10</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>start</term>
					<listitem>
						<para>The number of the item in the list where to start listing.
							This value is used to skip to a certain page when brosing a large list.
							Default is 0.</para>
						<programlisting format="linespecific">age=31</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>age</term>
					<listitem>
						<para>The maximum age (in days) of the objects to list. Default is no age restriction.</para>
						<programlisting format="linespecific">age=31</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>searchfields</term>
					<listitem>
						<para>The field(s) on which to make a search, using the value specified in the search parameter and the type of comparison specified in the search type.</para>
						<para>You can specify more than one field (separated by commas). if you do, a search matches if one or more of the specified fields matches.</para>
						<programlisting format="linespecific">searchfields=news.title,news.subtitle</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>search</term>
					<listitem>
						<para>The term or value to search for. This is only valid if you also specify the searchfields parameter.</para>
						<programlisting format="linespecific">search=Brasil</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>searchtype</term>
					<listitem>
						<para>Determines what type of search is used to filter on the searchfields, using the specified search value.  This is only valid if you also specify the searchfields parameter.</para>
						<para>Allowed values are 'string', 'like', 'equalto', 'greaterthan', 'lessthan', 'notgreaterthan', and 'notlessthan'. use 'string' to compare the search value to the field using an exact match. Use 'like' to make a pattern search using the specified searchvalue. Use the other values to compare teh feild to numeric values or dates. I.e. using 'greaterthan' selects all fields whose (numeric) value is greater than the specified (numeric) value.
						</para>
						<programlisting format="linespecific">searchtype=like</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>origin</term>
					<listitem>
						<para>A node alias or number, which will be passed to the underlying editwizard. the value can then be referenced in the editwizard schema using the {$origin} variable.
						This can be used to create relations to nodes whose 'origin' is determined outside the wizard (i.e. in a complex search or determined through user preferences).
						</para>
						<programlisting format="linespecific">origin=my_start_node</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>title</term>
					<listitem>
						<para>An optional title to use by the list. In general, you should specify this in the editwizard schema.</para>
						<programlisting format="linespecific">title=News of The Week</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<example>
				<title>How to use list.jsp to list objects</title>
				<programlisting format="linespecific">list.jsp?wizard=practice/people&amp;nodepath=people&amp;fields=firstname,lastname</programlisting>
				<programlisting format="linespecific">list.jsp?wizard=practice/simple&amp;startnodes=1&amp;nodepath=people,news&amp;fields=news.title,people.firstname,people.lastname</programlisting>
			</example>
		</section>
		<section>
			<title>wizard.jsp</title>
			<para>You can use wizard.jsp to directly start a wizard. Like list.jsp, you will need to supply the correct parameters in order to let the wizard run correctly. If you call the wizard.jsp page, a wizard will be loaded and started. The proper html will be rendered and shown in the browser. The syntax of wizard.jsp to create a new object looks like this:</para>
			<programlisting format="linespecific">wizard.jsp?wizard=practice/simple&amp;objectnumber=new</programlisting>
			<para>To create a wizard and use an existing mmbase object as source:</para>
			<programlisting format="linespecific">wizard.jsp?wizard=practice/simple&amp;objectnumber=[objectnumber]</programlisting>
			<example>
				<title>How to use wizard.jsp to start an editwizard</title>
				<programlisting format="linespecific">wizard.jsp?wizard=practice/simple&amp;objectnumber=184</programlisting>
				<programlisting format="linespecific">wizard.jsp?wizard=practice/simple&amp;objectnumber=new</programlisting>
			</example>
		</section>
		<section>
			<title>Syntax reference</title>
			<variablelist>
				<title>wizard</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;wizard-schema /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>This is the root-node of a wizard. Always use a wizard-node to start a wizard.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>id (String) The identifier of the wizard. Not used by the wizards at this time.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>&lt;title&gt;(String)&lt;/title&gt; Title of the wizard</para>
						<para>&lt;form-schema /&gt; See also: form-schema.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>&lt;steps /&gt; (see also: steps)</para>
						<para>&lt;action type="load" /&gt; (see also: action)</para>
						<para>&lt;action type="create" /&gt; (see also: action)</para>
						<para>&lt;action type="delete" /&gt; (see also: action)</para>
						<para>&lt;lists /&gt; (see also: lists)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<wizard-schema>
	<title>Wizard-Title</title>
	<form-schema id="step1">
		<field name="firstname">
			<prompt>Your Firstname</prompt>
		</field>
	</form-schema>
</wizard-schema>
]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>action type="load"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;action type="load" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this action to define what the wizard should load when initialising. Mainly, if this node is supplied specific relations will be loaded, specific fields will be loaded or not-loaded. (Note: this syntax should maybe be adjusted in the future.)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>type="load"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>&lt;relation destination="[buildername]" role="[rolename]" /&gt; Note: this relation node can contain complex load actions: eg.: relations-in-relations. (Not documented here -for now. See the example below how it works.)</para>
						<para>&lt;field name="[fieldname]" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;wizard-schema /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<action type="load">
	<relation destinationtype="people" role="related">
		<object>
			<relation destinationtype="urls" />
		</object>
	</relation>
	<field name="title" />
	<field name="subtitle" />
</action>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>action type="create"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;wizard-schema /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>&lt;action type="create" /&gt; Use this action to define what objects and relations should be created if a user presses the create button. (Or -for that matter- uses the wizard.jsp?objectnumber=new)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>type="create"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>See needed attributes</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>&lt;object type="[buildername]" /&gt;</para>
						<para>or &lt;relation role="[rolename]" (destinationtype="[buildername]") (destination="[objectnumber]" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>See needed childnodes</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;wizard-schema /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<action type="create">
	<object type="news">
		<relation destination="13234" role="related"/>
		<relation role="posrel">
			<field name="pos">42</field>
			<object type="images">
				<field name="title">new image</field>
			</object>
		</relation>
	</object>
</action>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>action type="insert"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;insert /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>&lt;action type="insert" /&gt; Use this action to insert this &lt;list /&gt; in the editwizard with objectnumber is "new "</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>type="insert"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>See needed attributes</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;list /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<list role="posrel" destination="images" minoccurs="0" maxoccurs="*" orderby="field[@name='pos']" ordertype="number">
	<title>Images</title>
	<item displaymode="section" displaytype="image">
		<title>Overview</title>
		<field fdatapath="." ftype="startwizard" objectnumber="{object/@number}" wizardname="images">
			<prompt>Change this image</prompt>
		</field>
		<field name="title" ftype="data">
			<prompt>Title</prompt>
		</field>
	</item>
	<command name="insert"/>
	<action type="create">
		<relation role="posrel">
			<object type="images" >
				<field name="pos">2</field>
			</object>
		</relation>
	</action>
</list>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>action type="delete"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;action type="delete" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this action to define that users are allowed to delete objects of this kind. If a 'delete-action' is defined in the wizard, the list.jsp will show a delete button. If a delete is performed, only the given object is deleted, NOT the related objects.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>type="delete"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>See needed attributes</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>&lt;prompt /&gt; If a prompt-node exists, in the list.jsp there will be prompted for a confirmation with the given text.</para>
						<para>&lt;description /&gt; If a description is supplied, the given text will be shown as a 'hint' on the delete-button.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;wizard-schema /&gt;</para>
						<para>&lt;list /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<action type="delete">
	<prompt>Are you sure you intent to delete this news item?</prompt>
	<description>Click here to delete this news item</description>
</action>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>steps</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;steps /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this node to define in what sequence the form-schema's should be placed. If not supplied, the normal order as found in the wizard's xml file will be used. Usually, you will not use this node.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>None.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>&lt;step form-schema="[form-schema-id]' /&gt; Place one or more &lt;step /&gt; nodes to define the sequence to be used.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>See needed childnodes.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;wizard-schema /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<steps>
	<step form-schema="basics" />
	<step form-schema="addmedia" />
	<step form-schema="incontext" />
</steps>
					]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>form-schema</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;form-schema /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>A wizard will always be needing at least one form-schema. In a form-schema one form (or page) of a wizard is defined. If you are using multiple form-schema's, supply id's so that form-schema's can be identified.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>id="[form-schema-id]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>&lt;title /&gt; Place the title of the form-schema here.</para>
						<para>&lt;field /&gt; or &lt;list /&gt; (See also: field or list)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>&lt;description /&gt; Here you can place your description of the form-schema.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;wizard-schema /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<form-schema id="step1">
	<title>This is a simple Form</title>
	<field name="intro">
		<prompt>Enter the Intro-text</prompt>
	</field>
</form-schema>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>object (inside action type="create")</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;object type="[buildername]" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Inside a create-action, you can place an object-node to define what should be created within mmbase if the create-action is performed. With this node, you can define what object should be created, what values should be placed in what fields, and you can define possible new relations that should be created.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>type="[buildername]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>See needed attributes.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>&lt;relation /&gt; If a relation node is placed inside an objectnode, a relation is created relating the object defined by the &lt;object /&gt; node and some other object (eg.: another to-be created object or an existing one.)</para>
						<para>&lt;field /&gt; In the field nodes inside the object nodes, the user can define the defaultvalues of the designated fields. Eg.: &lt;field name="firstname"&gt;Enter your firstname&lt;/field&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;action type="create" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<object type="news">
	<relation destination="13234" role="related" />
	<relation role="posrel">
		<field name="pos">42</field>
		<object type="images">
			<field name="title">new image</field>
		</object>
	</relation>
</object>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>relation (inside action type="create")</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;relation /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Usually, the relation is placed inside an object-node (inside a create-action), or it will be placed directly inside a create-action. With this node, the user can make relations between two newly created objects, or, create a relation between one newly created object and an already existing object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>destinationtype="[buildername]" This attribute is not used anymore. Forget it I'd say.</para>
						<para>destination="[objectnumber or alias]" Use this attribute to point the relation to an already existing object in the mmbase cloud.</para>
						<para>role="[relationname]" Use this attribute to define what kind of relation should be created. If omitted, the default InsRel relation is used. Best practice is to always define the role, eg.: "related" or "posrel" etc.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>&lt;object /&gt; (see also: object)</para>
						<para>&lt;field /&gt; Default values of fields of a relation itself can be set also. Eg.: &lt;field name="pos"&gt;-1&lt;/field&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;action type="create" /&gt;</para>
						<para>&lt;object /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<action type="create">
		<relation role="posrel">
			<object type="paragraph" />
			<field name="pos">{sum(//relation[@role=&apos;posrel&apos; and @lastitem=&apos;true&apos;]/field[@name=&apos;pos&apos;])+{$pos}}</field>
		</relation>
</action>
				]]></programlisting>
				<para>TO DO: Trick with the counter should be documented.</para>
				<para>(See also: the &lt;action type="create" /&gt; example and the &lt;object /&gt; example.)</para>
				</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>field (general)</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;field /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Field nodes define what form-elements will be placed in the wizard. This fieldnodes in the xml are an important part of the wizard's definition. For detailed information on what fieldtypes need what kind of settings, see the other fielddefinitions in the reference. Note: the field nodes that can be placed inside a relation or object node have different syntax! (See also: &lt;object type="create" /&gt;)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>name="[fieldname]" fdatapath, ftype, dttype, dtrequired, dtminlength, dtmaxlength are automatically retrieved from mmbase. Overriding is always possible, however.</para>
						<para>or (advanced users:) fdatapath="[xpath]" and ftype="[fieldtype]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>ftype="[fieldtype]" (line|text|enum|date|int)</para>
						<para>dttype="[datatype]" (string|int|date|datetime|time|html)</para>
						<para>dtminlength="[minlength]"</para>
						<para>dtmaxlength="[maxlength]"</para>
						<para>dtrequired="[true|false]"</para>
						<para>rows="[rowcount]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>&lt;prompt /&gt; For every field, a prompt-text can be given. If defined, the prompt text will be visible in front of the field in the wizard.</para>
						<para>&lt;description /&gt; For every field, a description can be given. If defined, the description will be shown "onmouseover". If the user move the mouse over the field, the description will be shown in a hint.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;form-schema /&gt;</para>
						<para>&lt;item /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<form-schema id="step1">
	<title>Example form</title>
	<field name="title" dtminlength="1" ftype="line">
		<prompt>News Title</prompt>
		<description>You can enter the news-title here</description>
	</field>
</form-schema>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>field ftype="line"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;field ftype="line" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>A line-field will show a single-line inputfield in the wizard. Use them for simple text entry.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>dttype="string"</para>
						<para>dttype="int"</para>
						<para>dtminlength="[minlength]"</para>
						<para>dtmaxlength="[maxlength]"</para>
						<para>dtrequired="[true|false]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<field name="title" dtminlength="1">
	<prompt>Title</prompt>
</field>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>field ftype="int"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;field ftype="int" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this field for number editing</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>dtmin="[minvalue]"</para>
						<para>dtmax="[maxvalue]"</para>
						<para>dtrequired="[true|false]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<field name="score" dtmin="100" dtmax="5000" dtrequired="true"> <
	<prompt>Enter position</prompt>
	<description>Enter value between 100 and 5000 please.</description>
</field>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>field ftype="date"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;field ftype="date" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this field to edit date, date-time, or time fields.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>dtmin="[mindate]"</para>
						<para>dtmax="[mindate]"</para>
						<para>dttype="[date|datetime|time]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<field name="start" dttype="date">
	<prompt>Startdate</prompt>
</field>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>field ftype="upload"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;field ftype="upload" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this field to process uploads. Note: Make sure that you use this field in the right context: Usually, this field will store it's binary-value in a mmbase field named 'handle'. See the upload example for more info.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<wizard-schema>
	<title>Image Upload</title>
	<action type="create">
		<object type="images" />
	</action>
	<action type="load">
		<field name="title" />
		<field name="description" />
	</action>
	<form-schema id="step1">
		<title>Image upload</title>
		<field name="title">
			<prompt>Title</prompt>
		</field>
		<field name="description" ftype="text" rows="8">
			<prompt>Description</prompt>
		</field>
		<field name="handle" ftype="image" dttype="binary">
			<prompt>upload</prompt>
		</field>
	</form-schema>
</wizard-schema>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>field ftype="startwizard"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;field ftype="startwizard"&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this field to start one wizard, from inside another wizard.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>objectnumber="{object/@number}"</para>
						<para>wizardname="[ name of the wizard ]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>inline="[true|false]" an inline startwizard will replace the current wizard to create the new object and come back when ready, a not-inline startwizard will pop-up a window to create the new object .</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>None.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;item /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific">&lt;command name="startwizard" inline="false" wizardname="tasks/myurls" objectnumber="new"/> &lt;command name="startwizard" inline="true" wizardname="tasks/myurls" objectnumber="new"/></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>field ftype="data"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;field ftype="data" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this field to show values, but don't make it editable. In other words: use this to make a read-only field.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<field name="firstname" ftype="data">
 <prompt>Your firstname is:</prompt>
</field>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>field ftype="enum"</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;field ftype="enum" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this field to make a "dropdown" inputfield. (In HTML-terms: a selectbox).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>&lt;optionlist /&gt; Use this node to define the possible options for the field. (see also: optionlist)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>see field (general)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<field name="type" ftype="enum">
	<prompt>Articletype</prompt>
	<optionlist name="articletypes">
		<option id="1">News</option>
		<option id="2">Interview</option>
		<option id="3">Information</option>
	</optionlist>
</field>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>list</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;list destination="[buildername]" role="[rolename]" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this to show and edit relations and the related objects.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>destination="[buildername]"</para>
						<para>role="[rolename]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>minoccurs="[minimal required number of items in the list]"</para>
						<para>maxoccurs="[maximum number of items in the list]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>&lt;item /&gt; (see also: item)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>&lt;action type="create" /&gt; (see also: action)</para>
						<para>&lt;action type="insert" /&gt; (see also: action)</para>
						<para>&lt;command name="search" /&gt; (see also: command)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;form-schema /&gt;</para>
						<para>&lt;list /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific">&lt;list role="related" destination="images"> &lt;command name="search" nodepath="images" fields="title" age="-1"> &lt;/command> &lt;item> &lt;field name="title" ftype="image" /> &lt;/item> &lt;action type="create"> &lt;relation destinationtype="images" /> &lt;/action> &lt;/list></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>lists</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;lists /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this node to define optionlists in a wizard.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>None.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>&lt;optionlist /&gt; (see also:optionlist)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>See needed childnodes</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;wizard-schema /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<lists>
	<optionlist name="priorities">
		<option id="1">Low</option>
		<option id="2">High</option>
	</optionlist>
</lists>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>optionlist</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;optionlist /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this node to define an optionlist.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>name="[optionlistname]" This optional attribute can be used if an optionlist is defined in a &lt;lists /&gt; node. To reference to the defined optionlist, you will need the optionlistname. Eg.: &lt;optionlist select="earlier_defined_optionlist" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>&lt;option id="[optionid]"&gt;[optionvalue_to_be_shown_in_wizard]&lt;/option&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>See needed childnodes</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;wizard-schema /&gt;</para>
						<para>&lt;field ftype="enum" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<para>See the example for lists</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>command (name="search")</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;command name="search" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use this command inside a list node to define how a user can search for objects and add them to a list.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Attributes (general)</term>
					<listitem>
						<para>See for detailed information how to use nodepath, startnodes, fields, constraints, orderby the documentation of the MMBase taglib.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>name="search"</para>
						<para>nodepath="[buildername_to_start_with]"</para>
						<para>fields="[fieldnames of fields to show]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>startnodes="[objectnumber]"</para>
						<para>age="[default age to show in search-field]" use -1 to set it to "any age", use 1,7,31,365 for day, week, month, year ages.</para>
						<para>constraints="[mmbase where part]"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>&lt;prompt /&gt; Place the text to be shown in front of the searchfield here.</para>
						<para>&lt;search-filter /&gt; Defines what extra searchfields should be shown and used in the query. See also: search-filter.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;list /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<list destination="people" minoccurs="0" maxoccurs="*">
	<command name="search" nodepath="people" fields="firstname,lastname" orderby="lastname" age="-1">
		<prompt>#Search command prompt</prompt>
		<search-filter>
			<name>firstname contains</name>
			<search-fields>firstname</search-fields>
		</search-filter>
		<search-filter>
			<name>lastname contains</name>
			<search-fields>lastname</search-fields>
		</search-filter>
	</command>
	<item>
		<field name="firstname" >
			<prompt>Field prompt</prompt>
			<description>Field Description</description>
		</field>
	</item>
	<action type="create">
		<relation destinationtype="people" role="related" />
	</action>
</list>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>item</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;item /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Every list needs a way to present each occurrence in the list. These occurrences are named: "item". In an item you can place the same fields as inside a form-schema. So, usually one or more fields are placed in an item.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>&lt;field /&gt;</para>
						<para>or &lt;list /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>&lt;field /&gt;</para>
						<para>or &lt;list /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;list /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific">See the example for list</programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<title>search-filter</title>
				<varlistentry>
					<term>Syntax</term>
					<listitem>
						<para>&lt;search-filter /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Usage</term>
					<listitem>
						<para>Use the searchfilter to allow the user to fire a free-text query from the wizard. See the command name="search" example.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible attributes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Needed childnodes</term>
					<listitem>
						<para>&lt;name /&gt;</para>
						<para>&lt;search-fields /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible childnodes</term>
					<listitem>
						<para>None</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Possible parents</term>
					<listitem>
						<para>&lt;command name="search" /&gt;</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Example</term>
					<listitem>
						<programlisting format="linespecific"><![CDATA[
<search-filter>
	<name>Naam bevat</name>
	<search-fields>name</search-fields>
</search-filter>
						]]></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
	</section>
	<section id="configuration">
		<title>Configuration of the editwizards</title>
		<para>The editwizards can be configured in a number of ways: where you store the xml configuration files, how the stylesheets and the templates of the editwizards and the language of the prompts.</para>
		<section id="filelocation">
			<title>Location of files</title>
			<para>
				The editwizards xml files have to be in a subdirectory of the
				directory from where the list.jsp or wizard.jsp is referred
				(where the 'entrance page' is). The directory from which
				wizard.jsp and list.jsp are called is denoted the
				"referrer"-directory.
			</para>
			<para>
				To make sure the "referrer" directory can always be
				determined, it is a good idea to supply the 'calling file' it
				to the editwizard-jsp's as an argument (taglib example):
				<programlisting format="linespecific">
			<![CDATA[
<mm:import id="referrer"><%=new java.io.File(request.getServletPath())%></mm:import>
<mm:import id="jsps">/mmapps/editwizard/jsp/</mm:import>
<mm:import id="language">nl/</mm:import>
 ..
 ..

<a href="<mm:url referids="referrer,language" page="${jsps}list.jsp">
					 <mm:param name="wizard">tasks/people</mm:param>
					 <mm:param name="nodepath">people</mm:param>
					 <mm:param name="fields">number,firstname,lastname</mm:param>
					 <mm:param name="orderby">number</mm:param>
					 <mm:param name="directions">down</mm:param>
					 </mm:url>">Person test</a>

]]>
			</programlisting>
				Without this parameter the HTTP-request header 'Referer' will
				be consulted, but this header is for browsers only optional.
			</para>
		</section>
		<section id="layout">
			<title>Manipulating the editwizard layout</title>
			<para>
				The standard editwizard templates and stylesheets can be
				overridden to adjust them to your own needs and wishes. See
				the example below on what is possible.
			</para>
			<figure float="0">
				<title>3 VOOR 12 version of the editwizards</title>
				<screenshot>
					<graphic fileref="media/3v12_skin.jpg"/>
				</screenshot>
			</figure>
			<para>
				To override classes of the default stylesheet in
				"/mmapps/editwizard/style" place a file style.css in the
				"referrer"-directory and add any classes you wish to override
				to this file. This style sheet must be configured as
				'extrastyle' to the XSL Transformations. You do that by
				placing a file xsl/base.xsl in the "referrer"-directory with
				the following content:
				<programlisting format="linespecific">
			<![CDATA[
<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"  version="1.0">
	<xsl:import href="ew:xsl/base.xsl" /> <!-- extend from standard  editwizard xslt -->

	<xsl:template name="extrastyle">
		<link rel="stylesheet" type="text/css" href="{$referrerdir}style.css" ></link>
		<!-- the $referrerdir variable can be used to to construct the right path to the 'referrer' directory -->
	</xsl:template>

</xsl:stylesheet>
]]>
			</programlisting>
			</para>
			<para>
				So, this means that you can override any xsl templates in
				/mmapps/editwizard/data/xsl.  Create files like wizard.xsl,
				list.xsl and base.xsl and add the templates you wish to
				override in these files. Create a directory "xsl " in the
				"referrer"-directory and place your own *.xsl files in this
				directory.
			</para>
		</section>
		<section id="internationalisation">
			<title>Internationalisation</title>
			<para>
				The default (english) prompts of the editwizards are defined in
				/mmapps/editwizard/data/xsl/prompts.xsl. If the language is not english
				then the 'prompts.xsl' is first search for in the directory
				/mmapps/editwizard/data/i18n/&lt;language code&gt;/.
			</para>
			<para>
				The language is determined by the mmbaseroot.xml setting, but
				you can also specify it by supplying a "language" parameter to
				the editwizard jsp's, then your pages are independent of this
				setting.
			</para>
		</section>
	</section>
</article>

