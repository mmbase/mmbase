<!-- Include file for the editwizard reference docbook: 
     'list' tag
-->
<section id="list">
	<title>list</title>
	<formalpara>
		<title>Syntax</title>
		<para><programlisting><![CDATA[<list [role="{role}"] [destinationtype="{objecttype}"] [searchdir="source|destination|both|all|either"]
	[fdatapath="{xpath}"] [fparentdatapath="{xpath}"] 
	[ordertype="string|number"] [orderby="{xpath|fieldname}"]
	[minoccurs="{number}"] [maxoccurs="{number}"]
	[hidecommand="{commandlist}"] />]]></programlisting></para>
	</formalpara>
	<formalpara>
		<title>Usage</title>
		<para>A list displays a set of related nodes, and provides means to edit this list - either by adding items to or removing items from the list, or by editing items directly. Lists can be sorted, and various commands can be added to allow a search for new objects to add, subwizards to call, or new empty objects to be created and inserted in the list.</para>
	</formalpara>
	<para>Lists are similar to fields in that they select a certain element from the data document. In particular, List select relation nodes. The attributes of as list provide a filter with which the wizard selects relations, relative to the object that has focus (generally the main object). The filter can be set by specifying role of the relation or the destinationtype, but it is also possible to make a more complex filter, by providing an xpath using the fdatapath attribute.</para>
	<para>An example of using role/destinationtype is the following:
	<programlisting format="linespecific"><![CDATA[
<list role="posrel" destinationtype="news" >
	<item>
	  <field name="title" ftype="data" />
	</item>
</list>
]]></programlisting>
	Which selects all 'posrel' relations to 'news' objects (seen from the current object), and shows the related objects title field. The list only shows those relations loaded or created by the wizard using the action tags.</para>
	<para>You can also obtain the list noted above using the fdatapath attribute. In that case, you specify an xpath, relative from the current object, as follows:
	<programlisting format="linespecific"><![CDATA[
<list fdatapath="relation[@role='posrel' and object/@type='news']" >
	<item>
	  <field name="title" ftype="data" />
	</item>
</list>
]]></programlisting>
	See the section <link linkend="xpathexpressions">XPath Expressions and Wizard Variables</link> for more info on using xpaths.
	</para>
	<para>Displaying content is done by specifying an item tag inside the list. The item can contain field objects and other lists, with which you can display or edit the object's or the relation's fields.   
	</para>
	<note><para>While the list 'selects' relations (in the example, the posrel relation), the fields within the &lt;item&gt; tag assume that the object that is to be displayed or edited is the related object (in the example, the news item). See the <link linkend="title">&lt;item&gt;</link> tag for more info.</para></note>
	<formalpara>
		<title>Required Attributes</title>
		<para>None</para>
  </formalpara>
	<formalpara>
		<title>Optional Attributes</title>
		<para><variablelist>
			<varlistentry>
				<term>destinationtype</term>
				<listitem>
					<para>The destination type of a related object. This filter is combined with 'role' and 'searchdir' to select the objects to show in the list.</para>
					<note><para>In MMBase 1.6.3 or lower, this attribute is called 'destination'. While you can still use the 'destination' attribute in 1.6.4, you should consider using the 'destinationtype' attribute instead.</para></note>
					</listitem>
			</varlistentry>
			<varlistentry>
				<term>role</term>
				<listitem>
					<para>The role of the relation. This filter is used combined with 'destination' and 'searchdir' to select the objects to show in the list.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>searchdir</term>
				<listitem>
					<para>The direction to follow the relation in. You can specify the values 'source', 'destination', or 'both'. 
					'Source' and 'destination' in this context refer to the directionality of the relation. Each relation in mmbase has a 'source' (where the relation starts) and a 'destination' (where the relation ends). Most of the time this directionality is not of import. You can follow relations either way without worrying on directionality, and most of the time only one relation is possible between two object types (so specifying destinationtype is often enough). In some cases you may have more possible relations (say, when you relate objects of the same type, i.e. a pool hierarchy). If you want to narrow down the selection based on direction of the relation, you specify searchdir.</para>
					<para>					
					If you specify 'source', only those relations are returned where the 'current' object is the destination object (and the related objects are the 'source'). Specifying 'destination' only returns those relations are returned where the 'current' object is the source object. 'Both' returns all relations.</para>
					<para>This filter is used combined with 'role' and 'destination' to select the objects to show in the list.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>fdatapath</term>
				<listitem>
					<para>The xpath describing the relations whose objects to show in this list. Note that if you specify fdatapath, you cannot use destination, role, or searchdir.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>fparentdatapath</term>
				<listitem>
					<para>The xpath describing the parent object of the list. The value of this path is used when adding new relations (using the <link linkend="action_add">add</link> or <link linkend="action_create">create actions</link>), as the parent object of the list is the node new relations are added to.</para>
					<para>Normally, the parent of a list is automatically determined. In general, it will be the object that has focus when the list is created - i.e. the main wizard object for a normal list, or an object identified by an 'item' tag, when using a list-within-a-list. Generally you do not have to specify this attribute.</para>
					<para>However, if you specify a fdatapath attribute, it is possible to obtain a list of relations who are not the children of the focus object. In that case, if you want to be able to create new relations, you need to add the fparentdatapath to point out the parent object.</para>
					<para>For example, suppose you use an 'employee' object, that contains contract data. It is related to one 'people' object (containing person data), which is connected to several 'contact' objects, containing alternate email addresses. If you want to edit the emailaddresses directly from the 'employee' object, you can dot so as follows: 
						<programlisting format="linespecific"><![CDATA[
<list fdatapath="relation/object[@type='people']/relation[object/@type='email']" fparentdatapath="relation/object[@type='people']" >
	<item>
	  <field name="email" />
	</item>
	
	<command name="insert" />
	
	<action type="create">
	  <relation role="related">
		  <object type="email" />
		</relation>
	</action>
</list>
]]></programlisting>
					This tag selects all email objects related to the people object related to the main (employee) object. By specifying the fparentdatapath, we can now add new email address, and they will be added to the correct object (that is, to the people object, rather than the employee object).
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>orderby</term>
				<listitem>
					<para>The field on which to order the list. By default, a list is unordered, and newly added items are added at the end of the list. By specifying a field you can order the list as you wish. The value of orderby can either be a fieldname of the related node, or a xpath..
					</para>
					<para>For instance, using a fieldname:
						<programlisting format="linespecific"><![CDATA[
<list role="posrel" destinationtype="email" orderby="title" hidecommand="move-up|move-down" >
...
</list>
]]></programlisting>
						will sort the list on the title of the related email objects.
					</para>
					<para>If the ordering need be on another property, such as the field of a relation or the number of a node, you specify an xpath Take into account that the xpath is relative to the relation selected by the list (and not to the related node). For instance:
						<programlisting format="linespecific"><![CDATA[
<list role="posrel" destinationtype="email" ordertype="number" orderby="object/@number" hidecommand="move-up|move-down" >
...
</list>
]]></programlisting>
						will sort the list on the number of the related email objects, where as:
						<programlisting format="linespecific"><![CDATA[
<list role="posrel" destinationtype="email" ordertype="number" orderby="@number" hidecommand="move-up|move-down" >
...
</list>
]]></programlisting>
						will sort the list on the number of the relations (the posrel).
						</para>
						<para> Finally:
						<programlisting format="linespecific"><![CDATA[
<list role="posrel" destinationtype="email" ordertype="number" orderby="field[@name='pos']" >
...
</list>
]]></programlisting>
						will sort the list on the number of the relations (the posrel).
						</para>
						<para>When specifying a sort order, the wizard will automatically make up/down buttons that allow you to change the order of the objects in a list. The ordering is rather crude, as it merely switches the value of the 'orderby' field between objects. 
						As such, when you order a list on a  field you do not want to have changed (such as the title field of a newsitem or the number field, as in the examples above), you should disable these buttons using the hidecommand attribute.</para>
						<para>Also note that you if the order field is a numerical value, you will need to specify this using the ordertype attribute.</para> 
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>ordertype</term>
				<listitem>
					<para>The type of the orderby field. Possible values are <token>string</token> and <token>number</token>. This attribute determines whether sorting takes place on lexical or numerical value. I.e., with ordertype="string", the value '12' will come after '100'. With ordertype="number", the value '12' will come before '100'.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>minoccurs</term>
				<listitem>
					<para>The minimum number of objects that should be in this list. If the list contains less than the indicated number, the wizard will disable the save button. The default minimum is 0 (no) objects.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>maxoccurs</term>
				<listitem>
					<para>The maximum number of objects that are allowed in this list. If the list contains more than the indicated number, the wizard will disable the save button. This attribute can be a number or the character '*' (infinite). The default maximum is infinite.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>hidecommand</term>
				<listitem>
					<para>A list of commands that should NOT be made available in the list. The attributes contains the command names, separated by a '|' character. The commands that can be turned off are <token>move-up</token>, <token>move-down</token>, <token>delete-item</token>, and <token>add-item</token>. By default, all commands are active when appropriate.</para>
					<note><para>The command can be used to turn off the move-up/move-down buttons when you want to sort the list using a fixed field.</para></note>
				</listitem>
			</varlistentry>
		</variablelist></para>
  </formalpara>
  <formalpara>
		<title>Required Child Nodes</title>
		<para>None</para>
	</formalpara>
	<formalpara>
		<title>Optional Child Nodes</title>
		<para><variablelist>
				<varlistentry>
					<term><link linkend="title">&lt;title /&gt;</link></term>
					<listitem>
						<para>The title of a list, often displayed as a caption or prompt</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><link linkend="description">description</link></term>
					<listitem>
						<para>The description of a list, often shown as a help text in for instance a roll-over text</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><link linkend="action">action</link></term>
					<listitem>
						<para>Defines how to manipulate a list when creating or deleting list items. Possible actions are <link linkend="action-add">add</link> (add an existing object to the list) <link linkend="action-create">create</link> (create a new object and add it), and <link linkend="action-delete">delete</link> (delete an object)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><link linkend="command">command</link></term>
					<listitem>
						<para>Defines ways to manipulate (add data) to the list. Possible commands are <link linkend="command-search">search</link> (search for an object to include in the list), <link linkend="command-insert">insert</link> (create a new empty object and add it to the list), and <link linkend="command-startwizard">startwizard</link> (call a subwizard to create a new object to add to the list).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><link linkend="item">item</link></term>
					<listitem>
						<para>Item determines how a show a related object. It is similar to a <link linkend="item">form-schema</link>, in that it can contain fields and lists.</para>
					</listitem>
				</varlistentry>
			</variablelist></para>
	</formalpara>
	<formalpara>
		<title>Possible Parents</title>
		<para><variablelist>
				<varlistentry>
					<term><link linkend="form-schema">&lt;wizard-schema&gt;</link></term>
					<listitem>
						<para>A representation of a form in the wizard.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><link linkend="item">item</link></term>
					<listitem>
						<para>An item in a (higher) list.</para>
					</listitem>
				</varlistentry>
			</variablelist></para>
	</formalpara>
	<formalpara>
		<title>Example</title>
		<para><programlisting format="linespecific"><![CDATA[
<list role="related" destination="categories" orderby="name" hidecommand="move-up|move-down">

	<title>Category</title>
	<item>
		<field name="name" ftype="data" />
		<field name="description" ftype="data" />
	 </item>
	
	<command name="search" nodepath="categories" fields="name,description" orderby="name" age="-1" >
		<search-filter>
			<name>Name contains</name>
			<search-fields>name</search-fields>
		</search-filter>
	</command>
		
	<action type="create">
		<relation role="related" destinationtype="categories" />
	</action>
      
</list>	]]></programlisting></para>
	</formalpara>
</section>
