<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns:j="jelly:core"
         xmlns:util="jelly:util"
         xmlns:ant="jelly:ant"
         xmlns:doc="doc"
         xmlns:define="jelly:define"
         xmlns:maven="jelly:maven"
         xmlns:artifact="artifact">

  <!--==================================================================-->
  <!-- Default goal : Builds a war file                                 -->
  <!--==================================================================-->    
  <goal name="mmbase-module" prereqs="mmbase-module:mmbase-module" 
  	description="delegates to mmbase-module:mmbase-module"/>

  <!--==================================================================-->
  <!-- Initializations                                                  -->
  <!--==================================================================-->    
  <goal name="mmbase-module:init"
    description="initialises mmbase-module vars"
    prereqs="war:init">

    <ant:available property="configSourcesPresent" type="dir"
      file="${maven.mmbasemodule.config}"/>

    <ant:available property="templatesSourcesPresent" type="dir"
      file="${maven.mmbasemodule.templates}"/>

    <ant:available property="examplesSourcesPresent" type="dir"
      file="${maven.mmbasemodule.examples}"/>

    <ant:available property="blocksSourcesPresent" type="dir"
      file="${maven.mmbasemodule.blocks}"/>
      
      <ant:available property="tagfilesSourcesPresent" type="dir"
      file="${maven.mmbasemodule.tagfiles}"/>
      
      <ant:available property="webinfSourcesPresent" type="dir"
      file="${maven.mmbasemodule.webinf}"/>
 
    <ant:echo message="mmbase module: ${maven.mmbasemodule.final.name}"/>
  </goal>

  <!--==================================================================-->
  <!-- Builds a war file                                                -->
  <!--==================================================================-->    
  <goal name="mmbase-module:mmbase-module" prereqs="mmbase-module:webapp" description="builds a .mmbase-module file">
    
    <ant:echo>Building mmbase-module artifact for ${pom.artifactId}</ant:echo>

    <!-- build dependency list -->
    <j:set var="maven.mmbasemodule.classpath" value=""/>
    <j:forEach var="dep" items="${pom.dependencies}">
      <j:if test="${dep.getProperty('war.manifest.classpath')=='true'}">
        <j:set var="maven.mmbasemodule.classpath" value="${maven.mmbasemodule.classpath} ${dep.artifact}"/>
      </j:if>
    </j:forEach>

    <ant:touch>
      <ant:fileset dir="${maven.mmbasemodule.webapp.dir}"/>
    </ant:touch>

    <ant:mkdir dir="${maven.mmbasemodule.build.dir}" />
    <ant:jar 
         destfile="${maven.mmbasemodule.build.dir}/${maven.mmbasemodule.final.name}.mmbase-module"
         basedir="${maven.mmbasemodule.webapp.dir}"
         update="true"
         index="${maven.mmbasemodule.index}">
      <ant:metainf dir="${licenseFile.canonicalFile.parent}">
        <ant:include name="${licenseFile.canonicalFile.name}"/>
      </ant:metainf>

      <ant:manifest>
        <j:set var="classPath" value="${maven.mmbasemodule.classpath}"/>
        <j:if test="${!empty(classPath)}">
          <ant:attribute name="Class-Path" value="${maven.mmbasemodule.classpath}"/>
        </j:if>

        <ant:attribute name="Built-By" value="${user.name}" />
        <ant:section name="${pom.package}">
          <ant:attribute name="Specification-Title" value="${pom.artifactId}" />
          <ant:attribute name="Specification-Version"
                     value="${pom.currentVersion}" />
          <ant:attribute name="Specification-Vendor"
                     value="${pom.organization.name}" />
          <ant:attribute name="Implementation-Title"
                     value="${pom.package}" />
          <ant:attribute name="Implementation-Version"
                     value="${pom.currentVersion}" />
          <ant:attribute name="Implementation-Vendor"
                     value="${pom.organization.name}" />
        </ant:section>
      </ant:manifest>

    </ant:jar>

  </goal>

  <!--==================================================================-->
  <!-- Builds an expanded webapp                                        -->
  <!--==================================================================-->    
  <goal name="mmbase-module:webapp" prereqs="mmbase-module:init,jar:jar" 
    description="builds a mmbase module in expanded directory format">

    <ant:echo>Assembling webapp for ${pom.artifactId}</ant:echo>
    <ant:mkdir dir="${maven.mmbasemodule.webapp.dir}"/>

    <j:set var="webapp.build.lib" value="${maven.mmbasemodule.webapp.dir}/lib"/>
    <ant:mkdir dir="${webapp.build.lib}"/>

    <j:set var="webapp.build.config" value="${maven.mmbasemodule.webapp.dir}/${maven.mmbasemodule.config.dir}"/>
    <j:set var="webapp.build.templates" value="${maven.mmbasemodule.webapp.dir}/${maven.mmbasemodule.templates.dir}"/>
    <j:set var="webapp.build.examples" value="${maven.mmbasemodule.webapp.dir}/${maven.mmbasemodule.examples.dir}"/>
    <j:set var="webapp.build.blocks" value="${maven.mmbasemodule.webapp.dir}/${maven.mmbasemodule.blocks.dir}"/>
    <j:set var="webapp.build.webinf" value="${maven.mmbasemodule.webapp.dir}/${maven.mmbasemodule.webinf.dir}"/>
    <j:set var="webapp.build.tagfiles" value="${maven.mmbasemodule.webapp.dir}/${maven.mmbasemodule.tagfiles.dir}"/>
    
    <ant:echo>webapp.build.tagfiles = ${webapp.build.tagfiles}</ant:echo>
    <ant:echo >webapp.build.webinf = ${webapp.build.webinf}</ant:echo>

    <j:if test="${templatesSourcesPresent == 'true'}">
      <ant:mkdir dir="${webapp.build.templates}"/>
      <ant:copy todir="${webapp.build.templates}" preservelastmodified="true">
        <ant:fileset dir="${maven.mmbasemodule.templates}"
          includes="${maven.mmbasemodule.templates.includes}"
          excludes="${maven.mmbasemodule.templates.excludes}">
        </ant:fileset>
      </ant:copy>
    </j:if>
    

    <j:if test="${examplesSourcesPresent == 'true'}">
      <ant:mkdir dir="${webapp.build.examples}"/>
      <ant:copy todir="${webapp.build.examples}" preservelastmodified="true">
        <ant:fileset dir="${maven.mmbasemodule.examples}"
          includes="${maven.mmbasemodule.examples.includes}"
          excludes="${maven.mmbasemodule.examples.excludes}">
        </ant:fileset>
      </ant:copy>
    </j:if>

    <j:if test="${blocksSourcesPresent == 'true'}">
      <ant:mkdir dir="${webapp.build.blocks}"/>
      <ant:copy todir="${webapp.build.blocks}" preservelastmodified="true">
        <ant:fileset dir="${maven.mmbasemodule.blocks}"
          includes="${maven.mmbasemodule.blocks.includes}"
          excludes="${maven.mmbasemodule.blocks.excludes}">
        </ant:fileset>
      </ant:copy>
    </j:if>

    <j:if test="${configSourcesPresent == 'true'}">
      <ant:mkdir dir="${webapp.build.config}"/>
      <ant:copy todir="${webapp.build.config}" preservelastmodified="true">
        <ant:fileset dir="${maven.mmbasemodule.config}"
          includes="${maven.mmbasemodule.config.includes}"
          excludes="${maven.mmbasemodule.config.excludes}">
        </ant:fileset>
      </ant:copy>
    </j:if>
    
    <j:if test="${webinfSourcesPresent == 'true'}">
      <ant:mkdir dir="${webapp.build.webinf}"/>
      <ant:copy todir="${webapp.build.webinf}" preservelastmodified="true">
        <ant:fileset dir="${maven.mmbasemodule.webinf}"
          includes="${maven.mmbasemodule.webinf.includes}"
          excludes="${maven.mmbasemodule.webinf.excludes}">
        </ant:fileset>
      </ant:copy>
    </j:if>
    
    <j:if test="${tagfilesSourcesPresent == 'true'}">
      <ant:mkdir dir="${webapp.build.tagfiles}"/>
      <ant:copy todir="${webapp.build.tagfiles}" preservelastmodified="true">
        <ant:fileset dir="${maven.mmbasemodule.tagfiles}"
          includes="${maven.mmbasemodule.tagfiles.includes}"
          excludes="${maven.mmbasemodule.tagfiles.excludes}">
        </ant:fileset>
      </ant:copy>
    </j:if>    

  <!-- What to do with dependencies? -->
    
    <j:forEach var="lib" items="${pom.artifacts}">
      <j:set var="dep" value="${lib.dependency}"/>
      <j:if test="${dep.getProperty('mmbase.bundle')=='true'}">
          
         <j:if test="${dep.type =='jar'}">
            <ant:echo message="including jar: ${dep.artifactId}"/>
           <ant:copy todir="${webapp.build.lib}" file="${lib.path}"/>  
         </j:if>
         
         <j:if test="${dep.type =='tld'}"> 
           <ant:copy todir="${webapp.build.tlds}" file="${lib.path}"/>  
         </j:if> 
      </j:if>

      <j:set var="targetPath" value="${dep.getProperty('mmbase.target.path')}"/> 
      <j:if test="${!empty(targetPath)}">
        <ant:copy todir="${maven.mmbasemodule.webapp.dir}/${targetPath}" file="${lib.path}"/>
      </j:if>
    </j:forEach>

    <util:available file="${maven.build.dir}/${maven.final.name}.jar">
      <ant:copy file="${maven.build.dir}/${maven.final.name}.jar" todir="${webapp.build.lib}"/>
    </util:available>
  </goal>

  <goal name="mmbase-module:obtain-modules" description="obtain and unzip any dependency modules for a web-app">
    <maven:get var="rootWebappDir" plugin="maven-war-plugin"
               property="maven.war.webapp.dir"/>
    
    <ant:echo>Assembling webapp for ${pom.artifactId}</ant:echo>
    
    <j:set var="build.temp.templates" value="${maven.mmbasemodule.build.dir}/temp/templates"/>
    <ant:mkdir dir="${build.temp.templates}"/>
    <j:set var="build.temp.examples" value="${maven.mmbasemodule.build.dir}/temp/examples"/>
    <ant:mkdir dir="${build.temp.examples}"/>
    <j:set var="build.temp.config" value="${maven.mmbasemodule.build.dir}/temp/config"/>
    <ant:mkdir dir="${build.temp.config}"/>
    <j:set var="build.temp.blocks" value="${maven.mmbasemodule.build.dir}/temp/blocks"/>
    <ant:mkdir dir="${build.temp.blocks}"/>
    <j:set var="build.temp.tagfiles" value="${maven.mmbasemodule.build.dir}/temp/tagfiles"/>
    <ant:mkdir dir="${build.temp.tagfiles}"/>
    <j:set var="build.temp.webinf" value="${maven.mmbasemodule.build.dir}/temp/WEB-INF"/>
    <ant:mkdir dir="${build.temp.webinf}"/>

    <j:set var="build.temp.webapp.dir" value="${maven.mmbasemodule.build.dir}/temp/webapp"/>
    <ant:mkdir dir="${build.temp.webapp.dir}"/>
    
    <!--
      Iterate over all the dependencies in the pom, and pick out the ones that are of type 'mmbase-module'
    -->
    <j:forEach var="lib" items="${pom.artifacts}">
      <j:set var="dep" value="${lib.dependency}"/>     
      <j:if test="${dep.type == 'mmbase-module'}">
        <!--what is this for?-->
        <j:choose>
          <j:when test="${dep.groupId != 'mmbase' and dep.artifactId != 'mmbase'}">
            <j:set var="overwriteSources" value="true"/>
          </j:when>
          <j:otherwise>
            <j:set var="overwriteSources" value="false"/>
          </j:otherwise>
        </j:choose>
        
        <!--
          Add the templates  if not specifically blocked with property 'mmbase.templates.bundle'
        -->
        <j:if test="${dep.getProperty('mmbase.templates.bundle')!='false'}">
          <j:set var="templatesPath" value="${dep.getProperty('mmbase.templates.path')}"/> 
          <ant:unjar src="${lib.path}" dest="${build.temp.templates}">
            <patternset>
              <include name="${maven.mmbasemodule.templates.dir}/**"/>
            </patternset>
          </ant:unjar>
          
          <util:available file="${build.temp.templates}/${maven.mmbasemodule.templates.dir}">
            <ant:move todir="${build.temp.webapp.dir}/${templatesPath}" 
                      overwrite="${overwriteSources}" preservelastmodified="true" includeEmptyDirs="no">
              <ant:fileset dir="${build.temp.templates}/${maven.mmbasemodule.templates.dir}"/>
            </ant:move>
          
            <ant:delete dir="${build.temp.templates}/${maven.mmbasemodule.templates.dir}" />
          </util:available>
        </j:if>
    
        <!--
          Add the examples: only  if the property 'mmbase.examples.bundle' is set to 'true' 
        -->
        <j:if test="${dep.getProperty('mmbase.examples.bundle')=='true'}">
          <j:set var="examplesPath" value="${dep.getProperty('mmbase.examples.path')}"/> 
          <ant:unjar src="${lib.path}" dest="${build.temp.examples}">
            <patternset>
              <include name="${maven.mmbasemodule.examples.dir}/**"/>
            </patternset>
          </ant:unjar>
          
          <util:available file="${build.temp.examples}/${maven.mmbasemodule.examples.dir}">
            <ant:move todir="${build.temp.webapp.dir}/${examplesPath}" 
                      overwrite="${overwriteSources}" preservelastmodified="true" includeEmptyDirs="no">
              <ant:fileset dir="${build.temp.examples}/${maven.mmbasemodule.examples.dir}"/>
            </ant:move>  
            <ant:delete dir="${build.temp.examples}/${maven.mmbasemodule.examples.dir}" />
          </util:available>
        </j:if>
        
        <!--
          Add the tagfiles: only  if the property 'mmbase.tagfiles.bundle' is set to 'true' 
        -->
        <j:if test="${dep.getProperty('mmbase.tagfiles.bundle')!='false'}">
          <j:set var="tagfilesPath" value="${maven.mmbasemodule.webapp.dir}/WEB-INF/tagfiles/${dep.artifactId.substring(7)}"/> 
          <ant:unjar src="${lib.path}" dest="${build.temp.tagfiles}">
            <patternset>
              <include name="${maven.mmbasemodule.tagfiles.dir}/*"/>
            </patternset>
          </ant:unjar>
          
          <util:available file="${build.temp.tagfiles}/${maven.mmbasemodule.tagfiles.dir}">
            <ant:move todir="${tagfilesPath}" 
                      overwrite="${overwriteSources}" preservelastmodified="true" includeEmptyDirs="no">
              <ant:fileset dir="${build.temp.tagfiles}/${maven.mmbasemodule.tagfiles.dir}"/>
            </ant:move>  
            <ant:delete dir="${build.temp.tagfiles}/${maven.mmbasemodule.tagfiles.dir}" />
          </util:available>
        </j:if>


  <!--
          Add the WEB-INF content: only  if the property 'mmbase.webinf.bundle' is set to 'true' 
        -->
        <j:if test="${dep.getProperty('mmbase.webinf.bundle')!='false'}">
          <j:set var="webinfPath" value="${maven.mmbasemodule.webapp.dir}/WEB-INF"/> 
          <ant:unjar src="${lib.path}" dest="${build.temp.webinf}">
            <patternset>
              <include name="${maven.mmbasemodule.webinf.dir}/*"/>
            </patternset>
          </ant:unjar>
          
          <util:available file="${build.temp.webinf}/${maven.mmbasemodule.webinf.dir}">
            <ant:move todir="${webinfPath}" 
                      overwrite="${overwriteSources}" preservelastmodified="true" includeEmptyDirs="no">
              <ant:fileset dir="${build.temp.webinf}/${maven.mmbasemodule.webinf.dir}"/>
            </ant:move>  
            <ant:delete dir="${build.temp.webinf}/${maven.mmbasemodule.webinf.dir}" />
          </util:available>
        </j:if>        
        
        

        <!--
          Add the blocks if not specifically blocked with property 'mmbase.blocks.bundle'
        -->
        <j:if test="${dep.getProperty('mmbase.blocks.bundle')!='false'}">
          <j:choose>
            <j:when test="${dep.getProperty('mmbase.blocks.path') and dep.getProperty('mmbase.blocks.path') != ''}">
              <j:set var="blocksPath" value="${dep.getProperty('mmbase.blocks.path')}"/> 
            </j:when>
            <j:otherwise>
              <j:choose>
                <j:when test="${dep.artifactId.startsWith('mmbase-')}">
                  <j:set var="blocksPath" value="${maven.mmbasemodule.blocks.path}/${dep.artifactId.substring(7)}"/>
                </j:when>
                <j:otherwise>
                  <j:set var="blocksPath" value="${maven.mmbasemodule.blocks.path}/${dep.artifactId}"/>
                </j:otherwise>
              </j:choose>
            </j:otherwise>
          </j:choose>
          
          <ant:unjar src="${lib.path}" dest="${build.temp.blocks}">
            <patternset>
              <include name="${maven.mmbasemodule.blocks.dir}/**"/>
            </patternset>
          </ant:unjar>
          
          <util:available file="${build.temp.blocks}/${maven.mmbasemodule.blocks.dir}">
            <ant:move todir="${build.temp.webapp.dir}/${blocksPath}" 
                      overwrite="${overwriteSources}" preservelastmodified="true" includeEmptyDirs="no">
              <ant:fileset dir="${build.temp.blocks}/${maven.mmbasemodule.blocks.dir}"/>
            </ant:move>
            <ant:delete dir="${build.temp.blocks}/${maven.mmbasemodule.blocks.dir}" />  
          </util:available>
        </j:if>


        <!--
          Add the configuration. Only if 'mmbase.config.bundle' is set to true.
        -->
        <j:if test="${dep.getProperty('mmbase.config.bundle')=='true'}">
          <ant:unjar src="${lib.path}" dest="${build.temp.config}">
            <patternset>
              <include name="${maven.mmbasemodule.config.dir}/**"/>
            </patternset>
          </ant:unjar>
          
          <!-- merge some config files? -->
          <util:available file="${build.temp.config}/${maven.mmbasemodule.config.dir}">
            <ant:move todir="${build.temp.webapp.dir}/WEB-INF/config" 
                      overwrite="${overwriteSources}" preservelastmodified="true" includeEmptyDirs="no">
              <ant:fileset dir="${build.temp.config}/${maven.mmbasemodule.config.dir}"/>
            </ant:move>
            <ant:delete dir="${build.temp.config}/${maven.mmbasemodule.config.dir}" />
          </util:available>
        </j:if>

        <ant:unjar src="${lib.path}" dest="${maven.mmbasemodule.webapp.dir}/WEB-INF">
          <patternset>
            <include name="lib/**"/>
          </patternset>
        </ant:unjar>
        <!-- lib include of 1.2- plugin version artifacts -->
        <ant:unjar src="${lib.path}" dest="${maven.mmbasemodule.webapp.dir}">
          <patternset>
            <include name="WEB-INF/lib/**"/>
          </patternset>
        </ant:unjar>
      </j:if>  
    </j:forEach>

    <ant:touch>
      <ant:fileset dir="${maven.mmbasemodule.webapp.dir}"/>
    </ant:touch>

    <util:available file="${build.temp.webapp.dir}">
      <ant:move todir="${maven.mmbasemodule.webapp.dir}" overwrite="false" includeEmptyDirs="no">
        <ant:fileset dir="${build.temp.webapp.dir}"/>
      </ant:move>
    </util:available>

    <ant:echo>We're not deleting the temp dirs!!</ant:echo>
    <ant:delete dir="${build.temp.blocks}" />
    <ant:delete dir="${build.temp.templates}" />
    <ant:delete dir="${build.temp.examples}" />
    <ant:delete dir="${build.temp.config}" />
    <ant:delete dir="${build.temp.webinf}" />
    <ant:delete dir="${build.temp.tagfiles}" />
    <ant:delete dir="${build.temp.webapp.dir}" />
    <util:available file="${maven.build.dir}/${maven.final.name}.jar">
      <ant:copy file="${maven.build.dir}/${maven.final.name}.jar" todir="${webapp.build.lib}"/>
    </util:available>
  </goal>

  <goal name="mmbase-module:install-builders">
    <util:available file="${maven.war.webapp.dir}/WEB-INF/lib">
      <fileScanner var="libScanner">
        <fileset dir="${maven.war.webapp.dir}/WEB-INF/lib" />
      </fileScanner>
      <j:forEach var="library" items="${libScanner.iterator()}">
        <ant:unjar src="${library}" dest="${maven.war.webapp.dir}/WEB-INF/classes">
          <patternset>
            <include name="org/mmbase/config/applications/**/builders/**" />
          </patternset>
        </ant:unjar>
      </j:forEach>
    </util:available>

    <util:available file="${maven.war.webapp.dir}/WEB-INF/classes/org/mmbase/config/applications">
      <fileScanner var="scanner">
        <fileset dir="${maven.war.webapp.dir}/WEB-INF/classes/org/mmbase/config/applications" />
      </fileScanner>
      <j:forEach var="dir" items="${scanner.directories()}">
        <j:if test="${dir.path.endsWith('builders')}">
          <ant:copy todir="${maven.war.webapp.dir}/WEB-INF/classes/org/mmbase/config/builders/applications">
            <ant:fileset dir="${dir.path}" />
          </ant:copy>
        </j:if>
      </j:forEach>
    </util:available>

    <util:available file="${maven.war.webapp.dir}/WEB-INF/classes/org/mmbase/config">
      <fileScanner var="scanner">
        <fileset dir="${maven.war.webapp.dir}/WEB-INF/classes/org/mmbase/config"/>
      </fileScanner>
      <j:forEach var="dir" items="${scanner.directories()}">
        <fileScanner var="filescan">
          <fileset dir="${dir.path}" >
            <exclude name="INDEX"/>
            <include name="*"/>
          </fileset>
        </fileScanner>
<!-- ## Generate INDEX file with each filename and directory on a new line ## -->
<echo file="${dir.path}/INDEX"><j:forEach var="file" items="${filescan.iterator()}">${file.name}
</j:forEach><j:forEach var="filedir" items="${filescan.directories()}">${filedir.name}/
</j:forEach></echo>
      </j:forEach>
    </util:available>

    <util:available file="${maven.war.webapp.dir}/WEB-INF/config/applications">
      <fileScanner var="scanner">
        <fileset dir="${maven.war.webapp.dir}/WEB-INF/config/applications" />
      </fileScanner>
      <j:forEach var="dir" items="${scanner.directories()}">
        <j:if test="${dir.path.endsWith('builders')}">
          <ant:copy todir="${maven.war.webapp.dir}/WEB-INF/config/builders/applications">
            <ant:fileset dir="${dir.path}" />
          </ant:copy>
        </j:if>
      </j:forEach>
    </util:available>
  </goal>

  <!--==================================================================-->
  <!-- Install the mmbase-module in the local repository                          -->
  <!--==================================================================-->    
  <goal name="mmbase-module:install"
        prereqs="mmbase-module:mmbase-module"
        description="Install the mmbase-module in the local repository">
     
     <artifact:install
        artifact="${maven.mmbasemodule.build.dir}/${maven.mmbasemodule.final.name}.jar"
        type="jar"
        project="${pom}"/> 
     <artifact:install
        artifact="${maven.mmbasemodule.build.dir}/${maven.mmbasemodule.final.name}.mmbase-module"
        type="mmbase-module"
        project="${pom}"/> 
  </goal>

  <!--==================================================================-->
  <!-- Install the snapshot mmbase-module to the local repository       -->
  <!--==================================================================-->      
  <goal name="mmbase-module:install-snapshot"
        prereqs="mmbase-module:mmbase-module" 
        description="Install the snapshot mmbase-module to local repository">

      <artifact:install-snapshot
        artifact="${maven.mmbasemodule.build.dir}/${maven.mmbasemodule.final.name}.jar"
        type="jar"
        project="${pom}"/>
      <artifact:install-snapshot
        artifact="${maven.mmbasemodule.build.dir}/${maven.mmbasemodule.final.name}.mmbase-module"
        type="mmbase-module"
        project="${pom}"/>
  </goal>

  <!--==================================================================-->
  <!-- Deploys the mmbase-module to the remote repository               -->
  <!--==================================================================-->      
  <goal name="mmbase-module:deploy" 
        prereqs="mmbase-module:mmbase-module" 
        description="Deploys the mmbase-module to the remote repository">

     <artifact:deploy
        artifact="${maven.mmbasemodule.build.dir}/${maven.mmbasemodule.final.name}.jar"
        type="jar"
        project="${pom}"/>   
     <artifact:deploy
        artifact="${maven.mmbasemodule.build.dir}/${maven.mmbasemodule.final.name}.mmbase-module"
        type="mmbase-module"
        project="${pom}"/>   
  </goal>      
        
  <!--==================================================================-->
  <!-- Deploys the snapshot mmbase-module to the remote repository      -->
  <!--==================================================================-->      
  <goal name="mmbase-module:deploy-snapshot" 
        prereqs="mmbase-module:mmbase-module"
        description="Deploys the snapshot mmbase-module to the remote repository">  

     <artifact:deploy-snapshot
        artifact="${maven.mmbasemodule.build.dir}/${maven.mmbasemodule.final.name}.jar"
        type="jar"
        project="${pom}"/>     
     <artifact:deploy-snapshot
        artifact="${maven.mmbasemodule.build.dir}/${maven.mmbasemodule.final.name}.mmbase-module"
        type="mmbase-module"
        project="${pom}"/>     
  </goal>

  <!--==================================================================-->
  <!-- Clean                                                            -->
  <!--==================================================================-->  
  <goal name="mmbase-module:clean"
        prereqs="war:init"
        description="Remove all artifacts created by war plugin">  

      <j:if test="${context.getVariable('maven.mmbasemodule.webapp.dir') != context.getVariable('maven.mmbasemodule.src')}">
        <ant:delete dir="${maven.mmbasemodule.webapp.dir}"/>
      </j:if>
      <ant:delete file="${maven.mmbasemodule.build.dir}/${maven.mmbasemodule.final.name}" quiet="true" failonerror="false"/>
  </goal>

  <goal name="mmbase-module:report" description="generates the installation documentation">
      <mkdir dir="${maven.build.dir}/generated-xdocs"/>
      <copy todir="${maven.build.dir}/generated-xdocs" file="${plugin.resources}/ModuleInstallation.xml">
          <filterset>
            <filter token="pom.artifactId" value="${pom.artifactId}"/>
            <filter token="pom.name" value="${pom.name}"/>
            <filter token="mmbasemodule.repo" value="${maven.mmbasemodule.repo}"/>
            <filter token="pom.groupId" value="${pom.groupId}"/>
            <filter token="pom.currentVersion" value="${pom.currentVersion}"/>
           </filterset>
      </copy>
  </goal>

  <goal name="maven-mmbase-module-plugin:register"
        description="site documentation bundle callback registration" >
  
    <doc:registerReport 
      name="mmbase-module installation" 
      pluginName="mmbase-module"
      link="ModuleInstallation"
      description="mmbase-module installation instructions"/>
  </goal>

  <goal name="maven-mmbase-module-plugin:deregister">
    <doc:deregisterReport name="mmbase-module installation"/>
  </goal>

</project>