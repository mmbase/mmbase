<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article class="specification">
  <articleinfo>
    <title>MMBase Editwizard Reference Manual</title>

    <date>2002-09-02</date>

    <edition>$Id: editwizard-reference.xml,v 1.9 2007/05/31 16:34:23 michiel
    Exp $</edition>

    <authorgroup>
      <author>
        <firstname>Kars</firstname>

        <surname>Veling</surname>

        <affiliation>
          <orgname>Q42</orgname>
        </affiliation>
      </author>

      <author>
        <firstname>Henk</firstname>

        <surname>Hangyi</surname>

        <affiliation>
          <orgname>MMatch</orgname>
        </affiliation>
      </author>

      <author>
        <firstname>Pierre</firstname>

        <surname>van Rooden</surname>

        <affiliation>
          <orgname>Publieke Omroep</orgname>
        </affiliation>
      </author>
    </authorgroup>

    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified
      is a certification mark of the Open Source Initiative.</para>

      <para>The license (Mozilla version 1.0) can be read at the MMBase site.
      See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>

    <releaseinfo>Version 1.0 is released with MMBase 1.6.</releaseinfo>
  </articleinfo>

  <section id="introduction">
    <title>Introduction</title>

    <para>This reference describes the syntax of the wizards and how to access
    them using a browser.</para>
  </section>

  <section id="calling">
    <title>Calling the Wizard Pages</title>

    <para>This reference describes the wizard pages and how to call them from
    a html or jsp page.</para>

    <section id="calling_general">
      <title>General - wizard definition schemas</title>

      <para>The editwizards need a xml file with a definition of the wizard to
      operate. By default, those are found in the subdirectory
      /editwizard/data/, but it is possible to place your definitions, as well
      as the wizard stylesheets (which define layout) elsewhere.</para>

      <para>When the wizards search for a requested file (a wizard xsl
      stylesheet or a wizard xml schema), they look for the referenced file in
      the following order:</para>

      <variablelist>
        <varlistentry>
          <term>The referrer page directory</term>

          <listitem>
            <para>You call the editwizard scripts (list.jsp and wizard.jsp)
            from a page located in another directory than the editwizard home
            directory. If you do, the wizards keep a reference to the calling
            page, the 'referrer'. When a xml or xsl file is requested, the
            wizard first checks whether the file can be found in the directory
            of the referrer page.</para>

            <para>Example: if the file requested is data/my_wizard.xml, and
            the referencing page is /myeditors/index.jsp, the system first
            checks for the file /myeditors/data/my_wizard.xml.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>The editwizard home directory</term>

          <listitem>
            <para>The editwizard home is the directory that contains the
            editwizard basic stylesheets, data library, and jsp pages. It is
            one directory lower than the location of the list.jsp and
            wizard.jsp files. In the standard distribution, this location is
            /mmapps/editwizard/ (the list.jsp and wizard.jsp are located in
            /mmapps/editwizard/jsp/), but you can place the wizards wherever
            you like.</para>

            <para>Example: if the file requested is data/my_wizard.xml, and
            the editwizard home is in mmapps/editwizard/, the system checks
            for the file /mmapps/editwizard/data/my_wizard.xml.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="list.jsp">
      <title>list.jsp</title>

      <para>To run a wizard, you'll need to call either list.jsp or
      wizard.jsp. These scripts are located in the jsp subdirectory of the
      editwizard home directory. In the standard distribution, this is
      mmapps/editwizard/jsp/.</para>

      <para>List.jsp starts with running a search query on MMBase to create a
      list of items to search from. It shows a list of all found nodes and
      allows you to select one of these items to edit, to remove an item, or
      to add a new item. The actual options given depend on the security
      settings (if you are allowed to do this by MMBase), and the
      possibilities offered by the wizard. Note that the list.jsp does NOT run
      an editwizard itself, it is just a 'starter'. It eventually calls
      wizard.jsp (see below) to actually edit or create an item.</para>

      <para>You need to specify a number of parameters to tell the list.jsp
      what wizard should be used, and what nodes and fields should be shown in
      the list.</para>

      <para>In addition, by specifying the searchfields parameter, you can let
      the wizards generate a searchbox, allowing you to narrow the list of
      nodes to edit.</para>

      <variablelist>
        <title>The following parameters MUST be specified (list.jsp does not
        work if you do not specify them):</title>

        <varlistentry>
          <term>wizard</term>

          <listitem>
            <para>The wizard to use. This is a relative reference to the xml
            schema file. Do not specify the ".xml" prefix.</para>

            <programlisting format="linespecific">wizard=data/simple.xml</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>nodepath</term>

          <listitem>
            <para>The nodepath defines the object types to list. This can be
            one object type, or a comma-separated list of types, which are
            treated as a relation chain, like in path attribute of the
            taglib's &lt;mm:list&gt; tag. The last objecttype listed is the
            object that is used as the objecttype to edit in the
            wizard.</para>

            <programlisting format="linespecific">nodepath=people or nodepath=people,news</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <title>The following parameters MAY be specified:</title>

        <varlistentry>
          <term>startnodes</term>

          <listitem>
            <para>Like in &lt;mm:list /&gt; and other multilevel tags in the
            MMBase taglibrary you may provide a startnode for a nodepath. That
            node (multiple nodes seperated by comma's) is used a the starting
            node for your list. Since when not providing one you will get all
            the nodes that have such a path.</para>

            <para>For example:</para>

            <programlisting format="linespecific">list.jsp?wizard=wizards/news/news&amp;nodepath=mags,posrel,news&amp;fields=news.title</programlisting>

            <para>Can list more news articles then:</para>

            <programlisting format="linespecific">list.jsp?wizard=wizards/news/news&amp;nodepath=mags,posrel,news&amp;fields=news.title&amp;startnodes=default.mags</programlisting>

            <para>Because it the latter only lists the articles in MyNews
            Magazine and the former all news articles that are related to a
            magazine via a posrel relation ('default.mags' is the alias for
            the magazine node in the example MyNews Magazine
            application).</para>

            <para><programlisting format="linespecific">startnodes=235</programlisting></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>fields</term>

          <listitem>
            <para>The fields to show in the list. If you query only one
            nodetype (see nodepath), you can use simple field names.
            Otherwise, you need to preface the fieldnames with the name of the
            objecttype they belong to. If the first field listed is a number
            field, the objecttype of that field is used as the objecttype to
            edit in the wizard (instead of the last object type in the
            nodepath list). This parameter is similar to the fields attribute
            of the taglib's &lt;mm:list&gt; tag.</para>

            <note>
              <para>In 1.6.3 and lower, field is mandatory. In 1.6.4 and up,
              if fields is not specified, the wizard uses the default 'list'
              fields specified by MMBase.</para>
            </note>

            <programlisting format="linespecific">fields=news.title,people.firstname,people.lastname</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>templates</term>

          <listitem>
            <para>The directory where xsl templates and editwizard task xml's
            can be found. Use this to specify an alternate directory for xsl
            templates and wizard xml's. The other directories (current
            directory, default directory) remain working too, but this
            'templates' is added between them in the resolve path.</para>

            <programlisting format="linespecific">templates=data/my_xsl</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>main</term>

          <listitem>
            <para>The name of the main node type in a node path. The main node
            type designates the element in a list that you want to edit. By
            default, the wizard takes the last name in a node path as the main
            node type.</para>

            <para>For instance, in the node path 'mags,news,publishtimes', the
            main node type recognized automatically will be 'publishtimes' -
            but it is more likely that we desire to edit the news element in
            this list. In this case, you can point out to the wizard to use
            the 'news' element of the list instead.</para>

            <note>
              <para>Available from MMBase 1.6.4 and up. Prior to 1.6.4, you
              can designate the main node type by adding the number field of
              that node type to the fields parameter (i.e:
              'news.number,news.title,publishtimes.date'). This method still
              works in 1.6.4, but is discouraged as it is confusing.</para>
            </note>

            <programlisting format="linespecific">main=news</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>sessionkey</term>

          <listitem>
            <para>A key that identifies the 'session' of this wizard.
            Normally, you cannot run two separate editwizards concurrently
            from the same browser. If you want to allow this for your users
            for some reason, you can provide a 'sessionkey' to identify
            separate sessions: a wizard with one sessionkey runs independent
            from those who use a different one. The default session key is
            'editwizard'. Note that allowing more wizards to be opened from
            one browser consumes more resources and is therefor not
            recommended.</para>

            <programlisting format="linespecific">sessionkey=my_key</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>context</term>

          <listitem>
            <para>The security context to assign to new objects and relations
            created by the editwizard. By default, objects are created using a
            default context defined by the security system (often depending on
            the logged on user). By explicitly specifying this default
            context. Not that specifying a context different from the default
            may result in objects that, once created, cannot be changed by the
            user due to security restrictions. A user needs to be able to
            change the context on objects he creates, or the parameter cause
            security errors.</para>

            <programlisting format="linespecific">context=default</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>maxsize</term>

          <listitem>
            <para>The maximum size of a file to upload. The default maximum
            size for files is 4MB.</para>

            <programlisting format="linespecific">maxsize=8000000</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>orderby</term>

          <listitem>
            <para>A list of fieldnames used to order the returning list. This
            parameter is similar to the orderby attribute of the taglib's
            &lt;mm:list&gt; tag.</para>

            <programlisting format="linespecific">orderby=people.lastname,news.title</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>directions</term>

          <listitem>
            <para>A list of one or more UP/DOWN keywords. Each keyword
            determines whether the order of a matching field specified in the
            orderby parameter is ascending (UP) or descending (DOWN). This
            parameter is similar to the directions attribute of the taglib's
            &lt;mm:list&gt; tag.</para>

            <programlisting format="linespecific">directions=UP</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>searchdirs</term>

          <listitem>
            <para>The direction in which relations between nodemanagers should
            be followed. This parameter is similar to the searchdirs attribute
            of the taglib's &lt;mm:listcontainer&gt; tag. It can be a list, in
            which case the first is for use between the first and second
            nodemanager, the second is for use between second and third
            nodemanager. If there are more steps in the nodemanager path then
            searchdirs, then the searchdir will default to the previous
            searchdir in the 'searchdirs' list.</para>

            <note>
              <para>Available from MMBase 1.7.0 and up. In MMBase 1.6.4 and
              up, only the 'searchdir' parameter was available and only one
              searchdir could be specified, valid for all steps of the
              nodepath.</para>
            </note>

            <programlisting format="linespecific">searchdirs=source,destination</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>constraints</term>

          <listitem>
            <para>A SQL-like constraint, used to filter the list. If you use
            fieldnames in a constraint, surround it with brackets ([]). This
            allows MMBase to recognize the fields and optimize the query. This
            parameter is similar to the constraints attribute of the taglib's
            &lt;mm:list&gt; tag.</para>

            <programlisting format="linespecific">constraints=[news.title] like '%Brasil%'</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>distinct</term>

          <listitem>
            <para>If true, double entries in a list are returned only
            once.</para>

            <programlisting format="linespecific">distinct=true</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>language</term>

          <listitem>
            <para>The preferred language for display. The language is
            specified by the ISO standardized 2-letter lowercase languagecode.
            The effects are dependent on whether alterenate langauge elemenst
            are availabel for the specified language. If not, the default
            language settings are used instead.</para>

            <programlisting format="linespecific">language=nl</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>pagelength</term>

          <listitem>
            <para>The maximum number of entries shown on one list page.
            Default value is 50.</para>

            <programlisting format="linespecific">pagelength=50</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>maxpagecount</term>

          <listitem>
            <para>The maximum number of pages available to browse through.
            Default value is 10.</para>

            <programlisting format="linespecific">maxpagecount=10</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>start</term>

          <listitem>
            <para>The number of the item in the list where to start listing.
            This value is used to skip to a certain page when browsing a large
            list. Default is 0.</para>

            <programlisting format="linespecific">start=0</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>age</term>

          <listitem>
            <para>The maximum age (in days) of the objects to list. Default is
            no age restriction.</para>

            <programlisting format="linespecific">age=31</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>searchfields</term>

          <listitem>
            <para>The field(s) on which to make a search, using the value
            specified in the search parameter and the type of comparison
            specified in the search type.</para>

            <para>You can specify more than one field (separated by commas).
            if you do, a search matches if one or more of the specified fields
            matches.</para>

            <note>
              <para>If the search parameter (see below) is set to AUTO,
              specifying this parameter will create a searchbox at the top of
              the list, allowing you to enter the value to search for. If a
              search box is forced by the search parameter but the
              searchfields are not specified, the default is to search on the
              fields being displayed (specified in the fields
              parameter)</para>
            </note>

            <programlisting format="linespecific">searchfields=news.title,news.subtitle</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>realsearchfield</term>

          <listitem>
            <para>The actual field on which to search. Normally, searches are
            done on the fields mentioned in the searchfields parameter (used
            to create the search box in a list page). Sometimes, you want to
            search on a field other than those listed in searchfield (such as
            'number' or 'owner'). In that case, use this parameter to specify
            the field.</para>

            <note>
              <para>This parameter is set by the system when a user submits a
              search- you will hardly ever use it yourself. If you want to add
              additional constraints, use the 'constraints' parameter. If you
              specify a constraints parameter, that constraint is combined in
              further searches with the search parameters given by a user. If
              you use realsearchfield to specify a constraint, that
              information is only valid for the first search - it will be
              replaced when a user submits his search.</para>
            </note>

            <note>
              <para>Available from MMBase 1.6.4 and up</para>
            </note>

            <programlisting format="linespecific">realsearchfield=news.title,news.subtitle</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>searchvalue</term>

          <listitem>
            <para>The term or value to search for. This is only valid if you
            also specify the searchfields parameter.</para>

            <programlisting format="linespecific">searchvalue=Brasil</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>searchtype</term>

          <listitem>
            <para>Determines what type of search is used to filter on the
            searchfields, using the specified search value. This is only valid
            if you also specify the searchfields parameter.</para>

            <para>Allowed values are 'string', 'like', 'equalto',
            'greaterthan', 'lessthan', 'notgreaterthan', and 'notlessthan'.
            use 'string' to compare the search value to the field using an
            exact match. Use 'like' to make a pattern search using the
            specified searchvalue. Use the other values to compare the field
            to numeric values or dates. I.e. using 'greaterthan' selects all
            fields whose (numeric) value is greater than the specified
            (numeric) value.</para>

            <programlisting format="linespecific">searchtype=like</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>search</term>

          <listitem>
            <para>The search parameter specified when the list should show a
            search box, and whether searching is mandatory. There are four
            possible values:</para>

            <para><emphasis>no</emphasis> turns searching off. If other
            parameters such as searchfields and searchvalue are given, the
            search is performed using those parameters but a searchbox is not
            displayed.</para>

            <para><emphasis>yes</emphasis> turns searching on, displaying a
            searchbox on top of the list, using defaults for parameters such
            as searchfields, if these are not specified.</para>

            <para><emphasis>force</emphasis> is like YES, but searching (and
            showing a resultlist) is not performed until a searchvalue is
            specified. If no searchvalue is given, only the searchbox is
            displayed - no results are shown.</para>

            <para><emphasis>auto</emphasis> makes searching dependent on the
            presence of the searchfields parameter. If the searchfields
            parameter is given, a searchbox is shown. Otherwise, it is not.
            AUTO is the default value</para>

            <note>
              <para>Available from MMBase 1.6.4 and up</para>
            </note>

            <programlisting format="linespecific">search=yes</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>origin</term>

          <listitem>
            <para>A node alias or number, which will be passed to the
            underlying editwizard. the value can then be referenced in the
            editwizard schema using the {$origin} variable. This can be used
            to create relations to nodes whose 'origin' is determined outside
            the wizard (i.e. in a complex search or determined through user
            preferences).</para>

            <programlisting format="linespecific">origin=my_start_node</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>title</term>

          <listitem>
            <para>An optional title to use by the list. In general, you should
            specify this in the editwizard schema.</para>

            <programlisting format="linespecific">title=News of The Week</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>proceed</term>

          <listitem>
            <para>System parameter, see the description at the wizard.jsp
            reference page for more info</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>replace</term>

          <listitem>
            <para>System parameter, see the description at the wizard.jsp
            reference page for more info</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>remove</term>

          <listitem>
            <para>System parameter, see the description at the wizard.jsp
            reference page for more info</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>relationOriginNode</term>

          <listitem>
            <para>If this option is given, then you can besides searching in
            the given list, also search in the complete cloud or using a
            multilevel search. This can be useful if the presented list has an
            orgin. In this way you can add new entries to this list, without
            needing a wizard. The searchbox on the list page will contain an
            extra button which will enable you to search in the whole cloud or
            using a multilevel search defined by 'relationStartnodes' and
            'relationNodepath'.</para>

            <para>You should use &lt;<link linkend="action-link">action
            type="link"</link> /&gt; and &lt;<link
            linkend="action-unlink">action type="unlink"</link> /&gt; in the
            wizard you are refering to.</para>

            <programlisting format="linespecific">relationOriginNode=&lt;origin&gt;[&amp;relationRole=&lt;role&gt;][&amp;relationCreateDir=&lt;dir&gt;]</programlisting>

            <para>Where 'origin' it the nodenumber to which a relation must be
            created, 'role' is the role of that relation. The
            'relationOriginNode' defaults to 'origin'.</para>

            <para>(See also: the &lt;<link linkend="action-link">action
            type="link"</link> /&gt; and &lt;<link
            linkend="action-unlink">action type="unlink"</link> /&gt;)</para>

            <note>
              <para>Available from MMBase 1.8.5 and up.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>relationRole</term>

          <listitem>
            <para>The role of the relation to be created, for example
            'posrel'.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>relationCreateDir</term>

          <listitem>
            <para>The searchdirection of the relation to be created: 'source'
            or 'destination'.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>relationStartnodes</term>

          <listitem>
            <para>Node or nodes from which to start the search. In stead of
            searching amongst all nodes of a certain type stated by
            'relationOriginNode', you can use the options 'relationStartnodes'
            and 'relationNodepath' to do a (multilevel) search following a
            nodepath. For example:</para>

            <para><programlisting format="linespecific">relationOriginNode=3472&amp;relationStartnodes=default.mags&amp;relationNodepath=mags,posrel,news</programlisting>(See
            also: the &lt;<link linkend="action-link">action
            type="link"</link> /&gt; and &lt;<link
            linkend="action-unlink">action type="unlink"</link> /&gt;)</para>

            <note>
              <para>'relationStartnodes' and 'relationNodepath' are available
              from MMBase 1.8.6 and up.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>relationNodepath</term>

          <listitem>
            <para>The nodepath to follow starting from
            'relationStartnodes'.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <example>
        <title>How to use list.jsp to list objects</title>

        <programlisting format="linespecific">list.jsp?wizard=practice/people&amp;nodepath=people&amp;fields=firstname,lastname</programlisting>

        <programlisting format="linespecific">list.jsp?wizard=practice/simple&amp;startnodes=341&amp;nodepath=people,news&amp;fields=news.title,people.firstname,people.lastname</programlisting>
      </example>
    </section>

    <section id="wizard.jsp">
      <title>wizard.jsp</title>

      <para>You can use wizard.jsp to directly start a wizard. Like list.jsp,
      you will need to supply the correct parameters in order to let the
      wizard run correctly. If you call the wizard.jsp page, a wizard will be
      loaded and started. The proper html will be rendered and shown in the
      browser. The syntax of wizard.jsp to create a new object looks like
      this:</para>

      <programlisting format="linespecific">wizard.jsp?wizard=practice/simple&amp;objectnumber=new</programlisting>

      <para>To create a wizard and use an existing mmbase object as
      source:</para>

      <programlisting format="linespecific">wizard.jsp?wizard=practice/simple&amp;objectnumber=[objectnumber]</programlisting>

      <variablelist>
        <title>The following parameters MUST be specified (wizard.jsp does not
        work if you do not specify them):</title>

        <varlistentry>
          <term>wizard</term>

          <listitem>
            <para>The wizard to use. This is a relative reference to the xml
            schema file. Do not specify the ".xml" prefix.</para>

            <programlisting format="linespecific">wizard=data/simple.xml</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>objectnumber</term>

          <listitem>
            <para>The number or alias of the object to edit. The object must
            exist. You can also supply the keyword 'new', which creates a new
            object instead of editing an existing one.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <title>The following parameters MAY be specified:</title>

        <varlistentry>
          <term>templates</term>

          <listitem>
            <para>A directory where xsl templates and wizard xml could be
            found. See also the description of the same parameter for
            list.jsp</para>

            <programlisting format="linespecific">templates=data/my_xsl</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>sessionkey</term>

          <listitem>
            <para>A key that identifies the 'session' of this wizard.
            Normally, you cannot run two separate editwizards concurrently
            from the same browser. If you want to allow this for your users
            for some reason, you can provide a 'sessionkey' to identify
            separate sessions: a wizard with one sessionkey runs independent
            from those who use a different one. The default session key is
            'editwizard'. Note that allowing more wizards to be opened from
            one browser consumes more resources and is therefor not
            recommended.</para>

            <programlisting format="linespecific">sessionkey=my_key</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>context</term>

          <listitem>
            <para>The security context to assign to new objects and relations
            created by the editwizard. By default, objects are created using a
            default context defined by the security system (often depending on
            the logged on user). By explicitly specifying this default
            context. Not that specifying a context different from the default
            may result in objects that, once created, cannot be changed by the
            user due to security restrictions. A user needs to be able to
            change the context on objects he creates, or the parameter cause
            security errors.</para>

            <programlisting format="linespecific">context=default</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>language</term>

          <listitem>
            <para>The preferred language for display. The language is
            specified by the ISO standardized 2-letter lowercase languagecode.
            The effects are dependent on whether alterenate langauge elemenst
            are availabel for the specified language. If not, the default
            language settings are used instead.</para>

            <programlisting format="linespecific">language=nl</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>debug</term>

          <listitem>
            <para>If debug=true, the wizard will place additional information
            in the wizard page that allows for debugging of the application.
            This includes a link to a debug page that allows you to view the
            loaded object data and the wizard schema. This link specifies
            parameters such as sessionkey and popupid as required.</para>

            <programlisting format="linespecific">debug=true</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>maxsize</term>

          <listitem>
            <para>The maximum size of a file to upload. The default maximum
            size for files is 4MB.</para>

            <programlisting format="linespecific">maxsize=8000000</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>origin</term>

          <listitem>
            <para>A node alias or number. This value can be referenced in the
            editwizard schema using the {$origin} variable. This can be used
            to create relations to nodes whose 'origin' is determined outside
            the wizard (i.e. in a complex search or determined through user
            preferences).</para>

            <programlisting format="linespecific">origin=my_start_node</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>popupid</term>

          <listitem>
            <para>This parameter is passed by the system, you never pass it
            yourself. It is used to identify a 'popup' wizard. A popup wizard
            is a sub-wizard for the main wizard that, unlike an 'inline'
            sub-wizard, opens in a separate browser window. Because of this,
            it needs to separately maintain its status (identified by the
            popupid). Once the task of a popup wizard ends, it's window is
            closed, and the parent wizard is refreshed.</para>

            <note>
              <para>You never pass this parameter by hand. They are provided
              by the &lt;command name="startwizard"&gt; and &lt;field
              ftype="startwizard"&gt; tags in a wizard schema. However, you
              might need to pass the parameter in links if you override xsl
              stylesheets, and if you want to use the debug.jsp page to view a
              popup wizard's debug data, you need to know the value of this
              parameter.</para>
            </note>

            <programlisting format="linespecific">popupid=my_id</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>proceed</term>

          <listitem>
            <para>This is a parameter passed by the system. It is used to
            indicate that the current wizard is still being processed, and
            therefor its data (stored in the user's session) should be kept an
            re-used by this call. Omitting this parameter (or passing it with
            the value false) causes all processed data to be removed, and
            replaced by a new wizard.</para>

            <note>
              <para>You never pass this parameter by hand, but you might need
              to pass it in links in overriding xsl stylesheets.</para>
            </note>

            <programlisting format="linespecific">popupid=my_id</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>replace</term>

          <listitem>
            <para>System parameter</para>

            <note>
              <para>You never pass this parameter by hand. It is used to by
              the wizard to pass state information.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>remove</term>

          <listitem>
            <para>System parameter</para>

            <note>
              <para>You never pass this parameter by hand. It is used to by
              the wizard to pass state information.</para>
            </note>
          </listitem>
        </varlistentry>
      </variablelist>

      <example>
        <title>How to use wizard.jsp to start an editwizard</title>

        <programlisting format="linespecific">wizard.jsp?wizard=practice/simple&amp;objectnumber=184</programlisting>

        <programlisting format="linespecific">wizard.jsp?wizard=practice/simple&amp;objectnumber=new</programlisting>
      </example>
    </section>

    <section id="debug.jsp">
      <title>debug.jsp</title>

      <para>When you are debugging your wizard code, it can be useful to know
      what data is read and parsed by the wizard. The debug.jsp page gives
      access to three xml trees that are used by the current running
      wizard.</para>

      <para>The data tree shows the xml that contains the data used by the
      wizard, including any changes made by the user. It can be useful to see
      if data is loaded (or changed) as expected. It can also be useful to
      determine xpaths when you plan to use these in your wizard: if you use
      an xpath in your wizard xml file, it access the data xml.</para>

      <para>The wizard lists the fully expanded wizard schema file (including
      any inclusions and extensions). Note that this xml also contains some
      additional navigational information related to the current form, and
      does not fully follow the wizard dtd.</para>

      <para>The wizard-schema combines the data and wizard xmlks into one xml
      tree. This tree is what is passed to the xsl-transformers, and is used
      to create the form that is sent to the end-user. Use this form to see if
      data loaded is actually used, and if you want to override the default
      xsl files.</para>

      <variablelist>
        <title>The following parameters MAY be specified:</title>

        <varlistentry>
          <term>sessionkey</term>

          <listitem>
            <para>A key that identifies the 'session' of this wizard. See the
            wizard.jsp for more information.</para>

            <programlisting format="linespecific">sessionkey=my_key</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>popupid</term>

          <listitem>
            <para>Specify this parameter to view a popup wizard's debug data
            (instead of the data displayed by the main wizard). See the
            popupid of the wizard.jsp for more info.</para>

            <programlisting format="linespecific">popupid=my_id</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section id="basicconcepts">
    <title>Basic Concepts</title>

    <para>TODO</para>

    <section id="objectstructures">
      <title>Object structures (Dove)</title>

      <para>TODO</para>
    </section>

    <section id="xpathexpressions">
      <title>XPath Expressions and Wizard variables</title>

      <para>TODO</para>
    </section>

    <section id="including">
      <title>Including xml fragments</title>

      <para>TODO</para>
    </section>

    <section id="extending">
      <title>Extending using xml fragments</title>

      <para>TODO</para>
    </section>
  </section>

  <section id="syntaxreference">
    <title>Syntax Reference</title>

    <!-- variables -->

    <!-- Include file for the editwizard reference docbook: 
     '$origin' variable
-->

    <section id="origin">
      <title>{$origin}</title>

      <formalpara>
        <title>Usage</title>

        <para>The $origin variable contains the value of the 'origin'
        parameter passed to the wizard.jsp or list.jsp pages.</para>
      </formalpara>

      <para>The variable can be used as an expression in the object-structure
      of the <link linkend="action-add">add action</link> and <link
      linkend="action-create">create action</link> tags, and as a parameter
      value in the <link linkend="command-search">search command</link> and
      <link linkend="command-wizard">wizard command</link> tags. This allows
      you to create objects that are automatically linked to the passed owner
      object, or to pass owner information to another wizard or list, allowing
      for more generic wizards.</para>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;wizard-schema id="my_wizard"&gt;
    &lt;title&gt;Wizard-Title&lt;/title&gt;

    &lt;action type="create" &gt;
      &lt;object type="news"&gt;
        &lt;field name="title"&gt;My Title&lt;/field&gt;
        &lt;relation role="related" destination="{$origin}" /&gt;
        &lt;/object&gt;
    &lt;/action&gt;

  ...
    
&lt;/wizard-schema&gt;
</programlisting></para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook: 
     '$pos' variable
-->

    <section id="pos">
      <title>{$pos}</title>

      <formalpara>
        <title>Usage</title>

        <para>The $pos variable identifies the index of an object in a list of
        objects returned by the search command.</para>
      </formalpara>

      <para>The list of objects is inserted at the end of the list that called
      the search command. Some relations have fields whose values are
      initialized by the wizard a they are inserted. In a few cases, the value
      inserted may be calculated based on values of the current list. For
      instance, the pos field of a posrel relation will often need to be
      filled with a sequentially increasing number. This can be done by
      including an xpath in the field tag of the relation's create action. For
      the posrel field, this can be:</para>

      <para><programlisting format="linespecific">
&lt;action type="create"&gt;
  &lt;relation role="posrel" type="news"&gt;
    &lt;field name="pos"&gt;{sum(//relation[@role='posrel' and @lastitem='true' and object/@type='news']/field[@name='pos'])+1}&lt;/field&gt;
  &lt;/relation&gt;
&lt;/action
</programlisting></para>

      <para>Which gets the highest number in the original list, and increases
      it by 1. (Note how we use 'sum' so we get a value of 0 if there are no
      items in the list)</para>

      <para>However, this code will not always do what we want: if a search
      result returns more than one object, all the pos fields are assigned the
      same number (as the xpath runs on the original data).</para>

      <para>In that case, you can make use of the $pos variable. The $pos
      variable, on creating a relation to a searched object, contains the
      index of that object in the resultlist, starting with 0 for the first
      item in the list. Including the $pos variable in the xpath gives:</para>

      <para><programlisting format="linespecific">
&lt;action type="create"&gt;
  &lt;relation role="posrel" type="news"&gt;
    &lt;field name="pos"&gt;{sum(//relation[@role='posrel' and @lastitem='true' and object/@type='news']/field[@name='pos'])+{$pos}}&lt;/field&gt;
  &lt;/relation&gt;
&lt;/action
</programlisting></para>

      <para>This creates a value that is equal to the highest number in the
      original list, increased by the object's index in the list + 1. The
      result is that the 'pos' fields of each new relation are guaranteed to
      be uniquely numbered (and all higher than the original highest
      number).</para>

      <para>Note that this manner of initializing fields only really works
      when combining it with sorted lists.</para>
    </section>

    <!-- tags -->

    <!-- Include file for the editwizard reference docbook: 
     'action' tag
-->

    <section id="action">
      <title>action</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;action [type="add|create|delete|load|link|unlink" /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>The action object defines whether, and what object structures
        the wizard is to create, load, or delete when the appropriate command
        is given. Each action is implicitly associated with a certain command.
        The top-level actions are associated with commands issued from
        outside, or on startup of the wizard (such as loading the correct
        objectstructure when you start a wizard to edit data, or a command to
        delete a certain object from a list).</para>
      </formalpara>

      <para>Actions in lists define what object structures to create or delete
      when operations are issued on a list's contents. The content of the
      action is generally an objectstructure (with the exception of the
      top-level delete action), which defines the data that is to be handled.
      More info can be found in the reference for the individual action
      types.</para>

      <formalpara>
        <title>Required Attributes</title>

        <para><variablelist>
            <varlistentry>
              <term>type</term>

              <listitem>
                <para>The type of action. Either add, create, delete, or load.
                For more info see <link linkend="action-create">action
                type="create"</link>, <link linkend="action-add">action
                type="add"</link>, <link linkend="action-delete">action
                type="delete"</link>, <link linkend="action-load">action
                type="load"</link>, <link linkend="action-link">action
                type="link"</link> and <link linkend="action-unlink">action
                type="unlink"</link></para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para>See the individual types of actions for more details</para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para><variablelist>
            <varlistentry>
              <term><link
              linkend="wizard-schema">&lt;wizard-schema&gt;</link></term>

              <listitem>
                <para>The wizard schema root (for top-level actions).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="list">&lt;list&gt;</link></term>

              <listitem>
                <para>A list in a form (for list mutation actions).</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;wizard-schema id="my_wizard"&gt;
  &lt;title&gt;Wizard-Title&lt;/title&gt;

  &lt;action type="create" &gt;
    &lt;object type="news"&gt;
      &lt;field name="title"&gt;My Title&lt;/field&gt;
    &lt;/object&gt;
  &lt;/action&gt;
  
  &lt;form-schema id="step1"&gt;
    &lt;field name="title"&gt;
      &lt;prompt&gt;Title&lt;/prompt&gt;
    &lt;/field&gt;
  &lt;/form-schema&gt;
&lt;/wizard-schema&gt;
</programlisting></para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook: 
     'action type="add"' tag
-->

    <section id="action-add">
      <title>action type="add"</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;action type="add" /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>This tag defines how to create a new relation in a list, to an
        object supplied by one of the list commands. It is similar to <link
        linkend="action-create">action type="create"</link>, but it is used
        for the <link linkend="command-search">command name="search"</link> or
        <link linkend="command-wizard">command name="wizard"</link>
        tags.</para>
      </formalpara>

      <para>Under the tag, you specify a <link
      linkend="relation">relation</link> tag, with the role and
      destinationtype attributes set to the type and role of the relation to
      create: <programlisting format="linespecific">
&lt;action type="add" &gt;
    &lt;relation role="author" destinationtype="people" /&gt;
&lt;/action&gt;
</programlisting> This action creates a 'author' relation to a people object.
      The wizard expects that the object is supplied by one of the list <link
      linkend="command">command</link> tags (a search command or a wizard
      command).</para>

      <para>See the <link linkend="action-create">action type="create"</link>
      for information on how to create a new related object in the
      list.</para>

      <formalpara>
        <title>Required Attributes</title>

        <para><variablelist>
            <varlistentry>
              <term>type</term>

              <listitem>
                <para>The type of action, in this case, "add".</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="relation">&lt;relation /&gt;</link></term>

              <listitem>
                <para>Specifies the type of relation to create in a list. It
                may also include additional field and object tags for
                initialization of the object or creation of new objects to
                relate to.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="list">&lt;list&gt;</link></term>

              <listitem>
                <para>A list of related objects in a form.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;wizard-schema id="my_wizard"&gt;
    &lt;title&gt;Wizard-Title&lt;/title&gt;

    ...
    
    &lt;form-schema id="step1"&gt;
        &lt;field name="title"&gt;
            &lt;prompt&gt;Title&lt;/prompt&gt;
        &lt;/field&gt;
    
        &lt;list role="author" destinationtype="people" &gt;
        
            ...

            &lt;command name="search" ... &gt;
            
            &lt;action type="add" &gt;
                &lt;relation role="author" destinationtype="people" /&gt;
            &lt;/action&gt;
        &lt;/list&gt;
    &lt;/form-schema&gt;
    
&lt;/wizard-schema&gt;
</programlisting></para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook: 
     'action type="create"' tag
-->

    <section id="action-create">
      <title>action type="create"</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;action type="create" /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>This tag defines how to create a new object or relation/object.
        As a top-level tag it defines how to create and initialize a new main
        object. In a list, it specifies how to create a relation to a newly
        instantiated (empty) object in that list. Not specifying a create
        action means the action is not available (i.e. you cannot create a
        main object in a wizard or a new related object in a list)</para>
      </formalpara>

      <para>You define the data to be created by including a (nested)
      objectstructure in the body of the action tag.</para>

      <para>Under a top-level tag, you specify an <link
      linkend="object">object</link> tag, with the type attribute set to the
      type of object that needs to be created. <programlisting
      format="linespecific">
&lt;action type="create" &gt;
    &lt;object type="news" /&gt;
&lt;/action&gt;
</programlisting> This action creates an (empty, and unrelated) news
      object.</para>

      <para>You can make a more complex creation action by specifying fields
      that you want to initialize (aside from any initialization that is done
      by MMBase itself), or relations that you want to have made (such as
      linking to a specific archive): <programlisting format="linespecific">
&lt;action type="create" &gt;
    &lt;object type="news" &gt;
        &lt;field name="title"&gt;My Title&lt;/field&gt;
        &lt;relation role="related" destination="my_news_archive" /&gt;
    &lt;/object&gt;
&lt;/action&gt;
</programlisting> This will initialize the 'title' field of the news object,
      and relate it to an object (i.e. a pool object) with the alias
      'my_news_archive'. There are a limited number of 'variables' that you
      can use when initializing the action. More info on this can be found in
      the <link linkend="relation">relation</link> and <link
      linkend="field">field</link> tag references.</para>

      <para>As a list-level tag, the action is similar to <link
      linkend="action-add">action type="add"</link>, but it is used for the
      <link linkend="command-insert">command type="insert"</link> tag.</para>

      <para>You specify a <link linkend="relation">relation</link> tag, with
      the role and destinationtype attributes set to the type and role of the
      relation to create. You can also specifying relation fields that you
      want to initialize. You also need to add an 'object' tag (with
      initialized fields or even additional relations to create), which
      prompts the wizard to create the object: <programlisting
      format="linespecific">
&lt;action type="create" &gt;
    &lt;relation role="author" /&gt;
        &lt;object type="people" &gt;
            &lt;field name="lastname"&gt;Supply lastname here&lt;/field&gt;
        &lt;/object&gt;
    &lt;/relation&gt;
&lt;/action&gt;
</programlisting> This will create a new 'people' object with an initialized
      'lastname' field, and create a relation to this object. There are a
      limited number of 'variables' that you can use when initializing the
      action. More info on this can be found in the <link
      linkend="field">field</link> tag reference.</para>

      <para>You use this action to define how to create a relation for a list
      <link linkend="command-insert">insert command</link>. If you have a
      <link linkend="command-search">search</link> or a <link
      linkend="command-wizard">wizard</link> command tag, you should use an
      <link linkend="action-add">action type="add"</link> tag instead.</para>

      <note>
        <para>You can use both the add and create actions in a list, allowing
        you to supply both a search and a insert command.</para>
      </note>

      <formalpara>
        <title>Required Attributes</title>

        <para><variablelist>
            <varlistentry>
              <term>type</term>

              <listitem>
                <para>The type of action, in this case, "create".</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="object">&lt;object /&gt;</link> (top-level
              tag)</term>

              <listitem>
                <para>Specifies the type of object to create. It may also
                include additional field and relation tags for initialization
                of the object or auto-linking to other objects.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="relation">&lt;relation /&gt;</link>
              (list-level tag)</term>

              <listitem>
                <para>Specifies the type of relation to create in a list. It
                may also include additional field and object tags for
                initialization of the object or creation of new objects to
                relate to.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="wizard-schema">&lt;wizard-schema&gt;</link>
              (top-level tag)</term>

              <listitem>
                <para>The wizard schema root.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="list">&lt;list&gt;</link> (list-level
              tag)</term>

              <listitem>
                <para>A list of related objects in a form.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;wizard-schema id="my_wizard"&gt;
    &lt;title&gt;Wizard-Title&lt;/title&gt;

    ...
    
    &lt;action type="create" &gt;
      &lt;object type="news" &gt;
          &lt;field name="title"&gt;My Title&lt;/field&gt;
            &lt;relation role="related" destination="my_news_archive" /&gt;
        &lt;/object&gt;
  &lt;/action&gt;
 
    &lt;form-schema id="step1"&gt;
        &lt;field name="title"&gt;
            &lt;prompt&gt;Title&lt;/prompt&gt;
        &lt;/field&gt;
    
        &lt;list role="author" destinationtype="people" &gt;
        
            ...
            
            &lt;command type="insert" /&gt;
            
            &lt;action type="create" &gt;
                &lt;relation role="author" destinationtype="people" &gt;
                  &lt;object&gt;
                      &lt;field name="lastname"&gt;Insert name here&lt;/field&gt;
                    &lt;/object&gt;
                &lt;/relation&gt;
            &lt;/action&gt;
        &lt;/list&gt;
    &lt;/form-schema&gt;
    
&lt;/wizard-schema&gt;
</programlisting></para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook: 
     'action type="delete"' tag
-->

    <section id="action-delete">
      <title>action type="delete"</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;action type="delete" /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>This tag defines actions to take when an object is to be
        removed. there are two possible occurrences of this action: as a top
        level tag, or as a list-tag.</para>
      </formalpara>

      <para>A top level tag defines an action for when a user issues a delete
      command from the wizard list page. If you define a delete action, list
      pages will enable the user to remove an object from the MMBase cloud by
      showing a delete button or link. Not defining this action means the link
      does not show (thus, objects cannot be deleted if you do not provide the
      action). Optional children of the action are a roll-over
      help-description for the link in the list, and a prompt for asking
      confirmation when the command is issued.</para>

      <note>
        <para>Unlike other actions, the top level delete action does not
        contain an objectstructure - the object deleted is always the current
        object and its relations. You cannot, for example, define a structure
        so that deleting the node will automatically delete any related
        nodes.</para>
      </note>

      <para>A list tag defines an action for when a relation is removed from a
      list in a form. In general, you need not supply this action - deletes
      are generally handled automatically. Delete buttons in forms are enabled
      or disabled by the list tag, not by the delete action. The only time you
      want to use the delete action in a list is when you want to remove both
      a relation and the related node. In this case, you can add the delete
      action, along with the 'additional' objectstructure to delete (besides
      the relation itself). Currently this 'objectstructure' is only the
      underlying object, so a delete action will generally look like:
      <programlisting format="linespecific">
&lt;action type="delete"&gt;
  &lt;object /&gt;
&lt;/action&gt;
</programlisting></para>

      <formalpara>
        <title>Required Attributes</title>

        <para><variablelist>
            <varlistentry>
              <term>type</term>

              <listitem>
                <para>The type of action, in this case, "delete".</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="description">&lt;description /&gt;</link>
              (top-level tag)</term>

              <listitem>
                <para>Descriptive text used as help text (often a rollover)
                for the 'delete' link in the wizard list. Only applicable to
                the top-level delete action.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="object">&lt;object /&gt;</link> (list-level
              tag)</term>

              <listitem>
                <para>If given, the delete action not only removes the
                relation, but also the related node. This can be useful if you
                have one-use only objects, which you like to have cleared when
                they are unlinked from their 'parent' object. Only applicable
                to the list-level delete action. Note that unlike other
                actions, the object child tag cannot itself contain other
                relations or objects.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="prompt">&lt;prompt /&gt;</link> (top-level
              tag)</term>

              <listitem>
                <para>Text to prompt when asking confirmation when the command
                is issued. This allows you to give specific warnings. Only
                applicable to the top-level delete action.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para><variablelist>
            <varlistentry>
              <term><link
              linkend="wizard-schema">&lt;wizard-schema&gt;</link></term>

              <listitem>
                <para>The wizard schema root (for top-level delete
                actions).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="list">&lt;list&gt;</link></term>

              <listitem>
                <para>A list in a form (for list delete actions).</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;wizard-schema id="my_wizard"&gt;
    &lt;title&gt;Wizard-Title&lt;/title&gt;

    ...
    
    &lt;action type="delete" &gt;
      &lt;prompt&gt;Do you really want to delete this item?&lt;/prompt&gt;
        &lt;description&gt;Click to delete this item&lt;/description&gt;
    &lt;/action&gt;

    &lt;form-schema id="step1"&gt;
        &lt;field name="title"&gt;
            &lt;prompt&gt;Title&lt;/prompt&gt;
        &lt;/field&gt;
        
        &lt;list role="related" destinationtype="sections" &gt;
    
    ....
        
        &lt;action type="delete"&gt;
          &lt;object /&gt;
        &lt;/action&gt;
    
        &lt;/list
        
    &lt;/form-schema&gt;
&lt;/wizard-schema&gt;
</programlisting></para>
      </formalpara>
    </section>

    <section id="action-link">
      <title>action type="link"</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;action type="link" /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>This tag defines that a list-page should enable a 'search in the
        whole cloud' or 'search using a multilevel'.</para>
      </formalpara>
    </section>

    <section id="action-unlink">
      <title>action type="unlink"</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;action type="unlink" /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>This tag defines that a list-page also has 'unlink' icons (the
        inverse of 'newfromlist'), with prompt and description you can provide
        messages like "Are you sure you want to remove this relation?".</para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook: 
     'action type="load"' tag
-->

    <section id="action-load">
      <title>action type="load"</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;action type="load" /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>This tag defines actions to take when an object is to be loaded
        by the wizard for editing. It is a top-level tag and always applies to
        the main edit object (the object whose number is passed through the
        objectnumber parameter when calling wizard.jsp).</para>
      </formalpara>

      <para>By defining a load action, you can command the wizard to load
      specific fields, and additional (related) objects to be edited. You
      define the data to be loaded by including a (nested) objectstructure in
      the body of the action tag. Directly under that tag, you can specify the
      fields you want to load (using field tags), and the relations from his
      node that you want to follow and load the data of. Loading a relation
      also loads the related node. As an example: <programlisting
      format="linespecific">
&lt;action type="load" &gt;
    &lt;field name="title" /&gt;
    &lt;field name="subtitle" /&gt;
    &lt;relation destinationtype="images" role="posrel" /&gt;
&lt;/action&gt;
</programlisting> This action loads an object's title and subtitle fields, as
      well as all images that are related to the object through the 'posrel'
      role.</para>

      <para>This action loads all the fields of the 'posrel' relation, and
      those of the related images. If you want to limit the fields that are
      loaded (for instance to limit the amount of space the wizard uses), you
      can specify this by expanding the objectstructure as follows:
      <programlisting format="linespecific">
&lt;action type="load" &gt;
    &lt;field name="title" /&gt;
    &lt;field name="subtitle" /&gt;
    &lt;relation destinationtype="images" role="posrel" &gt;
        &lt;field name="pos" /&gt;
        &lt;object&gt;
            &lt;field name="title" /&gt;
        &lt;/object
    &lt;/relation&gt;
&lt;/action&gt;
</programlisting> This will load the 'pos' field of the posrel relation, and
      the 'title' field of any related images. You can also continue to nest
      relations, such as the image related to an author related to a news
      item. This makes for more complex wizards, so in general you will not go
      more than one relation deep.</para>

      <para>If you do not specify a load action, the wizard by default loads
      the main object with all its (editable) fields. It will in that case not
      load any related objects.</para>

      <note>
        <para>You can only edit fields or list related objects if the wizard
        has loaded them. If you specify too few fields in your load action,
        you may not be able to access everything you want to edit. Likewise,
        specifying too much may make the wizard slow.</para>
      </note>

      <formalpara>
        <title>Required Attributes</title>

        <para><variablelist>
            <varlistentry>
              <term>type</term>

              <listitem>
                <para>The type of action, in this case, "load".</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="field">&lt;field /&gt;</link></term>

              <listitem>
                <para>If given, the load action only loads those fields for
                which there are tags defined. If you do not list any field
                tags, all fields are loaded.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="relation">&lt;relation /&gt;</link></term>

              <listitem>
                <para>If given, the load action loads the relation as
                specified, as well as the objects related to. Relations can
                contain field and object tags, which can further determine
                what is loaded by the wizard.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para><variablelist>
            <varlistentry>
              <term><link
              linkend="wizard-schema">&lt;wizard-schema&gt;</link></term>

              <listitem>
                <para>The wizard schema root.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;wizard-schema id="my_wizard"&gt;
    &lt;title&gt;Wizard-Title&lt;/title&gt;

    ...
    
    &lt;action type="load" &gt;
      &lt;field name="title" /&gt;
      &lt;field name="subtitle" /&gt;
      &lt;field name="intro" /&gt;
      &lt;field name="body" /&gt;
        &lt;relation destinationtype="images" role="posrel"  &gt;
          &lt;field name="pos" /&gt;
            &lt;object&gt;
                &lt;field name="title" /&gt;
            &lt;/object
        &lt;/relation&gt;
        &lt;relation destinationtype="attachments" role="related" &gt;
        &lt;relation destinationtype="urls" role="related" /&gt;
        &lt;relation destinationtype="people" role="author" &gt;
            &lt;object&gt;
                &lt;field name="title" /&gt;
                &lt;relation destinationtype="images" role="related" &gt;
                    &lt;object&gt;
                        &lt;field name="title" /&gt;
                    &lt;/object
                &lt;/relation&gt;
            &lt;/object
        &lt;/relation&gt;
  &lt;/action&gt;
 
    &lt;form-schema id="step1"&gt;
        &lt;field name="title"&gt;
            &lt;prompt&gt;Title&lt;/prompt&gt;
        &lt;/field&gt;
    &lt;/form-schema&gt;
&lt;/wizard-schema&gt;
</programlisting></para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook: 
     'form-schema' tag
-->

    <section id="form-schema">
      <title>form-schema</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;form-schema [ id="{form_schema_id}" ] /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>A wizard will always be needing at least one form-schema. In a
        form-schema one form of a wizard is defined. A form typically contains
        fields to edit, or lists of relations to change. Each form-schema is
        represented as one (web) page in the wizard.</para>
      </formalpara>

      <formalpara>
        <title>Required Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para><variablelist>
            <varlistentry>
              <term>id</term>

              <listitem>
                <para>The identifier of the form. Use this id to refer to the
                form from, for instance, the <link linkend="step">step</link>
                tag.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="title">&lt;title /&gt;</link></term>

              <listitem>
                <para>The title of a form</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="subtitle">subtitle</link></term>

              <listitem>
                <para>The subtitle of a form</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="field">&lt;field /&gt;</link></term>

              <listitem>
                <para>The presentation of an object field in the form. You can
                define more than one field.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="fieldset">&lt;fieldset /&gt;</link></term>

              <listitem>
                <para>A set of fields to present in the form. You can define
                more than one fieldset.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="list">list</link></term>

              <listitem>
                <para>The presentation of a list of relations in the form. You
                can define more than one list.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para><variablelist>
            <varlistentry>
              <term><link
              linkend="wizard-schema">&lt;wizard-schema&gt;</link></term>

              <listitem>
                <para>The wizard schema root.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;wizard-schema id="my_wizard"&gt;
    &lt;title&gt;Wizard-Title&lt;/title&gt;
    
    &lt;form-schema id="step1"&gt;
      &lt;title&gt;Step 1&lt;/title&gt;
      &lt;subtitle&gt;Enter basic data&lt;/subtitle&gt;
        
        &lt;field name="firstname"&gt;
            &lt;prompt&gt;First Name&lt;/prompt&gt;
        &lt;/field&gt;
        &lt;field name="lastname"&gt;
            &lt;prompt&gt;Last name&lt;/prompt&gt;
        &lt;/field&gt;
    
      &lt;list ...&gt;
         ...
    &lt;/list&gt;       
        
    &lt;/form-schema&gt;
    
&lt;/wizard-schema&gt;
</programlisting></para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook:
     'item' tag
-->

    <section id="item">
      <title>item</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;item [displaytype="image"] /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>An item describes how and what to display for each element in a
        list.</para>
      </formalpara>

      <para>An item is similar to a form-schema, but it's content is displayed
      in a list body, and possibly provided with buttons for removing the item
      from a list or moving it up and down if an order was specified.</para>

      <para>The fields within the &lt;item&gt; tag assume that the object that
      is to be displayed or edited is the related object from a list (not the
      relation). So in a list of 'news' objects accessed through the 'posrel'
      role, the field with name "title" displays the title of the related news
      object.</para>

      <para>If you want to display a field from the relation you need to
      specify a fdatapath instead. i.e. to display the "pos" field of a posrel
      relation:</para>

      <para><programlisting format="linespecific">
  &lt;field fdatapath="field[@name='pos']" ftype="data" /&gt;
  </programlisting></para>

      <para>You can also specify a field from the related object with a
      fdatapath, like this:</para>

      <para><programlisting format="linespecific">
  &lt;field fdatapath="object/field[@name='title']" /&gt;
  </programlisting></para>

      <para>Which is the same as:</para>

      <para><programlisting format="linespecific">
  &lt;field name="title" /&gt;
  </programlisting></para>

      <formalpara>
        <title>Required Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para><variablelist>
            <varlistentry>
              <term>displaytype</term>

              <listitem>
                <para>The displaytype attribute can be specified if you desire
                the item to be shown in a special way. The stylesheet used to
                craete wizard pages (wizard.xsl) should be altered so it
                recognizes the displaytype (otherwise it will be
                ignored).</para>

                <para>The default stylesheet provides the displaytype "image"
                which assumes the object to be shown is an image object. It
                adds a thumbnail of the image to the item and sdiplays any
                addiitonal field next to it.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="title">&lt;title /&gt;</link></term>

              <listitem>
                <para>The title of the item. Normally ignored.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="description">&lt;description
              /&gt;</link></term>

              <listitem>
                <para>The description of the item. Normally ignored.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="field">&lt;field /&gt;</link></term>

              <listitem>
                <para>The presentation of an object field in the item. You can
                define more than one field.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="fieldset">&lt;fieldset /&gt;</link></term>

              <listitem>
                <para>A set of fields to present in the item. You can define
                more than one fieldset.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="list">list</link></term>

              <listitem>
                <para>The presentation of a list of relations in the item,
                related to the related objectd isplayd in the item. You can
                define more than one list. Note that lists in an item may show
                awkard depending on the wizard stylesheet used.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="list">list</link></term>

              <listitem>
                <para>The list providing the data.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;list role="related" destination="categories" orderby="name" hidecommand="move-up|move-down"&gt;

  &lt;title&gt;Category&lt;/title&gt;
  &lt;item&gt;
    &lt;field name="name" ftype="data" /&gt;
    &lt;field name="description" ftype="data" /&gt;
   &lt;/item&gt;

  &lt;command name="search" nodepath="categories" fields="name,description" orderby="name" age="-1" &gt;
    &lt;search-filter&gt;
      &lt;name&gt;Name contains&lt;/name&gt;
      &lt;search-fields&gt;name&lt;/search-fields&gt;
    &lt;/search-filter&gt;
  &lt;/command&gt;

  &lt;action type="create"&gt;
    &lt;relation role="related" destinationtype="categories" /&gt;
  &lt;/action&gt;

&lt;/list&gt;   </programlisting></para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook:
     'list' tag
  -->

    <section id="list">
      <title>list</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;list [role="{role}"] [destinationtype="{objecttype}"] [searchdir="source|destination|both|all|either"]
        [fdatapath="{xpath}"] [fparentdatapath="{xpath}"]
        [ordertype="|inverse|string|number|inverse string|inverse number"] [orderby="{xpath|fieldname}"]
        [minoccurs="{number}"] [maxoccurs="{number}"]
        [hidecommand="{commandlist}"] /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>A list displays a set of related nodes, and provides means to
        edit this list - either by adding items to or removing items from the
        list, or by editing items directly. Lists can be sorted, and various
        commands can be added to allow a search for new objects to add,
        subwizards to call, or new empty objects to be created and inserted in
        the list.</para>
      </formalpara>

      <para>Lists are similar to fields in that they select a certain element
      from the data document. In particular, List select relation nodes. The
      attributes of as list provide a filter with which the wizard selects
      relations, relative to the object that has focus (generally the main
      object). The filter can be set by specifying role of the relation or the
      destinationtype, but it is also possible to make a more complex filter,
      by providing an xpath using the fdatapath attribute.</para>

      <para>An example of using role/destinationtype is the following:
      <programlisting format="linespecific">
&lt;list role="posrel" destinationtype="news" &gt;
  &lt;item&gt;
    &lt;field name="title" ftype="data" /&gt;
  &lt;/item&gt;
&lt;/list&gt;
</programlisting> Which selects all 'posrel' relations to 'news' objects (seen
      from the current object), and shows the related objects title field. The
      list only shows those relations loaded or created by the wizard using
      the action tags.</para>

      <para>You can also obtain the list noted above using the fdatapath
      attribute. In that case, you specify an xpath, relative from the current
      object, as follows: <programlisting format="linespecific">
&lt;list fdatapath="relation[@role='posrel' and object/@type='news']" &gt;
  &lt;item&gt;
    &lt;field name="title" ftype="data" /&gt;
  &lt;/item&gt;
&lt;/list&gt;
</programlisting> See the section <link linkend="xpathexpressions">XPath
      Expressions and Wizard Variables</link> for more info on using
      xpaths.</para>

      <para>Displaying content is done by specifying an item tag inside the
      list. The item can contain field objects and other lists, with which you
      can display or edit the object's or the relation's fields.</para>

      <note>
        <para>While the list 'selects' relations (in the example, the posrel
        relation), the fields within the &lt;item&gt; tag assume that the
        object that is to be displayed or edited is the related object (in the
        example, the news item). See the <link
        linkend="title">&lt;item&gt;</link> tag for more info.</para>
      </note>

      <formalpara>
        <title>Required Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para><variablelist>
            <varlistentry>
              <term>destinationtype</term>

              <listitem>
                <para>The destination type of a related object. This filter is
                combined with 'role' and 'searchdir' to select the objects to
                show in the list.</para>

                <note>
                  <para>In MMBase 1.6.3 or lower, this attribute is called
                  'destination'. While you can still use the 'destination'
                  attribute in 1.6.4, you should consider using the
                  'destinationtype' attribute instead.</para>
                </note>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>role</term>

              <listitem>
                <para>The role of the relation. This filter is used combined
                with 'destination' and 'searchdir' to select the objects to
                show in the list.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>searchdir</term>

              <listitem>
                <para>The direction to follow the relation in. You can specify
                the values 'source', 'destination', or 'both'. 'Source' and
                'destination' in this context refer to the directionality of
                the relation. Each relation in mmbase has a 'source' (where
                the relation starts) and a 'destination' (where the relation
                ends). Most of the time this directionality is not of import.
                You can follow relations either way without worrying on
                directionality, and most of the time only one relation is
                possible between two object types (so specifying
                destinationtype is often enough). In some cases you may have
                more possible relations (say, when you relate objects of the
                same type, i.e. a pool hierarchy). If you want to narrow down
                the selection based on direction of the relation, you specify
                searchdir.</para>

                <para>If you specify 'source', only those relations are
                returned where the 'current' object is the destination object
                (and the related objects are the 'source'). Specifying
                'destination' only returns those relations are returned where
                the 'current' object is the source object. 'Both' returns all
                relations.</para>

                <para>This filter is used combined with 'role' and
                'destination' to select the objects to show in the
                list.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>fdatapath</term>

              <listitem>
                <para>The xpath describing the relations whose objects to show
                in this list. Note that if you specify fdatapath, you cannot
                use destination, role, or searchdir.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>fparentdatapath</term>

              <listitem>
                <para>The xpath describing the parent object of the list. The
                value of this path is used when adding new relations (using
                the <link linkend="action_add">add</link> or <link
                linkend="action_create">create actions</link>), as the parent
                object of the list is the node new relations are added
                to.</para>

                <para>Normally, the parent of a list is automatically
                determined. In general, it will be the object that has focus
                when the list is created - i.e. the main wizard object for a
                normal list, or an object identified by an 'item' tag, when
                using a list-within-a-list. Generally you do not have to
                specify this attribute.</para>

                <para>However, if you specify a fdatapath attribute, it is
                possible to obtain a list of relations who are not the
                children of the focus object. In that case, if you want to be
                able to create new relations, you need to add the
                fparentdatapath to point out the parent object.</para>

                <para>For example, suppose you use an 'employee' object, that
                contains contract data. It is related to one 'people' object
                (containing person data), which is connected to several
                'contact' objects, containing alternate email addresses. If
                you want to edit the emailaddresses directly from the
                'employee' object, you can dot so as follows: <programlisting
                format="linespecific">
&lt;list fdatapath="relation/object[@type='people']/relation[object/@type='email']" fparentdatapath="relation/object[@type='people']" &gt;
  &lt;item&gt;
    &lt;field name="email" /&gt;
  &lt;/item&gt;

  &lt;command name="insert" /&gt;

  &lt;action type="create"&gt;
    &lt;relation role="related"&gt;
      &lt;object type="email" /&gt;
    &lt;/relation&gt;
  &lt;/action&gt;
&lt;/list&gt;
</programlisting> This tag selects all email objects related to the people
                object related to the main (employee) object. By specifying
                the fparentdatapath, we can now add new email address, and
                they will be added to the correct object (that is, to the
                people object, rather than the employee object).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>orderby</term>

              <listitem>
                <para>The field on which to order the list. By default, a list
                is unordered, and newly added items are added at the end of
                the list. By specifying a field you can order the list as you
                wish. The value of orderby can either be a fieldname of the
                related node, or a xpath.</para>

                <para>For instance, using a fieldname: <programlisting
                format="linespecific">
&lt;list role="posrel" destinationtype="email" orderby="title" hidecommand="move-up|move-down" &gt;
  ...
&lt;/list&gt;
</programlisting> will sort the list on the title of the related email
                objects. You can also add 'inverse' to the ordertpye attribute
                to inverse the sort-order. <programlisting
                format="linespecific">
&lt;list role="posrel" destinationtype="email" orderby="title" ordertype="inverse" &gt;
  ...
&lt;/list&gt;
</programlisting> To sort on inverse alphabetical order.</para>

                <para>If the ordering need be on another property, such as the
                field of a relation or the number of a node, you specify an
                xpath Take into account that the xpath is relative to the
                relation selected by the list (and not to the related node).
                For instance: <programlisting format="linespecific">
&lt;list role="posrel" destinationtype="email" ordertype="number" orderby="object/@number" hidecommand="move-up|move-down" &gt;
  ...
&lt;/list&gt;
</programlisting> will sort the list on the number of the related email
                objects, where as: <programlisting format="linespecific">
&lt;list role="posrel" destinationtype="email" ordertype="number" orderby="@number" hidecommand="move-up|move-down" &gt;
  ...
&lt;/list&gt;
</programlisting> will sort the list on the number of the relations (the
                posrel).</para>

                <para>Finally: <programlisting format="linespecific">
&lt;list role="posrel" destinationtype="email" ordertype="number" orderby="field[@name='pos']" &gt;
  ...
&lt;/list&gt;
</programlisting> will sort the list on the number of the relations (the
                posrel).</para>

                <para>When specifying a sort order, the wizard will
                automatically make up/down buttons that allow you to change
                the order of the objects in a list. The ordering is rather
                crude, as it merely switches the value of the 'orderby' field
                between objects. As such, when you order a list on a field you
                do not want to have changed (such as the title field of a
                newsitem or the number field, as in the examples above), you
                should disable these buttons using the hidecommand
                attribute.</para>

                <para>Also note that you if the order field is a numerical
                value, you will need to specify this using the ordertype
                attribute.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>ordertype</term>

              <listitem>
                <para>The type of the orderby field. Possible values are
                <token>string</token> and <token>number</token>. This
                attribute determines whether sorting takes place on lexical or
                numerical value. I.e., with ordertype="string", the value '12'
                will come after '100'. With ordertype="number", the value '12'
                will come before '100'.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>minoccurs</term>

              <listitem>
                <para>The minimum number of objects that should be in this
                list. If the list contains less than the indicated number, the
                wizard will disable the save button. The default minimum is 0
                (no) objects.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>maxoccurs</term>

              <listitem>
                <para>The maximum number of objects that are allowed in this
                list. If the list contains more than the indicated number, the
                wizard will disable the save button. This attribute can be a
                number or the character '*' (infinite). The default maximum is
                infinite.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>hidecommand</term>

              <listitem>
                <para>A list of commands that should NOT be made available in
                the list. The attributes contains the command names, separated
                by a '|' character. The commands that can be turned off are
                <token>move-up</token>, <token>move-down</token>,
                <token>delete-item</token>, and <token>add-item</token>. By
                default, all commands are active when appropriate.</para>

                <note>
                  <para>The command can be used to turn off the
                  move-up/move-down buttons when you want to sort the list
                  using a fixed field.</para>
                </note>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="title">&lt;title /&gt;</link></term>

              <listitem>
                <para>The title of a list, often displayed as a caption or
                prompt</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="description">description</link></term>

              <listitem>
                <para>The description of a list, often shown as a help text in
                for instance a roll-over text</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="action">action</link></term>

              <listitem>
                <para>Defines how to manipulate a list when creating or
                deleting list items. Possible actions are <link
                linkend="action-add">add</link> (add an existing object to the
                list) <link linkend="action-create">create</link> (create a
                new object and add it), and <link
                linkend="action-delete">delete</link> (delete an
                object)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="command">command</link></term>

              <listitem>
                <para>Defines ways to manipulate (add data) to the list.
                Possible commands are <link
                linkend="command-search">search</link> (search for an object
                to include in the list), <link
                linkend="command-insert">insert</link> (create a new empty
                object and add it to the list), and <link
                linkend="command-startwizard">startwizard</link> (call a
                subwizard to create a new object to add to the list).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="item">item</link></term>

              <listitem>
                <para>Item determines how a show a related object. It is
                similar to a <link linkend="item">form-schema</link>, in that
                it can contain fields and lists.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para><variablelist>
            <varlistentry>
              <term><link
              linkend="form-schema">&lt;wizard-schema&gt;</link></term>

              <listitem>
                <para>A representation of a form in the wizard.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="item">item</link></term>

              <listitem>
                <para>An item in a (higher) list.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;list role="related" destination="categories" orderby="name" hidecommand="move-up|move-down"&gt;

  &lt;title&gt;Category&lt;/title&gt;
  &lt;item&gt;
    &lt;field name="name" ftype="data" /&gt;
    &lt;field name="description" ftype="data" /&gt;
  &lt;/item&gt;

  &lt;command name="search" nodepath="categories" fields="name,description" orderby="name" age="-1" &gt;
    &lt;search-filter&gt;
      &lt;name&gt;Name contains&lt;/name&gt;
      &lt;search-fields&gt;name&lt;/search-fields&gt;
    &lt;/search-filter&gt;
  &lt;/command&gt;

  &lt;action type="create"&gt;
    &lt;relation role="related" destinationtype="categories" /&gt;
  &lt;/action&gt;

&lt;/list&gt;   </programlisting></para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook: 
     'object' tag
-->

    <section id="object">
      <title>object</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;object [type="{objecttype}"] /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>TODO</para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook: 
     'step' tag
-->

    <section id="step">
      <title>step</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;step form-schema="{form-schema-id" /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>A step in a wizard, defining a form to run. the position of a
        step in the parent steps tag determines the place of the form in the
        wizard.</para>
      </formalpara>

      <formalpara>
        <title>Required Attributes</title>

        <para><variablelist>
            <varlistentry>
              <term>form-schema</term>

              <listitem>
                <para>The id of a form-schema in this wizard.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="steps">&lt;steps&gt;</link></term>

              <listitem>
                <para>Determines the order of forms in a wizard.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para>See <link linkend="steps">steps</link></para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook: 
     'steps' tag
-->

    <section id="steps">
      <title>steps</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;steps /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>A list of step tags, listing the order in which a wizard's forms
        need to be shown (one step is similar to one form). If you do not
        supply a steps tag, the wizard assumes that forms need to be shown in
        the order in which they are defined in the wizard. You generally do
        not need a steps tag.</para>
      </formalpara>

      <formalpara>
        <title>Required Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="step">&lt;step /&gt;</link></term>

              <listitem>
                <para>A step detailing a form to show. A steps tag should
                contain one or more step tags.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para><variablelist>
            <varlistentry>
              <term><link
              linkend="wizard-schema">&lt;wizard-schema&gt;</link></term>

              <listitem>
                <para>The wizard schema root.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;wizard-schema id="my_wizard"&gt;
    &lt;title&gt;Wizard-Title&lt;/title&gt;

    &lt;steps&gt; 
        &lt;step form-schema="edit_news" /&gt;
        &lt;step form-schema="add_info" /&gt;
        &lt;step form-schema="publish" /&gt;
    &lt;/steps&gt;
    
    &lt;form-schema id="edit_news"&gt;
        &lt;field name="firstname"&gt;
            &lt;prompt&gt;Your Firstname&lt;/prompt&gt;
        &lt;/field&gt;
    &lt;/form-schema&gt;
    
    &lt;form-schema id="add_info"&gt;
      ...
    &lt;/form-schema&gt;
    
    &lt;form-schema id="publish"&gt;
      ...
    &lt;/form-schema&gt;

&lt;/wizard-schema&gt;
</programlisting></para>
      </formalpara>
    </section>

    <!-- Include file for the editwizard reference docbook: 
     'wizard-schema' tag
-->

    <section id="wizard-schema">
      <title>wizard-schema</title>

      <formalpara>
        <title>Syntax</title>

        <para><programlisting>&lt;wizard-schema [ id="{wizard_schema_id}" ] /&gt;</programlisting></para>
      </formalpara>

      <formalpara>
        <title>Usage</title>

        <para>This is the root-node of a wizard. Always use a wizard-node to
        start a wizard.</para>
      </formalpara>

      <formalpara>
        <title>Required Attributes</title>

        <para>None</para>
      </formalpara>

      <formalpara>
        <title>Optional Attributes</title>

        <para><variablelist>
            <varlistentry>
              <term>id</term>

              <listitem>
                <para>The identifier of the wizard. Not used at this
                time.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Required Child Nodes</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="title">&lt;title /&gt;</link></term>

              <listitem>
                <para>Title of the wizard.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="form-schema">&lt;form-schema
              /&gt;</link></term>

              <listitem>
                <para>One or more forms for editing</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Optional Child Nodes</title>

        <para><variablelist>
            <varlistentry>
              <term><link linkend="action-create">&lt;action type="create"
              /&gt;</link></term>

              <listitem>
                <para>Instructions for creating a new node (by default you
                cannot create a node)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="action-delete">&lt;action type="delete"
              /&gt;</link></term>

              <listitem>
                <para>Instructions for deleting a node (by default you cannot
                delete a node)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="action-load">&lt;action type="load"
              /&gt;</link></term>

              <listitem>
                <para>Instructions for loading data of an node to edit,
                including possible related nodes (bt default load a node and
                all its fields)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="description">&lt;description
              /&gt;</link></term>

              <listitem>
                <para>Description of the wizard.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="lists">&lt;lists /&gt;</link></term>

              <listitem>
                <para>Define enumerated lists to use in the wizard.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term><link linkend="steps">&lt;steps /&gt;</link></term>

              <listitem>
                <para>Orders form-schemas in a certain order (default order is
                the order of forms as defined in the wizard).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>&lt;task-description /&gt;</term>

              <listitem>
                <para>Description of the wizard. Obsolete. use <link
                linkend="description">&lt;description /&gt;</link></para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Possible Parents</title>

        <para>None, this is the root element.</para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para><programlisting format="linespecific">
&lt;wizard-schema id="my_wizard"&gt;
    &lt;title&gt;Wizard-Title&lt;/title&gt;
    &lt;form-schema id="step1"&gt;
        &lt;field name="firstname"&gt;
            &lt;prompt&gt;Your Firstname&lt;/prompt&gt;
        &lt;/field&gt;
    &lt;/form-schema&gt;
&lt;/wizard-schema&gt;
</programlisting></para>
      </formalpara>
    </section>
  </section>

  <section id="syntax">
    <title>Syntax reference</title>

    <variablelist>
      <title>object (inside action type="create")</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;object type="[buildername]" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Inside a create-action, you can place an object-node to define
          what should be created within mmbase if the create-action is
          performed. With this node, you can define what object should be
          created, what values should be placed in what fields, and you can
          define possible new relations that should be created.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>type="[buildername]"</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>See needed attributes.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>&lt;relation /&gt; If a relation node is placed inside an
          objectnode, a relation is created relating the object defined by the
          &lt;object /&gt; node and some other object (eg.: another to-be
          created object or an existing one.)</para>

          <para>&lt;field /&gt; In the field nodes inside the object nodes,
          the user can define the defaultvalues of the designated fields. Eg.:
          &lt;field name="firstname"&gt;Enter your
          firstname&lt;/field&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>&lt;action type="create" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;object type="news"&gt;
  &lt;relation destination="13234" role="related" /&gt;
  &lt;relation role="posrel"&gt;
    &lt;field name="pos"&gt;42&lt;/field&gt;
    &lt;object type="images"&gt;
      &lt;field name="title"&gt;new image&lt;/field&gt;
    &lt;/object&gt;
  &lt;/relation&gt;
&lt;/object&gt;
            </programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>relation (inside action type="create")</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;relation /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Usually, the relation is placed inside an object-node (inside
          a create-action), or it will be placed directly inside a
          create-action. With this node, the user can make relations between
          two newly created objects, or, create a relation between one newly
          created object and an already existing object.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>destinationtype="[buildername]" This attribute is not used
          anymore. Forget it I'd say.</para>

          <para>destination="[objectnumber or alias]" Use this attribute to
          point the relation to an already existing object in the mmbase
          cloud.</para>

          <para>role="[relationname]" Use this attribute to define what kind
          of relation should be created. If omitted, the default InsRel
          relation is used. Best practice is to always define the role, eg.:
          "related" or "posrel" etc.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>&lt;object /&gt; (see also: object)</para>

          <para>&lt;field /&gt; Default values of fields of a relation itself
          can be set also. Eg.: &lt;field
          name="pos"&gt;-1&lt;/field&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>&lt;action type="create" /&gt;</para>

          <para>&lt;object /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <para>(See also: the &lt;action type="create" /&gt; example and the
          &lt;object /&gt; example.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>field (general)</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;field /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Field nodes define what form-elements will be placed in the
          wizard. This fieldnodes in the xml are an important part of the
          wizard's definition. For detailed information on what fieldtypes
          need what kind of settings, see the other fielddefinitions in the
          reference. Note: the field nodes that can be placed inside a
          relation or object node have different syntax! (See also: &lt;object
          type="create" /&gt;)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>name="[fieldname]" fdatapath, ftype, dttype, dtrequired,
          dtminlength, dtmaxlength are automatically retrieved from mmbase.
          Overriding is always possible, however.</para>

          <para>or (advanced users:) fdatapath="[xpath]" and
          ftype="[fieldtype]"</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>ftype="[fieldtype]" (line|text|enum|date|int)</para>

          <para>dttype="[datatype]"
          (string|int|date|datetime|time|html)</para>

          <para>dtminlength="[minlength]"</para>

          <para>dtmaxlength="[maxlength]"</para>

          <para>dtrequired="[true|false]"</para>

          <para>rows="[rowcount]"</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>&lt;prompt /&gt; For every field, a prompt-text can be given.
          If defined, the prompt text will be visible in front of the field in
          the wizard.</para>

          <para>&lt;description /&gt; For every field, a description can be
          given. If defined, the description will be shown "onmouseover". If
          the user move the mouse over the field, the description will be
          shown in a hint.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>&lt;form-schema /&gt;</para>

          <para>&lt;item /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;form-schema id="step1"&gt;
  &lt;title&gt;Example form&lt;/title&gt;
  &lt;field name="title" dtminlength="1" ftype="line"&gt;
    &lt;prompt&gt;News Title&lt;/prompt&gt;
    &lt;description&gt;You can enter the news-title here&lt;/description&gt;
  &lt;/field&gt;
&lt;/form-schema&gt;
            </programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>field ftype="line"</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;field ftype="line" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>A line-field will show a single-line inputfield in the wizard.
          Use them for simple text entry.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>dttype="string"</para>

          <para>dttype="int"</para>

          <para>dtminlength="[minlength]"</para>

          <para>dtmaxlength="[maxlength]"</para>

          <para>dtrequired="[true|false]"</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;field name="title" dtminlength="1"&gt;
  &lt;prompt&gt;Title&lt;/prompt&gt;
&lt;/field&gt;
            </programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>field ftype="int"</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;field ftype="int" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Use this field for number editing</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>dtmin="[minvalue]"</para>

          <para>dtmax="[maxvalue]"</para>

          <para>dtrequired="[true|false]"</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;field name="score" dtmin="100" dtmax="5000" dtrequired="true"&gt; &lt;
  &lt;prompt&gt;Enter position&lt;/prompt&gt;
  &lt;description&gt;Enter value between 100 and 5000 please.&lt;/description&gt;
&lt;/field&gt;
            </programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>field ftype="date"</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;field ftype="date" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Use this field to edit date, date-time, or time fields.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>dtmin="[mindate]"</para>

          <para>dtmax="[mindate]"</para>

          <para>dttype="[date|datetime|time]"</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;field name="start" dttype="date"&gt;
  &lt;prompt&gt;Startdate&lt;/prompt&gt;
&lt;/field&gt;
            </programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>field ftype="upload"</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;field ftype="upload" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Use this field to process uploads. Note: Make sure that you
          use this field in the right context: Usually, this field will store
          it's binary-value in a mmbase field named 'handle'. See the upload
          example for more info.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;wizard-schema&gt;
  &lt;title&gt;Image Upload&lt;/title&gt;
  &lt;action type="create"&gt;
    &lt;object type="images" /&gt;
  &lt;/action&gt;
  &lt;action type="load"&gt;
    &lt;field name="title" /&gt;
    &lt;field name="description" /&gt;
  &lt;/action&gt;
  &lt;form-schema id="step1"&gt;
    &lt;title&gt;Image upload&lt;/title&gt;
    &lt;field name="title"&gt;
      &lt;prompt&gt;Title&lt;/prompt&gt;
    &lt;/field&gt;
    &lt;field name="description" ftype="text" rows="8"&gt;
      &lt;prompt&gt;Description&lt;/prompt&gt;
    &lt;/field&gt;
    &lt;field name="handle" ftype="image" dttype="binary"&gt;
      &lt;prompt&gt;upload&lt;/prompt&gt;
    &lt;/field&gt;
  &lt;/form-schema&gt;
&lt;/wizard-schema&gt;
            </programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>field ftype="startwizard"</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;field ftype="startwizard"&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Use this field to start one wizard, from inside another
          wizard.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>objectnumber="{object/@number}"</para>

          <para>wizardname="[ name of the wizard ]"</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>inline="[true|false]" an inline startwizard will replace the
          current wizard to create the new object and come back when ready, a
          not-inline startwizard will pop-up a window to create the new object
          .</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>None.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>None.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>&lt;item /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">&lt;command name="startwizard" inline="false" wizardname="tasks/myurls" objectnumber="new"/&gt; &lt;command name="startwizard" inline="true" wizardname="tasks/myurls" objectnumber="new"/&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>field ftype="data"</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;field ftype="data" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Use this field to show values, but don't make it editable. In
          other words: use this to make a read-only field.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;field name="firstname" ftype="data"&gt;
 &lt;prompt&gt;Your firstname is:&lt;/prompt&gt;
&lt;/field&gt;
            </programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>field ftype="enum"</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;field ftype="enum" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Use this field to make a "dropdown" inputfield. (In
          HTML-terms: a selectbox).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>&lt;optionlist /&gt; Use this node to define the possible
          options for the field. (see also: optionlist)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>see field (general)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
           First define an optionlist... (outside 'form-schema' see 'optionlist') 

          <programlisting format="linespecific">
&lt;lists&gt;
  &lt;optionlist name="articletypes"&gt;
  &lt;option id="1"&gt;News&lt;/option&gt;
  &lt;option id="2"&gt;Interview&lt;/option&gt;
  &lt;option id="3"&gt;Information&lt;/option&gt;
  &lt;/optionlist&gt;
&lt;/lists&gt;
            </programlisting>

           ...and then use it like this. 

          <programlisting format="linespecific">
&lt;field name="type" ftype="enum"&gt;
  &lt;prompt&gt;Articletype&lt;/prompt&gt;
  &lt;optionlist select="articletypes"/&gt;
&lt;/field&gt;
            </programlisting>

           
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>lists</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;lists /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Use this node to define optionlists in a wizard.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>None.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>&lt;optionlist /&gt; (see also:optionlist)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>See needed childnodes</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>&lt;wizard-schema /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;lists&gt;
  &lt;optionlist name="priorities"&gt;
    &lt;option id="1"&gt;Low&lt;/option&gt;
    &lt;option id="2"&gt;High&lt;/option&gt;
  &lt;/optionlist&gt;
&lt;/lists&gt;
            </programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>optionlist</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;optionlist /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Use this node to define an optionlist. It can be either a
          static list of options, or a list filled using an MMBase
          query.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>name="[optionlistname]" This optional attribute can be used if
          an optionlist is defined in a &lt;lists /&gt; node. To reference to
          the defined optionlist, you will need the optionlistname. Eg.:
          &lt;optionlist select="earlier_defined_optionlist" /&gt;</para>

          <para>optionid="field[@name='fieldname']" This optional attribute
          can be used if an underlying 'query' node is present. Of all
          matching nodes, the field with name given in 'optionid' will be used
          as the 'id' part of the option.</para>

          <para>optioncontent="field[@name='fieldname']" This optional
          attribute can be used if an underlying 'query' node is present. Of
          all matching nodes, the field with name given in 'optioncontent'
          will be used as the content part of the option.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>&lt;option
          id="[optionid]"&gt;[optionvalue_to_be_shown_in_wizard]&lt;/option&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>&lt;query&gt; This childnode can be used instead of
          &lt;option&gt; childnodes to fill the optionlist with options. The
          query has three attributes: optional 'where' and 'orderby' clauses
          and a required 'xpath' clause. The xpath can have the following
          syntax: <itemizedlist>
              <listitem>
                <para>/*@buildername, in this case a nodequery will be
                performed.</para>
              </listitem>

              <listitem>
                <para>/*@buildername,otherbuildername,..., in this case a
                multilevel query will be performed. When doing a multilevel
                query, there must be a &lt;object&gt; childnode with two
                &lt;field&gt; childnodes for the 'optionid' and
                'optioncontent' arguments of the optionlist.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>&lt;wizard-schema /&gt;</para>

          <para>&lt;field ftype="enum" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;optionlist name="role"
            optionid="field[@name='role.role']"
            optioncontent="field[@name='role.name']"&gt;
    &lt;query xpath="/*@companies,roles" where="company.number = {$origin}"&gt;
        &lt;object&gt;
            &lt;field name="role.role" /&gt;
            &lt;field name="role.name" /&gt;
        &lt;/object&gt;
    &lt;/query&gt;
&lt;/optionlist&gt;</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>command (name="search")</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;command name="search" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Use this command inside a list node to define how a user can
          search for objects and add them to a list.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Attributes (general)</term>

        <listitem>
          <para>See for detailed information how to use nodepath, startnodes,
          fields, constraints, orderby the documentation of the MMBase
          taglib.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>name="search"</para>

          <para>nodepath="[buildername_to_start_with]"</para>

          <para>fields="[fieldnames of fields to show]"</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>startnodes="[objectnumber]"</para>

          <para>age="[default age to show in search-field]" use -1 to set it
          to "any age", use 1,7,31,365 for day, week, month, year ages.</para>

          <para>constraints="[mmbase where part]"</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>&lt;prompt /&gt; Place the text to be shown in front of the
          searchfield here.</para>

          <para>&lt;search-filter /&gt; Defines what extra searchfields should
          be shown and used in the query. See also: search-filter.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>&lt;list /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;list destination="people" minoccurs="0" maxoccurs="*"&gt;
  &lt;command name="search" nodepath="people" fields="firstname,lastname" orderby="lastname" age="-1"&gt;
    &lt;prompt&gt;#Search command prompt&lt;/prompt&gt;
    &lt;search-filter&gt;
      &lt;name&gt;firstname contains&lt;/name&gt;
      &lt;search-fields&gt;firstname&lt;/search-fields&gt;
    &lt;/search-filter&gt;
    &lt;search-filter&gt;
      &lt;name&gt;lastname contains&lt;/name&gt;
      &lt;search-fields&gt;lastname&lt;/search-fields&gt;
    &lt;/search-filter&gt;
  &lt;/command&gt;
  &lt;item&gt;
    &lt;field name="firstname" &gt;
      &lt;prompt&gt;Field prompt&lt;/prompt&gt;
      &lt;description&gt;Field Description&lt;/description&gt;
    &lt;/field&gt;
  &lt;/item&gt;
  &lt;action type="create"&gt;
    &lt;relation destinationtype="people" role="related" /&gt;
  &lt;/action&gt;
&lt;/list&gt;
            </programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>search-filter</title>

      <varlistentry>
        <term>Syntax</term>

        <listitem>
          <para>&lt;search-filter /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Usage</term>

        <listitem>
          <para>Use the searchfilter to allow the user to fire a free-text
          query from the wizard. See the command name="search" example.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible attributes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Needed childnodes</term>

        <listitem>
          <para>&lt;name /&gt;</para>

          <para>&lt;search-fields /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible childnodes</term>

        <listitem>
          <para>None</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Possible parents</term>

        <listitem>
          <para>&lt;command name="search" /&gt;</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Example</term>

        <listitem>
          <programlisting format="linespecific">
&lt;search-filter&gt;
  &lt;name&gt;Naam bevat&lt;/name&gt;
  &lt;search-fields&gt;name&lt;/search-fields&gt;
&lt;/search-filter&gt;
            </programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</article>