Index: src/main/java/org/mmbase/clustering/multicast/ChangesSender.java
===================================================================
16a17
> import edu.emory.mathcs.backport.java.util.concurrent.Future;
40c41
<     private final BlockingQueue<byte[]> nodesToSend;
---
>     private final BlockingQueue nodesToSend;
62c63
<     public ChangesSender(String multicastHost, int mport, int mTTL, BlockingQueue<byte[]> nodesToSend, Statistics send) throws UnknownHostException  {
---
>     public ChangesSender(String multicastHost, int mport, int mTTL, BlockingQueue nodesToSend, Statistics send) throws UnknownHostException  {
82c83
<             ThreadPools.identify(future, "MulticastSender");
---
>             //ThreadPools.identify(future, "MulticastSender");
113c114
<                 byte[] data = nodesToSend.take();
---
>                 byte[] data = (byte[]) nodesToSend.take();
Index: src/main/java/org/mmbase/clustering/multicast/ChangesReceiver.java
===================================================================
13a14
> import edu.emory.mathcs.backport.java.util.concurrent.Future;
75c76
<                 ThreadPools.identify(future, "MulticastReceiver");
---
>                 //ThreadPools.identify(future, "MulticastReceiver");
Index: src/main/java/org/mmbase/clustering/ClusteringModule.java
===================================================================
29a30,32
>     public ClusteringModule() {
>     }
>
106c109
<         addFunction(new AbstractFunction<Statistics>("send", Parameter.emptyArray(), new ReturnType<Statistics>(Statistics.class, "Stat-structure")) {
---
>         addFunction(new AbstractFunction("send", Parameter.EMPTY, new ReturnType(Statistics.class, "Stat-structure")) {
117c120
<         addFunction(new AbstractFunction<Statistics>("receive", Parameter.emptyArray(), new ReturnType<Statistics>(Statistics.class, "Stat-structure")) {
---
>         addFunction(new AbstractFunction("receive", Parameter.EMPTY, new ReturnType(Statistics.class, "Stat-structure")) {
129c132
<         addFunction(new AbstractFunction<Integer>("numbertosend", Parameter.emptyArray(), ReturnType.INTEGER) {
---
>         addFunction(new AbstractFunction("numbertosend", Parameter.EMPTY, ReturnType.INTEGER) {
140c143
<         addFunction(new AbstractFunction<Integer>("numbertoreceive", Parameter.emptyArray(), ReturnType.INTEGER) {
---
>         addFunction(new AbstractFunction("numbertoreceive", Parameter.EMPTY, ReturnType.INTEGER) {
152c155
<         addFunction(new AbstractFunction<Void>("shutdown", Parameter.emptyArray(), ReturnType.VOID) {
---
>         addFunction(new AbstractFunction("shutdown", Parameter.EMPTY, ReturnType.VOID) {
164c167
<         addFunction(new AbstractFunction<Void>("start", Parameter.emptyArray(), ReturnType.VOID) {
---
>         addFunction(new AbstractFunction("start", Parameter.EMPTY, ReturnType.VOID) {
176c179
<         addFunction(new AbstractFunction<Boolean>("active", Parameter.emptyArray(), ReturnType.BOOLEAN) {
---
>         addFunction(new AbstractFunction("active", Parameter.EMPTY, ReturnType.BOOLEAN) {
184c187
<         addFunction(new AbstractFunction<ClusterManager>("clusterManager", Parameter.emptyArray(), new ReturnType<ClusterManager>(ClusterManager.class, "cluster manager")) {
---
>         addFunction(new AbstractFunction("clusterManager", Parameter.EMPTY, new ReturnType(ClusterManager.class, "cluster manager")) {
Index: src/main/java/org/mmbase/clustering/unicast/ChangesSender.java
===================================================================
17a18
> import edu.emory.mathcs.backport.java.util.concurrent.Future;
106c107
<             ThreadPools.identify(future, "UnicastSender");
---
>             //ThreadPools.identify(future, "UnicastSender");
Index: src/main/java/org/mmbase/clustering/unicast/ChangesReceiver.java
===================================================================
14a15
> import edu.emory.mathcs.backport.java.util.concurrent.Future;
61c62
<             ThreadPools.identify(future, "UnicastReceiver");
---
>             //ThreadPools.identify(future, "UnicastReceiver");
Index: src/main/java/org/mmbase/clustering/Converter.java
===================================================================
19c19
<         org.mmbase.util.logging.SimpleTimeStampImpl.configure("org.mmbase.clustering", "stdout,debug");
---
>         //org.mmbase.util.logging.SimpleTimeStampImpl.configure("org.mmbase.clustering", "stdout,debug");
Index: pom.xml
===================================================================
8c8
<     <artifactId>mmbase-application-parent</artifactId>
---
>     <artifactId>mmbase-parent</artifactId>
14a15,17
>
>   <version>mmbase18-${mmbase.version.number}${mmbase.version.postfix}</version>
>   <!--
15a19
>   -->
26a31
>     <java.version>1.5</java.version>
34c39
<       <groupId>org.mmbase</groupId>
---
>       <groupId>mmbase</groupId>
36c41
<       <version>${project.version}</version>
---
>       <version>1.8.8-SNAPSHOT</version>
44a50,56
>
>     <dependency>
>       <groupId>backport-util-concurrent</groupId>
>       <artifactId>backport-util-concurrent</artifactId>
>       <version>3.1</version>
>       <scope>compile</scope>
>     </dependency>
46a59,67
>   <repositories>
>     <repository>
>       <id>mmbase8</id>
>       <url>http://www.mmbase.org/maven</url>
>       <layout>legacy</layout>
>     </repository>
>   </repositories>
>
>
