<!-- ===========================================================================


Generic project build file template. 

Generates a jar for your project. 

You can also do a test. (specify test.class).
This makes sure you use the right class-path and so on.

Create a build.xml with a DOCTYPE like this:
<!DOCTYPE project 
 [ <!ENTITY base     SYSTEM "buildbase.xml" > ]
>
(point to this file)

@author Michiel Meeuwissen.

============================================================================ -->


  <!-- =================================================================== -->
  <!-- Init                                                                -->
  <!-- =================================================================== -->
  <!-- Read customized values if available -->
  <property file="../../build.properties" />
  <property file="build.properties" />
  <property name="build.compiler" value="classic" />
  <property name="optimize" value="on" />
  <property name="debug" value="off" />
  <property name="deprecation" value="on" />

  <property name="project.source.dir" location="." />
  <property name="project.build.dir"  location="./build" />
  <property name="project.javadoc.packages" value="org.mmbase.*"/>


  <property name="source.dir"   location="../.." />
  <property name="build.dir"    value="${source.dir}/build" /><!-- mmbase build dir -->
  <property name="download.dir" value="${build.dir}/download" />
  <property name="expand.dir"   value="${download.dir}/expanded" />
  <property name="mmbase.jar"    value="${build.dir}/mmbase.jar"/>
  <property name="mmbase.config" value="${build.dir}/mmbase/mmbase-webapp/WEB-INF/config"/>


  <property name="servlet.jar" value="${build.dir}/lib/servlet.jar"/>
  <property name="xalan.jar"   value="${build.dir}/lib/xalan.jar"/>
  <property name="project.name" value="a-mmbase-project" />
  <property name="project.jar.name" value="mmbase-${project.name}" />
  <property name="mmbase.classes" value="this_file_does_not_exist_and_ant_sucks" />
  <!-- specify mmbase classes to appear in the jar too, would like to use empty string on default, but this will result in copying everything in stead... -->

  <property name="tests.source.dir"   location="../../tests" />
  <property name="tests.build.dir" value="${tests.source.dir}/build" />
  <property name="tests.work.dir"    value="${tests.source.dir}/work" />

  <property name="tests.lib"       value="${tests.build.dir}/lib" />
  <property name="mmbasetest.jar"  value="${tests.lib}/mmbasetest.jar" />
  <property name="ui.class" value="junit.textui.TestRunner" />

  <property name="test.class"   value="${project.name}test.Test" />
  <property name="test.arg"     value="" />

  <property name="project.jar.dir" value="${project.build.dir}" />
  <property name="project.zip.dir" value="${project.build.dir}" />
  <property name="project.jar" value="${project.jar.dir}/${project.jar.name}.jar"/>
  <property name="project.zip" value="${project.zip.dir}/${project.jar.name}.zip"/>

  <target name="init" depends="">
    <tstamp/>
    <mkdir dir="${project.build.dir}"/>
    <property name="name" value="${project.name}"/>
    <property name="version" value="${DSTAMP}"/>
    <property name="distro"  value="1.6.0"/>
  </target>





  <!-- =================================================================== -->
  <!-- Create the project's jar file                                       -->
  <!-- =================================================================== -->

  <target name="jar.uptodatecheck">
    <uptodate property="jar.uptodate" targetfile="${project.jar}" >
      <srcfiles dir="${project.source.dir}" includes="**/*" excludes="build/**,work/**" />
    </uptodate>
  </target>

  <target name="jar.check" depends="jar.uptodatecheck" if="jar.uptodate">
    <echo message="${project.jar} is up-to-date" />
  </target>

  <target name="jar" description="Create the MMBase project jar file" 
    depends="jar.check" unless="jar.uptodate">
  
  <antcall target="compile" />
  <echo message="Copying ${mmbase.classes} to ${project.build.dir}/classes" />
  <copy todir="${project.build.dir}/classes">
    <fileset dir="${build.dir}/classes" includes="${mmbase.classes}" />
  </copy>
  
    <echo file="${project.build.dir}/manifest.mf">
Name: org/mmbase
Vendor: MMBase community
URL: http://${project.name}.mmbase.org
Comment: The MMBase Content Managment System
Version: ${distro}.${version}
Distribution: ${distro}
Build-by: ${ant.version}
Build-java-version: ${ant.java.version}
Build-compiler: ${build.compiler}
</echo>
    <echo message="creating jar" />
    <jar jarfile="${project.jar}"
         basedir="${project.build.dir}/classes"
	     includes="org/**,nl/**"
	     manifest="${project.build.dir}/manifest.mf" >
    </jar>

  </target>

  <target name="package" depends="jar">
    <echo file="${project.build.dir}/README-PACKAGE.txt">
This is the '${project.name}' package of MMBase. And this file contains generic installation instructions for such
an MMBase package.

Generally you find .jar files, which you have to place in WEB-INF/lib of your web-app (next to
mmbase.jar). Furthermore, possibly there is a config directory which contains (example) configuration
for your mmbase configuration directory (possibly in WEB-INF/config).

Other directories will normally contain jsp-templates and such which you can choose to put anywhere in your
web application.

</echo>

    <zip zipfile="${project.zip}">
       <fileset dir="${project.jar.dir}" includes="*.jar"/>
       <fileset dir="${project.build.dir}" includes="README-PACKAGE.txt"/>
       <fileset dir="${project.source.dir}">
         <patternset id="package.files" >
           <include name="**"/>
           <exclude name="*.xml" />
           <exclude name="build/**" />
           <exclude name="org/**" />
         </patternset>
       </fileset>
    </zip>          
  </target>


  <target name="compile" description="Compile the source directory"
          depends="init">

    <mkdir dir="${project.build.dir}/classes"/>
    <echo message="java version: ${ant.java.version}" />

    <echo message="copying to ${project.build.dir}" />

    <copy todir="${project.build.dir}/classes" includeEmptyDirs="false" >
      <fileset dir="${project.source.dir}">
        <include name="**/*.properties"/>
        <include name="**/LICENSE"/>
        <include name="**/*.dtd"/>
        <include name="**/*.xml"/>
        <exclude name="build/**"/>
      </fileset>
    </copy>

    <echo message="compiling" />

    <javac srcdir ="${project.source.dir}"
           destdir="${project.build.dir}/classes"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"
           excludes="${compile.excludes}"
           source="1.4"
      >
      <classpath>
        <pathelement path="${mmbase.jar}" />
        <pathelement path="${servlet.jar}" />
        <pathelement path="${xalan.jar}" />
        <pathelement path="${project.build.dir}/classes" />
      </classpath>
      <include name="**/*.java"/>
    </javac>
  </target>


  <target name="clean" description="Clean">
    <delete dir="${project.build.dir}" />
  </target>


  <target name="doc" description="Documentation" depends="javadocs">
  </target>

  <target name="javadocs" description="Documentation" depends="init">
  <mkdir dir="${project.build.dir}/${project.name}-src/docs"/>
  <mkdir dir="${project.build.dir}/${project.name}-src/docs/api"/>
  <javadoc packagenames="${project.javadoc.packages}"
    sourcepath="${project.source.dir}"
    destdir="${project.build.dir}/${project.name}-src/docs/api"
    author="true"
    version="true"
    use="false"
    noindex="true"
    windowtitle="${project.name} API"
    doctitle="${project.name}"
    maxmemory="100M"
    bottom="${project.name} build ${version}">
      <classpath>
        <pathelement path="${mmbase.jar}" />
        <pathelement path="${servlet.jar}" />
        <pathelement path="${project.build.dir}/classes" />
      </classpath>
    </javadoc>
  </target>


  <target name="test" depends="jar">   
    <ant dir="${tests.source.dir}"   target="jar" />
    <java classname="${test.class}"
      classpathref="run.classpath"
      fork="true"
      failonerror="yes">
      <jvmarg value="-Dmmbase.config=${mmbase.config}" />
      <arg    value="${test.arg}" />
      <classpath id="run.classpath">
        <fileset dir="${build.dir}/lib">
          <include name="servlet.jar"/>
        </fileset>
        <fileset dir="${project.build.dir}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/lib">
          <include name="*.jar"/>
          <include name="*.zip"/>
        </fileset>
        <fileset dir="${tests.lib}">
          <include name="*.jar"/>
          <include name="*.zip"/>
        </fileset>
      </classpath>
    </java>
  </target>
