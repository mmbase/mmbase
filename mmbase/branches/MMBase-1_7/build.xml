<!-- ===========================================================================


MMBase Build File
=================

This build file can be used to build the following from CVS or from the source
distribution:

- A MMBase source distribution.
- A MMBase binary distribution.

The main properties are source.dir and build.dir. The source.dir is expected
to have the following sub directory's (check out 'all'):

  config          (the MMBase CVS config module)
  html            (the MMBase CVS html module)
  documentation   (the MMBase CVS documentation module)
  src             (the MMBase CVS src module)

The build.dir will have the following sub directory's:

  classes             (compiled MMBase classes)
  download            (default place for the downloaded packages)
  download/extracted  (default place to extract the downloaded packages)
  mmbase              (the MMBase binary distribution)
  mmbase-src          (the MMBase source distribution)

Compiler
========

Change the property build.compiler to 'modern' for JDK1.3 or to 'jikes' for Jikes.

Ant
===

This build file is tested with Ant 1.4. See <http://jakarta.apache.org/> for
more information about the Ant build tool.

Automated downloads
===================

To use the targets that depend on automated downloads you first have to download
NetComponents and put the NetComponents.jar in your Ant lib directory.
NetComponents can be found at:

  http://www.savarese.org/oro/downloads/index.html#NetComponents

Use the property 'download.dir' if the download has to be shared by
several MMBase-checkouts.

============================================================================ -->

<project name="MMBase" default="usage" basedir=".">

  <!-- =================================================================== -->
  <!-- Init                                                                -->
  <!-- =================================================================== -->
  <!-- Read customized values if available -->
  <property file="build.properties"/>
  <!-- Default values for properties that can be customized -->


  <property name="source.dir"   location="." />
  <property name="build.dir"    value="${source.dir}/build" />
  <property name="download.dir" value="${build.dir}/download" />
  <property name="expand.dir"   value="${download.dir}/expanded" />
  <property name="download.zip" value="mmbase-downloads.zip"  />

  <!-- project defaults -->  
  <property file="build.properties.default"/>

  <property file="build.properties.version"/>

  <property name="build.compiler" value="classic"/>
  <property name="optimize" value="on"/>
  <property name="debug" value="on"/>
  <property name="deprecation" value="off"/>
  <property name="javadoc.cleaning" value="true"/>
  <property name="javadoc.packages" value="org.mmbase.*"/>
  <property name="mmcidoc.packages" value="org.mmbase.bridge,org.mmbase.storage.search"/>

  <!-- documentation related settings -->
  <property name="build.documentation" value="false" />
  <property name="documentation.home"  value="${source.dir}/documentation" />
  <property name="documentation.builders.language" value="en" />
  <!-- try xhtml/chunk.xsl (in build.properties) if you like chunks -->
  <!-- property name="docbook.stylesheet" value="xhtml/chunk.xsl" /-->
  <property name="docbook.stylesheet" value="xhtml/docbook.xsl" />

  <!-- applications related setting -->
  <property name="applications.home"  value="${source.dir}/applications" />


  <property name="source-config.dir"         location="${source.dir}/config"/>
  <property name="source-config-builders.dir" location="${source.dir}/config/builders;${source.dir}/config/applications"/>
  <!-- Don't change the following properties unless you know what you're doing -->
  <property name="source-html.dir"           location="${source.dir}/html"/>
  <property name="source-documentation.dir"  location="${source.dir}/documentation" />
  <property name="source-src.dir"       location="${source.dir}/src"/>
  <property name="generated-source-src.dir"       location="${build.dir}/src"/>
  <property name="webapp.dir"           value="${build.dir}/mmbase/mmbase-webapp"/>
  <property name="mmdocs.dir"           value="${webapp.dir}/mmdocs"/>
  <property name="web.dir"              value="${webapp.dir}/WEB-INF"/>
  <property name="release.lib.dir"      value="${web.dir}/lib"/>
  <property name="compile.lib.dir"      value="${build.dir}/lib"/>
  <property name="optional.lib.dir"     value="${source.dir}" /> <!-- just a dir that does not contain libs..-->
  <property name="mmbase.jar"           value="${build.dir}/mmbase.jar"/>
  <property name="jar.download"           value="http://www.mmbase.org/download/jars"/>

  <target name="init" depends="check.dir.all">
    <condition property="do.documentation">
       <equals arg1="${build.documentation}" arg2="true" />
    </condition>
    <tstamp/>
    <mkdir dir="${build.dir}"/>
    <property name="name" value="mmbase"/>
    <property name="builddate" value="${DSTAMP}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage" description="Help on usage">
    <echo message=""/>
    <echo message="MMBase Build file"/>
    <echo message="*************************************************************"/>
    <echo message=""/>
    <echo message="Use the -projecthelp option to see a short description for"/>
    <echo message="the main targets"/>
    <echo message=""/>
    <echo message="*************************************************************"/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Create the source distribution                                      -->
  <!-- =================================================================== -->

  <target name="srcdist.documentation" if="do.documentation">
    <antcall target="documentation" />
    <antcall target="javadocs" />
  </target>

  <target name="srcdist" description="Create the source distribution"
          depends="init">

    <antcall target="srcdist.documentation" />
    <!-- copy the java-sources -->
    <mkdir dir="${build.dir}/mmbase-src/src"/>
    <copy todir="${build.dir}/mmbase-src/src">
      <fileset dir="${source-src.dir}" defaultexcludes="yes"/>
    </copy>

    <!-- copy the documentation-sources -->
    <mkdir dir="${build.dir}/mmbase-src/src/documentation"/>
    <copy todir="${build.dir}/mmbase-src/src/documentation">
      <fileset dir="${source-documentation.dir}" defaultexcludes="yes"/>
    </copy>

    <!-- copy the config files -->
    <mkdir dir="${build.dir}/mmbase-src/config"/>
    <copy todir="${build.dir}/mmbase-src/config">
      <fileset dir="${source-config.dir}" defaultexcludes="yes"/>
    </copy>
    <!-- copy the html files -->
    <mkdir dir="${build.dir}/mmbase-src/html"/>
    <copy todir="${build.dir}/mmbase-src/html">
      <fileset dir="${source-html.dir}" defaultexcludes="yes"/>
    </copy>
    <!-- copy the application files -->
    <mkdir dir="${build.dir}/mmbase-src/applications"/>
    <copy todir="${build.dir}/mmbase-src/applications">
      <fileset dir="${applications.home}" defaultexcludes="yes">
        <exclude name="**/build/**" />
      </fileset>
    </copy>
    <!-- copy the test files -->
    <mkdir dir="${build.dir}/mmbase-src/tests"/>
    <copy todir="${build.dir}/mmbase-src/tests">
      <fileset dir="${source.dir}/tests" defaultexcludes="yes">
        <exclude name="**/build/**" />
      </fileset>
    </copy>


    <!-- copy the build file -->
    <copy file="${source.dir}/build.xml"
          todir="${build.dir}/mmbase-src"/>
    <copy file="${source.dir}/build-example.properties"
          tofile="${build.dir}/mmbase-src/build-example.properties"/>

    <copy file="${source.dir}/build.properties.default"
          tofile="${build.dir}/mmbase-src/build.properties.default"/>

    <!-- create build.properties needed for the srcdist -->
    <echo file="${build.dir}/mmbase-src/build.properties">
source-documentation.dir=src/documentation
documentation.home=src/documentation
build.compiler=modern
optimize=on
debug=on
deprecation=on
distro.version=${distro.version}
builddate=${builddate}
    </echo>

    <!-- copy a readme and other basic docs from documentation dir -->
    <copy todir="${build.dir}/mmbase-src" >
      <fileset dir="${source-documentation.dir}/releases"
               defaultexcludes="yes">
        <exclude name="legal"/>
        <include name="*.txt"/>
      </fileset>
    </copy>

    <!-- copy the documentation -->
    <mkdir dir="${build.dir}/mmbase-src/mmdocs"/>
    <copy todir="${build.dir}/mmbase-src/mmdocs/">
      <fileset dir="${mmdocs.dir}"
               defaultexcludes="yes" />
    </copy>

    <copy file="${source-documentation.dir}/releases/legal/LICENSE.mmbase"
          tofile="${build.dir}/mmbase-src/LICENSE"/>

    <!-- zip -->
    <zip zipfile="${build.dir}/${name}-src-${distro.version}.${builddate}.zip">
     <zipfileset dir="${build.dir}/mmbase-src" prefix="${name}-src-${builddate}"
       includes="**" />
    </zip>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the source distribution                                       -->
  <!-- =================================================================== -->
  <target name="clean.srcdist" description="Clean the source distribution">
    <delete dir="${build.dir}/mmbase-src"/>
  </target>


  <!-- =================================================================== -->
  <!-- Create the binary distribution                                      -->
  <!-- =================================================================== -->
  <target name="bindist"  description="Create the binary distribution"
          depends="lib.release,web,applications">

    <!-- copy a readme and other basic docs from documentation dir -->
    <copy todir="${build.dir}/mmbase" >
      <fileset dir="${source-documentation.dir}/releases"
               defaultexcludes="yes">
        <exclude name="legal"/>
        <exclude name="building.txt"/>
        <include name="*.txt"/>
      </fileset>
    </copy>
    <copy file="${source-documentation.dir}/releases/legal/LICENSE.mmbase"
          tofile="${build.dir}/mmbase/LICENSE"/>

    <!-- zip -->
    <zip zipfile="${build.dir}/${name}-${distro.version}.${builddate}.zip">
     <zipfileset dir="${build.dir}/mmbase" prefix="${name}-${builddate}"
       includes="**" />
    </zip>

  </target>


  <!-- =============================================================================== -->
  <!-- Create al distro formats (serves as overview for those)                         -->
  <!-- =============================================================================== -->
  <target name="distros" description="Create the several mmbase-distros"
          depends="bindist,srcdist,wars,lib.compile.zip" />

  <!-- =================================================================== -->
  <!-- Clean the binary distribution                                       -->
  <!-- =================================================================== -->
  <target name="clean.bindist" description="Clean the binary distribution"
          depends="clean.compile">
    <delete dir="${build.dir}/mmbase"/>
  </target>


  <!-- =================================================================== -->
  <!-- Create the lib directories                                          -->
  <!-- =================================================================== -->
  <target
    name="lib.release"
    description="Create the lib directory"
    depends="init,init.get,jar">
    <!--depends="init,expand.xalan,expand.log4j,expand.hsqldb,expand.jai,jar"-->

    <mkdir dir="${release.lib.dir}" />
    <copy file="${xalan.jar}"          tofile="${release.lib.dir}/xalan.renametojar" />
    <copy file="${xerces.jar}"         tofile="${release.lib.dir}/xerces.renametojar" />
    <copy file="${xml-apis.jar}"       tofile="${release.lib.dir}/xml-apis.renametojar" />
    <copy file="${log4j.jar}"          tofile="${release.lib.dir}/log4j.jar" />
    <copy file="${hsqldb.jar}"         todir="${release.lib.dir}" />
    <copy file="${jai_codec.jar}"      todir="${release.lib.dir}" />
    <copy file="${jai_core.jar}"       todir="${release.lib.dir}" />
    <copy file="${javamail.jar}"       todir="${release.lib.dir}" />
    <copy file="${javaactivation.jar}"  todir="${release.lib.dir}" />
    <copy file="${mmbase.jar}"         todir="${release.lib.dir}" />
    
    <!-- copy licenses for included jars -->
    <copy todir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/lib/legal">
      <fileset dir="${source-documentation.dir}/releases/legal"/>
    </copy>
  </target>

  <target name="lib.compile" description="Create the lib directory, containing the libraries necessary for compilation"
          depends="init,init.get">
          <!--depends="init,expand.servlet,expand.xalan,expand.jai,expand.log4j,expand.javamail,expand.javaactivation,get.jdbc">-->

    <mkdir dir="${compile.lib.dir}"/>
    <copy file="${xalan.jar}"     todir="${compile.lib.dir}" />
    <copy file="${xerces.jar}"    todir="${compile.lib.dir}" />
    <copy file="${xml-apis.jar}"  todir="${compile.lib.dir}" />
    <copy file="${servlet.jar}"   todir="${compile.lib.dir}" />

    <copy file="${jai_codec.jar}" todir="${compile.lib.dir}" />
    <copy file="${jai_core.jar}"  todir="${compile.lib.dir}" />
    <copy file="${log4j.jar}"     tofile="${compile.lib.dir}/log4j.jar" />
    <copy file="${javamail.jar}"  todir="${compile.lib.dir}" />
    <copy file="${javaactivation.jar}"  todir="${compile.lib.dir}" />
  </target>

  <target name="lib.compile.zip" depends="lib.compile" description="Packages the download dir." >
    <zip zipfile="${build.dir}/${download.zip}" >
      <zipfileset dir="${download.dir}" prefix="">
        <include name="**" />
        <exclude name="expanded/**"/>
      </zipfileset>
    </zip>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the lib directories                                             -->
  <!-- =================================================================== -->

  <target name="clean.lib" description="Clean the lib directory">
     <delete dir="${release.lib.dir}" />
     <delete dir="${compile.lib.dir}" />
  </target>

  <!-- =================================================================== -->
  <!-- Check the directory structure                                       -->
  <!-- =================================================================== -->
  <target name="init.check.dir">
    <available property="dir.config.present"
               file="${source-config.dir}"/>
    <available property="dir.html.present"
               file="${source-html.dir}"/>
    <available property="dir.src.present"
               file="${source-src.dir}"/>
    <available property="dir.org.present"
               file="${source-src.dir}/org"/>
    <available property="dir.mmbase.present"
               file="${source-src.dir}/org/mmbase"/>
  </target>

  <target name="check.dir.config" depends="init.check.dir"
          unless="dir.config.present">
    <property name="source.dir.invalid" value="config"/>
  </target>

  <target name="check.dir.html" depends="init.check.dir"
          unless="dir.html.present">
    <property name="source.dir.invalid" value="html"/>
  </target>

  <target name="check.dir.src" depends="init.check.dir"
          unless="dir.src.present">
    <property name="source.dir.invalid" value="src"/>
  </target>

  <target name="check.dir.org" depends="init.check.dir"
          unless="dir.org.present">
    <property name="source.dir.invalid" value="org"/>
  </target>

  <target name="check.dir.mmbase" depends="init.check.dir"
          unless="dir.mmbase.present">
    <property name="source.dir.invalid" value="mmbase"/>
   </target>

  <target name="check.dir.all"
          depends="check.dir.config,check.dir.html,check.dir.src,check.dir.org,
                   check.dir.mmbase" if="source.dir.invalid">
    <echo message=""/>
    <echo message="Source directory to build from doesn't contain the needed"/>
    <echo message="directory's or the source.dir property is pointing to the"/>
    <echo message="wrong directory. The source.dir property is pointing to:"/>
    <echo message=""/>
    <echo message="  ${source.dir}"/>
    <echo message=""/>
    <echo message="And should have the following sub directory's:"/>
    <echo message=""/>
    <echo message="  config          (the MMBase CVS config module)"/>
    <echo message="  html            (the MMBase CVS html module)"/>
    <echo message="  src/org/mmbase  (the MMBase CVS mmbase module)"/>
    <echo message=""/>
    <echo message="Directory that could not be found:"/>
    <echo message=""/>
    <echo message="  ${source.dir.invalid}"/>
    <echo message=""/>
    <fail message="Invalid directory structure"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepare for compilation                                             -->
  <!-- =================================================================== -->
  <target name="init.compile" depends="lib.compile">
    <mkdir dir="${build.dir}/classes"/>
    <available property="dummy" classname="dummy">
      <classpath id="compile.classpath">
        <fileset dir="${compile.lib.dir}">
          <include name="*.jar"/>
          <include name="*.zip"/>
          <exclude name="mmbase.jar"/>
        </fileset>
         <fileset dir="${optional.lib.dir}">
           <include name="*.jar"/>
           <include name="*.zip"/>
        </fileset>
      </classpath>
    </available>
  </target>


  <target name="build"   description="Compile and generate tld's"
     depends="compile" >
  </target>


  <target name="resources">
    <copy todir="${build.dir}/classes"  preservelastmodified="true">
      <fileset dir="${source-src.dir}">
        <include name="**/*.properties"/>
        <include name="**/LICENSE"/>
        <include name="**/*.dtd"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="compile" description="Compile the source directory" depends="init.compile">

    <echo message="java version: ${ant.java.version}" />

    <available property="informix.in.classpath"
               classpathref="compile.classpath"
               classname="com.informix.jdbc.IfxCblob" />
    <antcall target="check.optional.informix" />

    <available property="oracle.in.classpath"
               classpathref="compile.classpath"
               classname="oracle.jdbc.OracleDriver" />
    <antcall target="check.optional.oracle" />

    <available property="naming.in.classpath"
      classpathref="compile.classpath"
      classname="javax.naming.Context" />
    <antcall target="check.optional.naming" />

    <available property="sqlconnection.in.classpath"
      classpathref="compile.classpath"
      classname="javax.sql.DataSource" />
    <antcall target="check.optional.sqlconnection" />

    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           source="1.4"
           deprecation="${deprecation}">
      <exclude name="org/mmbase/module/JMSendMail.java" unless="naming.in.classpath" />
      <exclude name="org/mmbase/module/database/Naming.java" unless="naming.in.classpath" />
      <exclude name="org/mmbase/module/database/Naming.java" unless="sqlconnection.in.classpath" />
      <exclude name="org/mmbase/module/database/support/MMOracle.java" unless="oracle.in.classpath" />
      <exclude name="org/mmbase/module/database/support/MMInformix42Node.java" unless="informix.in.classpath" />
    </javac>
    <tstamp/>
    <echo file="${build.dir}/classes/org/mmbase/builddate.properties">${builddate}</echo>
  </target>

  <!-- =================================================================== -->
  <!-- Check the optional packages                                         -->
  <!-- =================================================================== -->

  <target name="check.optional.jai" unless="jai.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package javax.jai."/>
    <echo message="You can't use the java based Image-Converter without this package,"/>
    <echo message="you've got to use ImageMagick."/>
    <echo message="JAI can be downloaded from http://www.javasoft.com/products/java-media/jai/"/>
    <echo message="MMBase will compile and run without this package."/>
    <echo message=""/>
  </target>

  <target name="check.optional.log4j" unless="log4j.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package Log4j."/>
    <echo message="Logging capabalities will be very limited."/>
    <echo message="Log4j can be downloaded from http://jakarta.apache.org/log4j/"/>
    <echo message="The Log4j Implementation of MMBase will not compile,"/>
    <echo message="but MMBase will run without this package."/>
    <echo message=""/>
  </target>

  <target name="check.optional.oracle" unless="oracle.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package oracle.jdbc."/>
    <echo message="Oracle support for MMBase will not be compiled,"/>
    <echo message="but MMBase will run without this package."/>
    <echo message=""/>
  </target>

  <target name="check.optional.informix" unless="informix.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package com.informix.jdbc."/>
    <echo message="Informix support for MMBase will not be compiled,"/>
    <echo message="but MMBase will run without this package."/>
    <echo message=""/>
  </target>

  <target name="check.optional.naming" unless="naming.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package javax.naming."/>
    <echo message="J2EE database and email support for MMBase will not be compiled,"/>
    <echo message="but MMBase will run without this package."/>
    <echo message=""/>
  </target>

  <target name="check.optional.sqlconnection" unless="sqlconnection.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package javax.sql."/>
    <echo message="J2EE database detection for MMBase will not be compiled,"/>
    <echo message="but MMBase will run without this package."/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Clean the compiled classes                                          -->
  <!-- =================================================================== -->
  <target name="clean.compile" description="Clean the compiled classes"  depends="clean.lib">
    <delete file="${build.dir}/mmbase.jar"/>
    <delete dir="${build.dir}/classes"/>
  </target>

  <!-- =================================================================== -->
  <!-- Create the MMBase jar file                                          -->
  <!-- =================================================================== -->


  <target name="jar.uptodatecheck">
    <uptodate property="jar.uptodate" targetfile="${mmbase.jar}" >
      <srcfiles dir="${source-src.dir}" includes="**/*"/>
    </uptodate>
  </target>

  <target name="jar.check" depends="jar.uptodatecheck" if="jar.uptodate">
    <echo message="${mmbase.jar} is up-to-date" />
  </target>


  <target name="jar" description="Create the MMBase jar file"
          depends="init,jar.check" unless="jar.uptodate">
    <antcall target="compile" />
    <antcall target="resources" />

    <manifest file="${build.dir}/manifest.mf">
      <attribute name="Main-Class" value="org.mmbase.Version" />
      <section name="org/mmbase">
        <attribute name="Vendor" value="MMBase Community" />
        <attribute name="URL" value="http://www.mmbase.org" />
        <attribute name="Comment" value="The MMBase Content Managment System" />
        <attribute name="Version" value="${distro}.${builddate}" />
        <attribute name="Distribution" value="${distro}" />
        <attribute name="Build-by"     value="${ant.version}" />
        <attribute name="Build-java-version" value="${ant.java.version}" />
        <attribute name="Build-compile" value="${build.compiler}" />
      </section>
    </manifest>

    <mkdir dir="${release.lib.dir}" />
    <jar jarfile="${mmbase.jar}"  update="false" manifest="${build.dir}/manifest.mf" >
      <fileset dir="${build.dir}/classes"
               includes="org/mmbase/**" />
      <fileset dir="${source-html.dir}/WEB-INF/classes/" />
    </jar>

    <delete file="${build.dir}/manifest.mf" />
    
    <!-- still copy mmbase.jar to relase dir for backward compatibility-->
    <copy file="${mmbase.jar}"       todir="${release.lib.dir}" />
  </target>


  <property name="minconfig.build.dir" value="${build.dir}/min/config"/>


    <!-- =================================================================== -->
    <!-- Create the MMBase config build dir                                  -->
    <!-- =================================================================== -->
  <target name="minimalistic.war.config" depends="init.compile">
        <!-- copy the jsp editors to a reasonable place -->
        <copy todir="${minconfig.build.dir}">
            <fileset dir="${source-config.dir}"  defaultexcludes="true">
                <!-- the dirs/files we definitly need -->
                <include name="databases/**"/>
                <include name="xslt/**"/>
                <include name="log/log.xml"/>
                <include name="log/log4j.xml"/>
                <include name="security/security.xml"/>
                <include name="caches.xml"/>
                <include name="magic.xml" /><!-- used if you switch on 'attachments' -->

                <!-- the applications we definitly need -->
                <include name="applications/CloudSecurity.xml"/>
                <include name="applications/CloudSecurity/**"/>

                <!-- the modules we definitly need -->
                <include name="modules/mmbaseroot.xml"/><!-- tells things about mmbase instantion -->
                <include name="modules/jdbc.xml"/><!-- tells things about jdbc connecion -->
                <include name="modules/mmadmin.xml"/><!-- to load applications, mmadmin isnt uses further in war -->


                <!-- the builders we definitly need -->
                <include name="builders/core/**"/>
            </fileset>
        </copy>
    </target>

  <target name="war.config" depends="init.compile">
    <copy todir="${config.build.dir}">
      <fileset dir="${source-config.dir}"  defaultexcludes="true">
        <include name="**"/>
        <exclude name="dtd/**" />
      </fileset>
    </copy>
  </target>


    <!-- =================================================================== -->
    <!-- Create a mmbase-dtds.jar                                            -->
    <!-- =================================================================== -->

  <target name="dtds.jar">
        <echo file="${build.dir}/manifest.mf">
Name: org/mmbase/resources/dtds
Vendor: MMBase Community
URL: http://www.mmbase.org
Comment: The MMBase Content Managment System
Version: ${distro}.${builddate}
Distribution: ${distro}
Build-by: ${ant.version}
Build-java-version: ${ant.java.version}
Build-compiler: ${build.compiler}
</echo>

    <mkdir dir="${build.dir}/dtd" />
    <copy todir="${build.dir}/dtd" flatten="true">
      <fileset dir="${source-src.dir}"  defaultexcludes="true">
        <include name="**/*.dtd"/>
      </fileset>
    </copy>
    <jar jarfile="${build.dir}/mmbase-dtds.jar"
         basedir="${build.dir}/dtd"
       includes="**"
       manifest="${build.dir}/manifest.mf"
      />
  </target>




    <!-- =================================================================== -->
    <!-- Create the MMBase html build dir                                    -->
    <!-- =================================================================== -->

  <target name="clean.war">
    <delete dir="${webroot.build.dir}" />
    <delete dir="${config.build.dir}" />
    <delete dir="${minconfig.build.dir}" />
    <delete file="${build.dir}/mmbase/mmbase.war" />
    <delete file="${build.dir}/mmbase/minimalistic-mmbase.war" />
  </target>

    <!-- =================================================================== -->
    <!-- Create the MMBase war file                                          -->
    <!-- =================================================================== -->
  <target name="wars" description="Create full-fledged and minimalistic mmbase.war"
          depends="war,minimalistic.war"
  />

  <target name="war" description="Create a MMBase war-file" depends="lib.release,web,jar,applications">

    <war warfile="${build.dir}/mmbase.war" webxml="${source-html.dir}/WEB-INF/web.xml">
      <lib dir="${release.lib.dir}" />
      <!-- our file's on the server -->
      <fileset dir="${build.dir}/mmbase/mmbase-webapp"/>
    </war>
  </target>

  <target name="minimalistic.war" description="Create a minimalistic MMBase war-file"
          depends="lib.release,jar,minimalistic.war.config">
    <war warfile="${build.dir}/minimalistic-mmbase.war" webxml="${source-html.dir}/WEB-INF/web.xml">
      <lib dir="${release.lib.dir}" />
      <!-- here our config has to be.. -->
      <webinf dir="${build.dir}/min">
        <include name="config/**"/>
      </webinf>
    </war>
  </target>

  <!-- =================================================================== -->
  <!-- Create the API documentation                                        -->
  <!-- =================================================================== -->
  <target name="javadocs"
          description="Create the API documentation"
          depends="init,lib.compile"
          unless="did.javadocs"
    >
    <mkdir dir="${build.dir}/mmbase-src/docs"/>
    <mkdir dir="${build.dir}/mmbase-src/docs/api"/>
    <javadoc packagenames="${javadoc.packages}"
             destdir="${build.dir}/mmbase-src/docs/api"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="MMBase API"
             doctitle="MMBase"
             maxmemory="100M"
             source="1.4"
             bottom="MMBase build ${distro.version}.${builddate}">
      <fileset dir="${source.dir}" defaultexcludes="yes">
        <include name="src/**/*.java" />
        <include name="applications/*/src/**/*.java" />
      </fileset>
      <classpath>
        <fileset dir="${compile.lib.dir}">
          <include name="*.jar"/>
          <include name="*.zip"/>
        </fileset>
      </classpath>
      <!-- mmbase custom tags -->
      <tag name="deprecated-now" description="Warning: Deprecated now (removed in the next release):" />
      <tag name="rename" description="Warning: Will be renamed to:" />
      <tag name="move" description="Warning: Will be moved to:" />
      <tag name="scope" description="Warning: Scope will be changed to:" />
      <tag name="core" description="Core Class" scope="types" />
      <tag name="application"  description="Class for Application :" scope="types" />
      <tag name="todo" description="To Do:" />
      <!-- mmbase tags to ignore (development cleaning warnings only) -->
      <tag name="javadoc" description="Warning: No Java Documentation Available." enabled="${javadoc.cleaning}" />
      <tag name="bad-constant" description="Warning: Bad Constant" enabled="${javadoc.cleaning}" />
      <tag name="bad-literal" description="Warning: Uses Bad Literal" enabled="${javadoc.cleaning}" />
      <tag name="code-conventions" description="Warning: Code Conventions Breach" enabled="${javadoc.cleaning}"/>
      <tag name="language" description="Warning: Contains Language-dependent Text Values" enabled="${javadoc.cleaning}"/>
      <tag name="vpro" description="Warning: Contains VPRO Legacy Code" enabled="${javadoc.cleaning}"/>
      <tag name="performance" description="Warning: Performance Issues" enabled="${javadoc.cleaning}"/>
      <tag name="dependency" description="Warning: Contains Dependency Found" enabled="${javadoc.cleaning}"/>
      <tag name="sql" description="Warning: Contains Database Legacy Code" enabled="${javadoc.cleaning}"/>
      <tag name="duplicate" description="Warning: Contains Duplicate Code (present in other classes)" enabled="${javadoc.cleaning}"/>
      <tag name="deprecation-used" description="Warning: Calls Deprecated Code" enabled="${javadoc.cleaning}"/>
    </javadoc>
    <property name="did.javadocs" value="true" />
  </target>

  <!-- =================================================================== -->
  <!-- Create the MMCI API documentation                                        -->
  <!-- =================================================================== -->
  <target name="mmcidocs"
          description="Create the MMCI API documentation"
          depends="init,lib.compile"
          unless="did.mmcidocs"
    >
    <mkdir dir="${mmdocs.dir}"/>
    <mkdir dir="${mmdocs.dir}/mmci"/>
    <mkdir dir="${mmdocs.dir}/mmci/api"/>
    <javadoc packagenames="${mmcidoc.packages}"
             sourcepath="${source-src.dir}"
             destdir="${mmdocs.dir}/mmci/api"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="MMBase MMCI API"
             doctitle="MMBase"
             maxmemory="100M"
             bottom="MMBase build ${distro.version}.${builddate}">
      <classpath>
        <fileset dir="${compile.lib.dir}">
          <include name="*.jar"/>
          <include name="*.zip"/>
        </fileset>
      </classpath>
    </javadoc>
    <property name="did.mmcidocs" value="true" />
  </target>



  <!-- =================================================================== -->
  <!-- Create the web directory                                            -->
  <!-- This directory contains 'compiled' stuff, which must appear in the  -->
  <!-- html directory of the web-server. A web server specific tag can copy-->
  <!-- them from here, depending on this 'web' target                      -->
  <!-- =================================================================== -->
  <target name="web" description="Make the things which must appear in the web-servers html directory"
         depends="init.compile">

    <antcall target="web.documentation" />

    <mkdir  dir="${web.dir}/config/builders/applications" />
    <chmod  file="${web.dir}/config/builders/applications" perm="ugo+xrw" type="dir" />

    <!-- copy the config -->
    <mkdir dir="${web.dir}/config"/>
    <copy todir="${web.dir}/config">
      <fileset dir="${source-config.dir}"
               defaultexcludes="yes"/>
    </copy>

    <!-- copy the html -->
    <copy todir="${webapp.dir}">
      <fileset dir="${source-html.dir}"
               defaultexcludes="yes"
               excludes="WEB-INF/classes/**"
               >
      </fileset>
    </copy>
  </target>

  <target name="web.documentation" if="do.documentation">
    <antcall target="documentation" />
  </target>


  <!-- =================================================================== -->
  <!-- Compile the AppTool                                                 -->
  <!-- =================================================================== -->
  <target name="compile.apptool" description="Compile the AppTool"
          depends="init.compile">
    <mkdir dir="${build.dir}/apptool/classes"/>
    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/apptool/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
      <include name="org/mmbase/module/tools/MMAppTool/*.java"/>
    </javac>
  </target>


  <!-- =================================================================== -->
  <!-- Build the AppTool                                                   -->
  <!-- =================================================================== -->
  <target name="apptool" description="Build the AppTool"
          depends="jar,compile.apptool">
    <mkdir dir="${build.dir}/apptool/lib"/>
    <copy file="${mmbase.jar}" todir="${build.dir}/apptool/lib"/>
    <copy file="${xerces.jar}" todir="${build.dir}/apptool/lib"/>
    <copy file="${servlet.jar}" todir="${build.dir}/apptool/lib"/>
  </target>


  <!-- =================================================================== -->
  <!-- Run the AppTool                                                     -->
  <!-- =================================================================== -->
  <target name="run.apptool" description="Run the AppTool"
          depends="apptool">
    <java classname="org.mmbase.module.tools.MMAppTool.MMAppTool" fork="true">
      <classpath>
        <pathelement location="${build.dir}/apptool/classes"/>
        <fileset dir="${build.dir}/apptool/lib">
          <include name="**/*.jar"/>
          <include name="**/*.zip"/>
        </fileset>
      </classpath>
    </java>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the apptool                                                   -->
  <!-- =================================================================== -->
  <target name="clean.apptool" description="Clean the apptool">
    <delete dir="${build.dir}/apptool"/>
  </target>


  <!-- =================================================================== -->
  <!-- Various targets for automated downloads                             -->
  <!-- =================================================================== -->
  <target name="unzipdownloadzip" if="download.zip.present" 
          unless="download.dir.present">
    <unzip src="${download.zip}" dest="${download.dir}" overwrite="false" />
  </target>
  
  <target name="init.get" depends="proxyflags">

    <available property="download.zip.present" file="${download.zip}" />
    <available property="download.dir.present" file="${download.dir}" />

    <antcall target="unzipdownloadzip" />

    <!-- Init actions -->
    <mkdir dir="${download.dir}"/>
    <mkdir dir="${expand.dir}"/>

    <echo message="servlet" />
    <antcall target="downloadgz">
      <param name="sourcefile" value="${servlet.loc}"/>
      <param name="destfile" value="${servlet.dest}"/>
      <param name="expandedfile" value="${servlet.jar}"/>
    </antcall>

    <echo message="hsqldb" />
    <antcall target="downloadzip">
      <param name="sourcefile" value="${hsqldb.loc}"/>
      <param name="destfile" value="${hsqldb.dest}"/>
      <param name="destdir" value="${hsqldb.dir}"/>
      <param name="expandedfile" value="${hsqldb.jar}"/>
    </antcall>

    <echo message="jai" />
    <antcall target="downloadbz2">
      <param name="sourcefile" value="${jai.loc}"/>
      <param name="destfile" value="${jai.dest}"/>
      <param name="destdir" value="${jai.dir}"/>
      <param name="expandedfile" value="${jai_core.jar}"/>
    </antcall>

    <echo message="javamail" />
    <antcall target="downloadzip">
      <param name="sourcefile" value="${javamail.loc}"/>
      <param name="destfile" value="${javamail.dest}"/>
      <param name="destdir" value="${javamail.dir}"/>
      <param name="expandedfile" value="${javamail.jar}"/>
    </antcall>

    <echo message="javaactivation" />
    <antcall target="downloadzip">
      <param name="sourcefile" value="${javaactivation.loc}"/>
      <param name="destfile" value="${javaactivation.dest}"/>
      <param name="destdir" value="${javaactivation.dir}"/>
      <param name="expandedfile" value="${javaactivation.jar}"/>
    </antcall>

    <echo message="docbook" />
    <antcall target="downloadgz">
      <param name="sourcefile" value="${docbook-xsl.loc}"/>
      <param name="destfile" value="${docbook-xsl.dest}"/>
      <param name="expandedfile" value="${docbook-xsl.exp}"/>
    </antcall>

    <echo message="log4j" />
    <antcall target="downloadgz">
      <param name="sourcefile" value="${log4j.loc}"/>
      <param name="destfile" value="${log4j.dest}"/>
      <param name="expandedfile" value="${log4j.jar}"/>
    </antcall>

    <echo message="xalan and xerces" />
    <antcall target="downloadgz">
      <param name="sourcefile" value="${xalan.loc}"/>
      <param name="destfile" value="${xalan.dest}"/>
      <param name="expandedfile" value="${xalan.jar}"/>
    </antcall>
  </target>

  <target name="proxyflags" depends="init">
    <!-- check proxy parameters. -->
    <condition property="useproxy">
      <equals arg1="${proxy.use}" arg2="on" />
    </condition>
  </target>

  <target name="setproxy"  if="useproxy">
    <taskdef name="setproxy"
      classname="org.apache.tools.ant.taskdefs.optional.net.SetProxy" />
    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/> 
    <echo message="Using ${proxy.host}:${proxy.port} to download ${sourcefile}"/>
  </target>

  <target name="testexist">
    <echo message="Testing  for ${destfile}"/>
    <available file="${destfile}" property="exist"/>
  </target>

  <target name="testexpanded">
    <echo message="Testing for ${expandedfile}"/>
    <available file="${expandedfile}" property="expanded"/>
  </target>

  <target name="download" unless="exist" depends="setproxy,testexist">
    <!-- Download the package -->
    <get src="${sourcefile}" dest="${destfile}" verbose="on" />
  </target>

  <target name="downloadgz" unless="expanded" depends="download,testexpanded">
    <!-- Extract the package -->
    <gunzip src="${destfile}" dest="${download.dir}/file.tar"/>
    <untar src="${download.dir}/file.tar" dest="${expand.dir}"/>
    <delete file="${download.dir}/file.tar"/>    
  </target>

  <target name="downloadbz2" unless="expanded" depends="download,testexpanded">
    <!-- Extract the package -->
    <mkdir dir="${destdir}" />
    <bunzip2 src="${destfile}" dest="${download.dir}/file.tar"/>
    <untar src="${download.dir}/file.tar" dest="${destdir}"/>
    <delete file="${download.dir}/file.tar"/>
  </target>

  <target name="downloadzip" unless="expanded" depends="download,testexpanded">
    <!-- Extract the package -->
    <mkdir dir="${destdir}" />
    <unzip src="${destfile}" dest="${destdir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Clean the download directory                                        -->
  <!-- =================================================================== -->
  <target name="clean.download" description="Clean the download directory">
    <delete dir="${download.dir}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the expand directory                                          -->
  <!-- =================================================================== -->
  <target name="clean.expand" description="Clean the expand directory">
    <delete dir="${expand.dir}"/>
  </target>

  <target name="xsltransformer" depends="init.compile">
    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/classes"
           classpathref="compile.classpath"
           depend="true"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
           <include name="org/mmbase/util/XSLTransformer.java" />
    </javac>

    <copy todir="${build.dir}/classes">
      <fileset dir="${source-src.dir}">
        <include name="**/caches*.dtd"/>
      </fileset>
    </copy>
  </target>

  <!-- ================================================================================ -->
  <!-- applications -->
  <!-- ================================================================================ -->

  <target name="applications">
    <ant dir="${applications.home}" target="install">
    </ant>
  </target>
  <target name="clean.applications">
    <ant dir="${applications.home}" target="clean">
    </ant>
  </target>


  <!-- only needed for builder.docs -->
  <target name="doc.resources" depends="init.get">
    <delete file="${build.dir}/docbook2xhtml.xslt" />
    <copy todir="${build.dir}" file="${source-documentation.dir}/style/docbook2xhtml.xslt" />
    <replace  file="${build.dir}/docbook2xhtml.xslt"
              token="[BASESTYLESHEET]"
              value="${expand.dir}/${docbook-xsl.version}/${docbook.stylesheet}" />

  </target>


  <target name="documentation" 
          depends="jar,documentation.builders,mmcidocs">

    <ant dir="${documentation.home}" target="documentation">
      <property name="mmbase.default.dir" value=".." />
      <property name="download.dir" value="${download.dir}" />
      <property name="documentation.dest.dir" value="${mmdocs.dir}"/>
    </ant>

  </target>

  <!-- =================================================================== -->
  <!--  Create the Builder documentation                                   -->
  <!-- TODO, should be moved to documentation module                      -->
  <!-- =================================================================== -->
  <target name="documentation.builders"
          depends="doc.resources,xsltransformer"
          description="Generate builder-documentation from the builder config files">

    <mkdir dir="${mmdocs.dir}/frontenddevelopers/builders"/>

    <copy todir="${mmdocs.dir}/frontenddevelopers/builders"
          file="${source-documentation.dir}/style/docbook2xhtml.xslt"
          />

    <!-- not used at the moment
    <replace file="${mmdocs.dir}/frontenddevelopers/builders/docbook2xhtml.xslt"
             token="[BASESTYLESHEET]"
             value="${expand.dir}/${docbook-xsl.version}/xhtml/chunk.xsl" />
    -->
    <replace file="${mmdocs.dir}/frontenddevelopers/builders/docbook2xhtml.xslt"
             token="[BASESTYLESHEET]"
             value="${expand.dir}/${docbook-xsl.version}/xhtml/docbook.xsl" />


    <!-- compile class for listing of builders -->
    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
           <include name="org/mmbase/util/BuilderList.java" />
    </javac>


    <!-- call class, this will give an xml file with a listing of all the builders -->
    <java classname="org.mmbase.util.BuilderList"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="no"
          output="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-total.xml">
      <jvmarg value="-Dmmbase.config=${source.dir}/config" />
      <jvmarg value="-mx100m" />
      <classpath>
        <pathelement location="${build.dir}/classes" />
      </classpath>
      <arg value="${source-config-builders.dir}" />
    </java>

    <!-- convert this file into docbook -->
    <!-- <style
      style="${source-config.dir}/xslt/builder2docbook.xsl"
      extension=".xml"
      in="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-total.xml"
      out="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-docbook.xml"
      >
        <param name="language" expression="${documentation.builders.language}"/>
    </style> -->


    <!-- generate xhtml -->
    <!-- <style
      style="${mmdocs.dir}/frontenddevelopers/builders/docbook2xhtml.xslt"
      extension=".html"
      in="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-docbook.xml"
      out="${mmdocs.dir}/frontenddevelopers/builders/index.html"
      >
        <param name="root" expression="../../"/>
    </style> -->

    <java classname="org.mmbase.util.XSLTransformer"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Djava.endorsed.dirs=${build.dir}/lib" />
      <jvmarg value="-Dmmbase.config=${source.dir}/config" />
      <jvmarg value="-mx100m" />
      <classpath>
        <pathelement location="${build.dir}/classes" />
      </classpath>
      <arg value="${source-config.dir}/xslt/builder2docbook.xsl" />
      <arg value="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-total.xml" />
      <arg value="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-docbook.xml" />
      <arg value="language=${documentation.builders.language}" />
    </java>

    <java classname="org.mmbase.util.XSLTransformer"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Djava.endorsed.dirs=${build.dir}/lib" />
      <jvmarg value="-Dmmbase.config=${source.dir}/config" />
      <jvmarg value="-mx100m" />
      <classpath>
        <pathelement location="${build.dir}/classes" />
      </classpath>
      <arg value="${mmdocs.dir}/frontenddevelopers/builders/docbook2xhtml.xslt" />
      <arg value="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-docbook.xml" />
      <arg value="${mmdocs.dir}/frontenddevelopers/builders/index.html" />
      <arg value="root=../../" />
    </java>

    <!-- remove temp files -->
    <!-- delete file="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-total.xml"/>
    <delete file="${mmdocs.dir}/frontenddevelopers/builders/allbuilders-docbook.xml"/>
    <delete file="${mmdocs.dir}/frontenddevelopers/builders/docbook2xhtml.xslt"/ -->
  </target>

  <!-- =================================================================== -->
  <!-- Clean the documentation directory                                   -->
  <!-- =================================================================== -->
  <target name="clean.documentation" description="Clean the generated documentation">
    <ant dir="${documentation.home}" target="clean">
      <property name="mmbase.default.dir" value=".." />
      <property name="download.dir" value="${download.dir}" />
      <property name="documentation.dest.dir" value="${mmdocs.dir}"/>
    </ant>
  </target>

  <!-- =================================================================== -->
  <!-- Clean                                                               -->
  <!-- =================================================================== -->
  <target
    name="clean.build"
    depends="clean.compile,clean.generatedsource,clean.apptool,clean.lib"
    description="Clean all classes and generated java, safe for every recompilation"
    >
    <!-- apptool? -->
  </target>

  <!-- this doesn't get clean anywhere else -->
  <target name="clean.generatedsource">
    <delete dir="${generated-source-src.dir}" />
  </target>

  <target
    name="clean"
    depends="clean.build,clean.documentation,clean.expand,clean.srcdist,clean.bindist,clean.war,clean.applications"
    description="Clean everything (except for downloading)" />

</project>
