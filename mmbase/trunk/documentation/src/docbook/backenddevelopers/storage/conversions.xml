<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<article class="specification" id="backenddevelopers-storage-conversions">
  <articleinfo>
    <title>Storage Conversions</title>

    <date>2007-04-10</date>

    <edition>$Id: conversions.xml,v 1.2 2005/06/10 11:32:43 michiel Exp
    $</edition>

    <authorgroup>
      <!-- one or more authors -->

      <author>
        <firstname>Michiel</firstname>

        <surname>Meeuwissen</surname>
      </author>
    </authorgroup>

    <abstract>
      <para>Storage conversion</para>
    </abstract>

    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified
      is a certification mark of the Open Source Initiative.</para>

      <para>The license (Mozilla version 1.0) can be read at the MMBase site.
      See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>
  </articleinfo>

  <section id="introduction">
    <title>Introduction</title>

    <para>HOWTO on database-conversions</para>
  </section>

  <section id="blobstofile">
    <title>Converting blobs to files</title>

    <para>In the MMBase admin pages is a tool to start the conversion. You
    will need to configure your database first. Change the option
    'database-supports-blob' to true:</para>

    <programlisting>  &lt;!-- Use Blobs  --&gt;
  &lt;option name="database-supports-blob" value="true" /&gt;
</programlisting>

    <para>Followed by these two lines of which the last line states the
    absolute path to which the blobs will be written.</para>

    <programlisting>  &lt;option name="database-stores-binary-as-file" value="true" /&gt;
  &lt;attribute name="database-binary-file-path"&gt;/home/http/default/blob&lt;/attribute&gt;
</programlisting>

    <para>The default configuration is that your binaries will be written to
    the data directory, which is configured in
    'config/modules/mmbaseroot.xml'. But when you want your binaries in
    another location you can specify that with the last line, otherwise you
    can ommit that line.</para>

    <para>Next you will need to specify in 'mmbaseroot.xml' that you are using
    a different file for the database configuration and then restart. When you
    use the 'config/storage/databases/mysql-binaryasfile.xml' example that
    line would be:</para>

    <programlisting>  &lt;property name="database"&gt;mysql-binaryasfile&lt;/property&gt;</programlisting>

    <para>Now you are ready to hit the button 'Convert' to start converting
    your blobs to disk.</para>
  </section>

  <section id="filestoblobs">
    <title>Convert files to blobs</title>

    <para>Can this be done?</para>
  </section>

  <section id="datetime">
    <title>Introducing 'DATETIME'</title>

    <para>In MMBase 1.7 datetime were stored as 'LONG' or 'INTEGER' fields
    with 'guitype' 'eventtimes'. In 1.8 also 'DATETIME' is supported for
    database type. So if you have an existing installation, you may want to
    convert these fields.</para>

    <para>It is simple to change the builder XML's, but the database will need
    a manual conversion.</para>

    <section id="datetime_psql">
      <title>PostgreSQL</title>

      <para>To transform a column named 'begin' in the builder 'content' to
      DATETIME you can do the following. This is tested on Postgresql 7.2. It
      should also work on higher version, though it could be simplified there.
      For example you may want to drop the old column then (not supported in
      psql 7.2). <programlisting>
          alter table mm_content rename begin to begin_;
          alter table mm_content add column begin timestamp;
          update mm_content set begin  = 'epoch'::timestamp + (CASE WHEN begin_ > 2000000000 THEN CAST(begin_/3600||'h' AS interval) ELSE  CAST(begin_||'s' AS interval) END);
          alter table mm_content drop column begin_;
        </programlisting></para>

      <para>Because the column cannot be dropped MMBase will issue a warning
      on it's startup: <programlisting>
          13:36:55,810 8095kB WAR storage.implementation.database.DatabaseStorageManager - VERIFY: Column 'begin_' for builder 'categories' in Storage but not defined!
        </programlisting> This can safely be ignored, until the column can be
      dropped in some way. IIRC even newer version of postgresql cannot really
      drop the column, only hide it. In that case you can probably actually
      remove it by reimporting a database dump.</para>

      <para>This works too (converting a column 'broadcasttime'):
      <programlisting>
          create table mm_programs2 (broadcasttime timestamp) inherits  mm_texts;
          insert into mm_programs2 (number,otype,owner,begin,m_end,visible,title,body,broadcasttime,lastmodifiedby,lastmodified) select number,otype,owner,begin,m_end,visible,title,body,  '1970-01-01'::date + CAST(broadcasttime ||'s' AS interval),lastmodifiedby,lastmodified from mm_programs;
          alter table mm_programs rename to mm_programs_orig; alter table mm_programs2 rename to mm_programs;
        </programlisting> And then check if everthing is ok, and you can drop
      mm_programs_orig;</para>
    </section>

    <section id="datetime_mysql">
      <title>MySQL</title>

      <para>This will convert your former MMBase date in MySQL in a proper
      DATETIME field. This was used and tested on MySQL 4.</para>

      <programlisting>
  mysql&gt; ALTER TABLE intr_employees ADD birthdate DATETIME;
  mysql&gt; UPDATE intr_employees SET birthdate = from_unixtime(dateofbirth);
  mysql&gt; ALTER TABLE intr_employees DROP COLUMN dateofbirth;
  mysql&gt; ALTER TABLE intr_employees CHANGE birthdate dateofbirth DATETIME;
        </programlisting>
    </section>

    <section id="datetime_hsql">
      <title>HSQL</title>

      <para>Probably simply start from scratch...</para>
    </section>
  </section>
</article>
