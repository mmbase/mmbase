<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
]>
	<article>
		<articleinfo>
		<title>MMBase Configuration documentation</title>
		<date>2002-12-04</date>
		<edition>$Id: configuration.xml,v 1.21 2004-02-05 14:05:22 pierre Exp $</edition>
		<authorgroup>
			<author>
				<firstname>Michiel</firstname>
				<surname>Meeuwissen</surname>
				<affiliation>
					<orgname>Publieke Omroep</orgname>
				</affiliation>
			</author>
		</authorgroup>
		<legalnotice>
			<para>This software is OSI Certified Open Source Software. OSI Certified is a certification mark of the Open Source Initiative.</para>
			<para>The license (Mozilla version 1.0) can be read at the MMBase site. See <ulink url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink>
			</para>
		</legalnotice>
	</articleinfo>
	<section>
		<title>Introduction</title>
		<para>
			The MMBase configuration can normally be found in WEB-INF/config. Optionally, it is also possible to store this configuration in another directory, which then has to be done by use of the web.xml context parameter 'mmbase.config'. In this document, this configuration directory will be simply referred to as 'config'.
		</para>
	</section>
	<section id="webxml">
	 <title>Web.xml configuration</title>
		<para>
			The base of a web application configuration is always the so-called 'web.xml'. In a web.xml the following MMBase specific things could be found.
		</para>
		<section id="contextparameters">
			<title>Context parameters</title>
				<para>
				The parameter 'mmbase.htmlrooturlpath' indicates the context root. It must be specified if MMBase does not succeed to determine it automatically, otherwise some URLs to some servlets will be generated incorrectly. Hopefully this option will be deprecated when the servlet 2.3 api is supported well (and fully) by all important application servers. For Tomcat 4.1 it is not necessary, for Orion 1.6 it is.
			</para>
			<para>
				The parameter 'mmbase.config' indicates the MMBase configuration directory. If this parameter is missing, the configuration is supposed to be in WEB-INF/config (so next to web.xml itself).
			</para>
		</section>
		<section id="servlets">
			<title>Servlets</title>
			<para>
				For MMBase to start up, at least one 'MMBaseServlet' must be turned on in your web.xml. The following of those servlets are available.
				<variablelist>
					<varlistentry>
						<term><classname>org.mmbase.servlet.MMBaseServlet</classname></term>
						<listitem>
							<para>
								MMBaseServlet itself can only serve the MMBase version number. It has no properties to be set. You don't need a servlet-mapping to it, tough "/version" would be nice.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><classname>org.mmbase.servlet.ImageServlet</classname></term>
						<listitem>
							<para>
								This servlet serves MMBase nodes as images (so also icaches). Those nodes must contain an 'handle' field. It has an 'expire' property, which can be set to specify the 'Expires' header (for the node-type 'icaches' this is ignored) in seconds after now. A servlet-mapping could be e.g. /images/* or /img.db.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><classname>org.mmbase.servlet.AttachmentServlet</classname></term>
						<listitem>
							<para>
								This servlet looks a lot like ImageServlet, but it is focused on 'attachments' nodes, which besides a 'handle' also store a 'mimetype' field and a 'filename' field. It has the 'expire' property just like ImageServlet. Map it e.g. to /attachments/* or /attachment.db.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><classname>org.mmbase.servlet.servdb</classname></term>
						<listitem>
							<para>
								This servlet is the original one of MMBase 1.5 and before. It can do several things and is normally mapped to e.g. /img.db and /attachment.db. By the mapping it decides what to do.
							</para>
							<para>
								When it is used as an 'imageservlet' it also can accept the 'transformation' template to generate a
								'icache' node from a original image node on the URL. This can be handy, but also opens a vulnerability to your site.
							</para>
							<para>
								Since servdb is not based on the MMBase bridge, the content which it serves is not protected by the security system. It will serve any image, attachment etc. disregarding the possible read-restrictions on them.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>org.mmbase.servlet.servscan</classname></term>
					<listitem>
						<para>
							If you also have turned on the right MMBase 'modules', this servlet will provide the 'SCAN' template language. For new users it is advised not to use SCAN, but to use e.g. JSP (the JSP servlet and servlet-mapping are normally shipped with and installed in your application server). The SCAN servlet servscan has to be mapped to '*.shtml'.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
		</section>
		<section id="taglibs">
			<title>Taglibs</title>
			<para>
				If you want to use taglibs in your (jsp) pages - which you probably want - then you may have to indicate that as well in web.xml. Taglibs that you might want to use are the MMBase taglib, the MMBase community taglib, the oscache taglib and the jakarta taglibs. In some newer application servers it might be enough to have the mmbase-taglib.jar (or other jars) in your WEB-INF/lib directory to have the MMBase taglib (or other taglibs) to your disposal.
				<!-- TODO links -->
			</para>
		</section>
		<section id="resources">
			<title>Resources</title>
			<para>
				Since MMBase 1.6 certain things can (optionally) also be configured by the use of references to resources provided by the application server. A resource a an instance of a certain type which is created and configured and can be referred to by a 'resource name'.
			</para>
			<para>
				These resources must also be described in web.xml. The actual configuration of these resources happens somewhere else and we refer to the documentation of your application server.
			</para>
		</section>
		<section id="webxmlexample">
			<title>Example</title>
			<para>
			Here is an example web.xml. Some things are clarified more by use of XML comments in it.
			<example>
				<title>An example web.xml</title>
				<programlisting id="web.xml"><![CDATA[
<?xml version="1.0"?>
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>

	<!-- comment out if necessary
	<context-param>
		<param-name>mmbase.htmlrooturlpath</param-name>
		<param-value>/mm/</param-value>
	</context-param>
	-->

	<servlet>
		<servlet-name>version</servlet-name>
		<servlet-class>org.mmbase.servlet.MMBaseServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet>
		<servlet-name>images</servlet-name>
		<display-name>images</display-name>
		<servlet-class>org.mmbase.servlet.ImageServlet</servlet-class>
		<init-param>
			<param-name>expire</param-name><!-- Expire time of original images. Cached images never expire -->
			<param-value>600</param-value><!-- 10 minutes -->
		 </init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<servlet>
		<servlet-name>attachments</servlet-name>
		<display-name>attachments</display-name>
		<servlet-class>org.mmbase.servlet.AttachmentServlet</servlet-class>
		<init-param>
			<param-name>expire</param-name><!-- Expire time of attachment -->
			<param-value>600</param-value><!-- 10 minutes -->
		</init-param>
		<load-on-startup>3</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>version</servlet-name>
		<url-pattern>/version</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>images</servlet-name>
		<url-pattern>/images/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>attachments</servlet-name>
		<url-pattern>/attachments/*</url-pattern>
	</servlet-mapping>

	<!-- The MMBase taglib -->
	<taglib>
		<taglib-uri>http://www.mmbase.org/mmbase-taglib-1.0</taglib-uri>
		<taglib-location>/WEB-INF/lib/mmbase-taglib.jar</taglib-location>

		<!-- specifying a jar should work according to specs, but does not (yet) in all app-servers
				 if loading the taglib fails, use a separate taglib description file -->
		<!-- <taglib-location>/WEB-INF/mmbase-taglib.tld</taglib-location> -->
	</taglib>

	<!-- MMBase community taglib -->
	<taglib>
		<taglib-uri>http://www.mmbase.org/mmcommunity-taglib-1.0</taglib-uri>
		<taglib-location>/WEB-INF/lib/mmbase-community.jar</taglib-location>

		<!-- or use a separate taglib description file  -->
		<!-- <taglib-location>/WEB-INF/mmcommunity-taglib.tld</taglib-location> -->
	</taglib>

	<!-- Taglibs not directly related to MMBase -->
	<!--
		The 'Open Symphony' cache tags can e.g. cache your page partially. It uses expire-times or can
		be invalidated programatically.  See http://www.opensymphony.com
	-->
	<taglib>
		<taglib-uri>oscache</taglib-uri>
		<taglib-location>/WEB-INF/lib/oscache.jar</taglib-location>
	</taglib>

 <resource-ref>
		<description>
			Email module mail resource (JMSendMail). This resource must be
			configured in the application server. See also config/modules/sendmail.xml.
		</description>
		<res-ref-name>mail/MMBase</res-ref-name>
		<res-type>javax.mail.Session</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>

	<resource-ref>
		<description>
			Datasource for the MMBase Database. This datasource must be
			configured in the application server. See also config/modules/jdbc.xml
		</description>
		<res-ref-name>jdbc/MMBase</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>

</web-app>
]]>
					</programlisting>
				</example>
			</para>
		</section>
	</section>
	<section id="nowebxml">
		<title>Running MMBase without a web.xml</title>
		<para>
			Sometimes it is useful to run (parts of) MMBase outside a servlet environment, for example when you are a developer and want to test only a certain part without the overhead of starting up a whole application server. Another example is when you make a data-importer.
		</para>
		<para>
			In such cases the JVM option (-D) mmbase.config might come in handy, because most parts of MMBase somehow do need a configuration. It might be for example only to configure the logging system.
		</para>
		<para>
			In older MMBase versions it was required to use this JVM option even when you did run it as a (set of) servlet(s), but this is not any longer the case (since MMBase 1.4), and use of '-Dmmbase.config' other then in debugging or other 'stand-alone' situations is discouraged.
		</para>
		<para>
			In these older versions of MMBase also the 'mmbase.htmlroot' command line option was needed. It still is supported (though not by JSP), but I can't think of any situation in which it would be needed (besides when using a very old MMBase or perhaps a very old application server), and I think this option can now be considered fully deprecated. --> perhaps in junit tests?
		</para>
		<para>
			To complete this description of how to run MMBase outside a servlet environment
			<example>
				<title>Example java code to start MMBase</title>
				<programlisting id="examplenowebxml"><![CDATA[
	try {
		 //MMBaseContext.init("HERE YOUR CONFIG_DIR",true); // no need for -Dmmbase.config then.
		 MMBaseContext.init();
		 MMBase mmb = (MMBase) MMBase.getMMBase();

		 // now you have the "MMBase" object
		 // All data can be accessed now.

		 // with the core:
		 MMObjectBuilder images = mmb.getBuilder("episode");
		 MMObjectNode node=images.getNewNode("admin");
		 node.setValue("title",(Object) "TEST");
		 node.insert("admin");

		 // or nicer, with the bridge:
		 Cloud cloud = LocalContext.getCloudContext().getCloud("mmbase"));
		 NodeManager images = cloud.getNodeManager("episode");
		 Node node = images.createNode();
		 node.setField("title", "TEST");
		 node.commit();

	 } catch (Exception e) {
		 System.out.println("Something went wrong" + e.toString());
	 }
	 ]]></programlisting>
				</example>
				You have to make sure that mmbase.jar and your servlet.jar are in the classpath. The above code shows you how to access the MMBase Data.
		</para>
	</section>
	<section id="builders">
		<title>Builders</title>
		<para>
			'Builder' is another word for 'object-type'. The builder-definitions of your MMBase can be found in config/builders and subdirectories.
		</para>
		<section>
			<title>builder.dtd , builders as urls,people,images ... </title>
			<variablelist>
				<varlistentry>
					<term>&lt;builder maintainer="mmbase.org" version="0"&gt;</term>
					<listitem>
						<para>
							This file contains all the settings for one builder
						</para>
						<variablelist>
							<varlistentry>
								<term>maintainer</term>
								<listitem><para>maintainer of the builder defined as a domain</para></listitem>
							</varlistentry>
							<varlistentry>
								<term>version</term>
								<listitem><simpara>version of the builder</simpara></listitem>
							</varlistentry>
						</variablelist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>&lt;status&gt;active&lt;/status&gt;</term>
					<listitem><simpara>state of the builder either active or inactive</simpara></listitem>
				</varlistentry>
			</variablelist>
		</section>
	</section>
	<section id="databases">
		<title>Databases</title>
		<para>
			In the databases subdirectory of the configuration you find the XML's describing supported databases. These files are only used by the old (pre-1.7) database layer of MMBase. If you intend to use the new Storage layer (recommended), you can remove this directory. For configuration of the new Storage Layer, see the <ulink url="../backenddevelopers/storage/index.html">storage documentation</ulink>.
		</para>
		<para>
			Even when you use the old database layer, in an actual installation all but one of these files can be removed. It must correspond to the 'database' property in config/modules/mmbaseroot.xml, if this property is present. You can also remove the database property from mmbaseroot.xml (I would advice this, because then all database configuration is in jdbc.xml), then the 'lookup.xml' file will be used to determine the right database configuration XML (so perhaps it is better to leave them) using the available driver.
		</para>
		<para>
			It is important to make the right driver available, anyhow. This is
			usually done by putting the right jar in WEB-INF/lib.
				 <variablelist>
					 <varlistentry>
							<term><classname>com.mysql.jdbc.Driver</classname> from mysql-connector-java-2.0.14-bin.jar</term>
							<listitem>
							<para>
								 The mysql driver can be downloaded from <ulink url="http://www.mysql.com/downloads/api-jdbc.html">The mysql website</ulink>
							</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><classname>org.postgresql.Driver</classname> from pg73jdbc2.jar (make sure to have a version which works with your postgresql version / jdk)</term>
							<listitem>
							<para>
								 The postgresql driver can be downloaded from <ulink url="http://jdbc.postgresql.org/download.html">The postgresql website</ulink>
							</para>
							</listitem>
						</varlistentry>
					</variablelist>
			Support for other databases is also present in MMBase. The file 'config/databases/lookup.xml' should give some impression about which drives are known to work.
		</para>
		<para>
			The file in which is configured which driver MMBase must use is config/modules/jdbc.xml. Other information for this driver can also be included. Here you can configure the username/password for access to the database, the database name itself, the port number on which the database is listening etc.
			<example>
				<title>An example jdbc.xml</title>
				<programlisting id="jdbc.xml"><![CDATA[
<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//MMBase/ DTD module config 1.0//EN" "http://www.mmbase.org/dtd/module_1_0.dtd">
<module maintainer="mmbase.org" version="0">
	<status>active</status>
	<classfile>org.mmbase.module.database.JDBC</classfile>
	<properties>
		<property name="supportclass">org.mmbase.module.database.DatabaseSupportShim</property>
		<property name="driver">com.mysql.jdbc.Driver</property>
		<property name="url">jdbc:mysql://$HOST:$PORT/$DBM</property>
		<property name="user">mmbase</property>
		<property name="password">mypassword</property>
		<property name="database">mmbase_db</property>
		<property name="host">localhost</property>
		<property name="port">3306</property>
		<property name="connections">20</property> <!-- size of connection pool -->
		<property name="queries">256</property>    <!-- connections are refreshed after 256 uses -->
		<property name="probetime">300</property>  <!-- running connections are checked once every 300 s -->
	</properties>
</module>
]]>
					</programlisting>
				</example>
		</para>
		<para>
			It is also possible to use the 'data-sources' of the application server. The jdbc.xml then looks like this:
			<example>
				<title>An example jdbc.xml, using data-source</title>
				<programlisting id="datasourcejdbc.xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//MMBase/ DTD module config 1.0//EN" "http://www.mmbase.org/dtd/module_1_0.dtd">
<module maintainer="mmbase.org" version="0">
	<status>active</status>
	<classfile>org.mmbase.module.database.Naming</classfile>
	<properties>
		<property name="context">java:comp/env</property>
		<property name="datasource">jdbc/MMBase</property>
	</properties>
</module>
]]>
					</programlisting>
				</example>
			So using this the configuration of the database is totally left to the application server.
			<note>If you plan to use a application server datasource with the new storage layer, you can also configure this in mmbaseroot.xml. In that case, you do not need the JDBC module, and can set it to inactive. See the <ulink url="../backenddevelopers/storage/index.html">storage documentation</ulink> for details.</note>
		 </para>
	</section>
	<section id="logging">
		<title>Configuring logging</title>
		<para>
			This section describes how the logging facilities of MMBase can be configured. It will focus on the default configuration, which is based on log4j.
		</para>
		<para>
			Information about concepts of log4j can be found <ulink url="http://jakarta.apache.org/log4j">here. </ulink>
		</para>
		<section id="settingup">
			<title>Setting up the logging system</title>
			<para>
				The logging system is set up with the file config/log/log.xml, which is an XML file with two entries:
				<variablelist>
					<varlistentry>
						<term>class</term>
						<listitem>
							<para>
								The class which implements the logging. The mmbase.jar provides now two classes which can be used for this.
								<variablelist>
									<varlistentry>
										<term><classname>org.mmbase.util.logging.SimpleImpl</classname></term>
										<listitem>
											<para>
												Provides a very simple implementation, which 'logs' on stdout or stderr. So it can not even log to a file by itself.
											</para>
										</listitem>
									</varlistentry>
									<varlistentry>
										<term><classname>org.mmbase.util.logging.log4j.Log4jImpl</classname></term>
										<listitem>
											<para>
												This is the advised and default. This implementation is based on the log4j system, and if this one is chosen, the log4j.jar is required. The version of log4j.jar must be 1.2.
											</para>
										</listitem>
									</varlistentry>
								</variablelist>
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>configuration</term>
						<listitem>
							<para>
								A string to configure the logging system. For 'SimpleImpl' this is: stderr|stdout[,&lt;logging
								level&gt;]. So you can only decide where the logging must appear, and below which level it should not log (the same levels as in the log4j implementation). For Log4jImpl it is a file name, in which the configuration is. This is an XML file according to the 'DOMConfigurator' of log4j. The rest of this document will give a short description of how this file looks like.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
		</section>
		<section>
			<title>Logging levels.</title>
			<para>
				The MMBase implementation of log4j has the following logging
				levels (from low to high).
				<orderedlist>
					<listitem><simpara>trace</simpara></listitem>
					<listitem><simpara>debug</simpara></listitem>
					<listitem><simpara>service</simpara></listitem>
					<listitem><simpara>info</simpara></listitem>
					<listitem><simpara>warn</simpara></listitem>
					<listitem><simpara>error</simpara></listitem>
					<listitem><simpara>fatal</simpara></listitem>
				</orderedlist>
			</para>
			<para>
				In the log4j implementation it is per category possible to set the 'logging level', which means that only above (and on) that level will be logged. In 'simple' implementation only one logging level can be set (and categories are ignored).
			</para>
			<para>
				In the log4j configuration file for log4j versions 1.1 and lower levels are called 'priorities'.
			</para>
		</section>
		<section>
			<title>Configuring the log4j implementation</title>
			<section>
				<title>Examples</title>
				<para>
					Everything which is described here will be much quicker clear if you have a few examples handy. A few are checked in the MMBase CVS with the names 'log4j.xml' (default), 'log4j.example1.xml' (use of two appenders), 'log4j.example2.xml' (XMLLayOut), 'log4j.example3.xml' (extra appender for important things). A few were provided by the log4j project itself too.
				</para>
			</section>
			<section>
				<title>Loggers/Categories</title>
				<para>
					A category is chain of string separated by dots, which works a little like name-spaces. This means that "A.B.C" is in the "A.B" category, and "A.B" is in the category "A".
				</para>
				<para>
					In MMBase it was chosen that categories fall together with Java class / package names. So if you want to set logging level for everything related with the security implementation you have to set the category "org.mmbase.security". All MMBase classes/packages can be found on www.mmbase.org.
				</para>
				<para>
					In the MMBase log4j implementation one extra category is defined, namely 'STDERR'. Everything which is produced on stderr somewhere in the mmbase code will be redirected to this logging category with priority (level) 'info'. Normally, this will not be much, but it can be handy during debugging of - for example - jsp pages.</para>
				<para>
					'Categories' inherit properties from each other (if nothing is overridden, then 'A.B.C' is like 'A.B'), and there is one 'root' category, from which all categories inherit.
				</para>
				<para>
					In the log4j XML configuration file, categories are present as 'logger' tags ('category' in older versions). The name attribute of the logger tag contains the category, the previously described string, which coincides with Java classes/packages.
				</para>
				<para>
					A special category is 'root', which describes the basic properties of all categories. It is described with the 'root' tag. </para>
				<para>
					The logging 'level' can be set per category/log by a sub tag of 'logger', named 'level'. The level class was overridden by MMBase so the 'class' attribute must be present on every occurrence. The value of this can be stored in an XML entity (&amp;mmlevel;). The actual value is set by the 'value' attribute.
				</para>
				<para>
					The root tag must appear after the logger tags. </para>
			</section>
			<section>
				<title>Appenders</title>
				<para>
					Think of an appender as a 'log file'. You can configure several appenders. Here is a typical appender configuration:
					<example>
						<title>Appenders</title>
						<programlisting>
					<![CDATA[
<appender name="logfile" class="org.apache.log4j.FileAppender" >
	<param name="File"   value="&logdir;mmbase.log" />
	<param name="Append" value="true" />
	<layout class="org.apache.log4j.PatternLayout">
		<param name="ConversionPattern" value="%d{ABSOLUTE} %-5p - %m%n" />
	</layout>
</appender>
]]>
						</programlisting>
					</example>
					Here is described that the appender is a file, and that the filename is 'mmbase.log' in the directory described by the entity &amp;logdir;. It appends the logging to the end if the files exist already. The precise format of one line is described too, and is in this case defined by the Java class "org.apache.log4j.PatternLayout". The documentation of this class, and of the 'ConversionPattern' parameters can be found here. The conversion pattern can have an influence on the over all performance, so you have to be careful with it.
				</para>
				<para>
					Normally the root category will specify to which appender all categories will log (The appender-ref tag in the root tag). A category can specify an additional appender. If you want to avoid that this category also logs to the appender of 'root' you can use the attribute 'additivity' of the category tag.
				</para>
				<para>
					It would e.g. be interesting to log security related issues to a separate logfile, but not to the 'main' log file. Then a new appender must be defined, with name 'securityfile', and the category entry for 'org.mmbase.security' could look like this:
					<example>
						<title>Category</title>
						<programlisting>
							<![CDATA[
<logger name="org.mmbase.security" additivity="false" >
		<level class="&mmlevel;" value ="info" />
		<appender-ref ref="securityfile" />
</logger>
]]>
						</programlisting>
					</example>
				</para>
				<para>
					Per 'FileHandler' also the parameter 'Threshold' can be set, which
					makes it possible to set the logging priority for an appender, which
					means that logging events below this threshold are not logged to this
					appender regardless of the setting of the category. </para>
				<para>
					This describes the functionality of log4j as far as we foresee needing it. As one can see in the log4j javadoc there is much more functionality available (specialized appenders (for example which are rotated), layouts etc).
				</para>
			</section>
		</section>
	</section>
	<section id="caches">
		<title>Caches</title>
		<para>
			MMBase has several caches, which can be configured by a file 'caches.xml' which must be in in the MMBase configuration directory.
		</para>
		<example>
			<title>Caches</title>
			<programlisting>
<![CDATA[
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE caches PUBLIC "-//MMBase/DTD cache config 1.0//EN" "http://www.mmbase.org/dtd/caches_1_0.dtd">

<caches>
	<!-- ================================================================================
	Node caches
	================================================================================  -->

	<!-- simple nodes -->
	<cache name="Nodes">
		<status>active</status>
		<size>4096</size>
	</cache>
 .....

</caches>
]]>
			</programlisting>
		</example>
		<para>
			As can be seen in this example, per cache can be configured if it should be active or not and how big it should be.
		</para>
		<para>
			In caches.xml itself you should see which caches can be configured, and also a description about what exactly they actually cache.  Defaults cache sizes are chosen to be reasonable, deviating from the defaults should be done with good reason.
		</para>
	</section>
	<appendix id="XML">
		<title>XML</title>
		<para>
			Some words about XML, XML Entities and so on. Not directly related to MMBase.
		</para>
		<section id="dtd">
			<title>DTD's and validation</title>
			<para>
				The format of XML's is defined by dtd's. All MMBase specific XML's (recognizable by the DOCTTYPE) are validated when parsed (from MMBase 1.6 onwards). This means that the dtd's for all these XML type must be available. They are available in the mmbase.jar, so you normally will not have to worry about them. You can store them in config/dtd where MMBase will find them first, so you could override the ones in the jar (useful during development). It they cannot be found, validation will occur with an empty DTD, resulting in lots of errors in your log.
				<!-- TODO: We should try to use schema's, for
				validation and auto-generation of documentation -->
			</para>
			<para>
				Validation of non MMBase specific xml's, like web.xml and 'log4j.xml' is left to the applications responsible for them (application server and log4j in these cases).
			</para>
		</section>
		<section id="xml.entities">
			<title>XML Entities</title>
			<para>
				Entities are an XML concept. They work a little like constants. In the examples log4j XML configuration files, they are used to store some information in a centralized way. (classnames, log directories). Entities can be recognized by the &amp;-sign.
			</para>
		</section>
	</appendix>
</article>