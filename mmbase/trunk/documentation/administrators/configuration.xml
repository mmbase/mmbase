<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"
[
]>
  <article>
    <articleinfo>
      <date>$Id: configuration.xml,v 1.3 2002-08-13 04:49:57 michiel Exp $</date>
      <title>MMBase configuration documentation</title>
    </articleinfo>
    <section>
      <title>Introduction</title>
      <para>
        The MMBase configuration can be found in WEB-INF/config. this
        directory will be referred to as 'config'.
      </para>
    </section>
    <section id="builders">
    <title>Builders</title>
      <para>
        'Builder' is another word for 'object-type'. The
        builder-definitions of your MMBase can be found in
        config/builders and subdirectories.
      </para>
      <section>
        <title>builder.dtd , builders as urls,people,images ... </title>
        <variablelist>
          <varlistentry>
            <term>&lt;builder maintainer="mmbase.org" version="0"&gt;</term>
            <listitem>
              <para>
                This file contains all the settings for one builder
              </para>
              <variablelist>
                <varlistentry>
                  <term>maintainer</term>
                  <listitem><para>maintainer of the builder defined as a domain</para></listitem>
                </varlistentry>
                <varlistentry>
                  <term>version</term>
                  <listitem><simpara>version of the builder</simpara></listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>
          <varlistentry>          
            <term>&lt;status&gt;active&lt;/status&gt;</term>
            <listitem><simpara>state of the builder either active or inactive</simpara></listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <section id="databases">
      <title>Databases</title>
      <para>
        In the databases subdirectory of the configuration you find the
      xml's describing the supported databases. In an actual
      installion, all but one can be removed.
    </para>
    </section>
    <section id="logging">
      <title>Configuring logging</title>
      <para>
        This document describes how the logging facilities of MMBase can be
        configured. It will focus on the default configuration, which is based
        on log4j.
      </para> 
      <para>
        Information about concepts of log4j can be found 
        <ulink url="http://jakarta.apache.org/log4j">here. </ulink>
      </para>  
      <section id="settingup">
      <title>Setting up the logging system</title>
        <para>
          The logging system is set up with the file config/log/log.xml, which is an XML file with two entries: 
          <variablelist>
            <varlistentry>
              <term>class</term>
              <listitem>
                <para>
                  The class which implements the logging. The mmbase.jar provides
                  now two classes which can be used for this.
                  <variablelist>
                    <varlistentry>
                      <term><classname>org.mmbase.util.logging.SimpleImpl</classname></term>
                      <listitem>
                        <para>
                          Provides a very simple implementation, which 'logs' on
                          stdout or stderr. So it can not even log to a file by
                          itself.
                        </para>
                      </listitem>
                    </varlistentry>
                    <varlistentry>
                      <term><classname>org.mmbase.util.logging.log4j.Log4jImpl</classname></term>
                      <listitem>
                        <para>
                          This is the adviced and default. This implementation is
                          based on the log4j system, and if this one is chosen, the
                          log4j.jar is required. The version of log4j.jar must be
                          1.1. Probably a 1.2 version will not work.
                        </para>
                      </listitem>
                    </varlistentry>
                  </variablelist>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>      
              <term>configuration</term>
              <listitem>
                <para>
                  A string to configure the logging system. For
                  'SimpleImpl' this is: stderr|stdout[,&lt;logging
                  level&gt;]. So you can only decide where the logging
                  must appear, and below which level it should not log
                  (the same levels as in the log4j implementation). For
                  Log4jImpl it is a file name, in which the
                  configuration is. This is an XML file according to the
                  `DOMConfigurator' of log4j. The rest of this document
                  will give a short description of how this file looks
                  like.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
      </section>
      <section>
        <title>Logging levels.</title>
        <para>
          The MMBase implementation of log4j has the following logging
          levels (from low to high).
          <orderedlist>
            <listitem><simpara>trace</simpara></listitem>
            <listitem><simpara>debug</simpara></listitem>
            <listitem><simpara>service</simpara></listitem>
            <listitem><simpara>info</simpara></listitem>
            <listitem><simpara>warn</simpara></listitem>
            <listitem><simpara>error</simpara></listitem>
            <listitem><simpara>fatal</simpara></listitem>
          </orderedlist>
        </para>
        <para>
          In the log4j implementation it is per category possible to set the
          'logging level', which means that only above (and on) that level will
          be logged. In 'simple' implementation only one logging level can be
          set (and categories are ignored). 
        </para>
        <para>
          In the log4j configuration file, levels are called 'priorities'. At
          least in version 1.1, perhaps this will be different in next versions.
        </para>
      </section>
      <section> 
        <title>Configuring the log4j implementation</title>
        <section>
          <title>Examples</title>
          <para>
            Everything which is described here will be much quicker clear if you
            have a few examples handy. A few are checked in the MMBase CVS with
            the names 'log4j.xml' (default), 'log4j.example1.xml' (use of two
            appenders), 'log4j.example2.xml' (XMLLayOut), 'log4j.example3.xml'
            (extra appender for important things). A few were provied by the log4j
            project itself too.
          </para>
        </section>
        <section>
          <title>Categories</title>
          <para>
            A category is chain of string seperated by dots, which works a little
            like namespaces. This means that "A.B.C" is in the "A.B" category, and
            "A.B" is in the category "A". </para>
          <para>
            In MMBase it was chosen that categories fall together with java class
            / package names. So if you want to set logging level for everything
            related with the security implementation you have to set the category
            "org.mmbase.security". All MMBase classes/packages can be found on
            www.mmbase.org. </para>
          <para>
            In the MMBase log4j implementation one extra category is defined,
            namely 'STDERR'. Everything which is produced on stderr somewhere in
            the mmbase code will be redirected to this logging category with
            priority (level) 'info'. Normally, this will not be much, but it can
            be handy during debugging of - for example - jsp pages. </para>
          <para>
            'Categories' inherit properities from each other (if nothing is
            overridden, then 'A.B.C' is like 'A.B'), and there is one 'root'
            category, from which all categories inherit. </para>
          <para>In the log4j XML configurion file, categories are present as
            'category' tags. Since the default log4j class for it was overridden
            the 'class' attribute must be present on each category tag. The value
            of it can be stored in an XML entity (&amp;logger;). The name of the
            category is the previously described string, which coincides with java
            classes/packages. </para>
          <para>
            A special category is 'root', which describes the basic properities of
            all categories. It is described with the 'root' tag. </para>
          <para>
            The logging 'level' can be set per category by a sub tag of
            'category', named 'priority'. Also the priorty class was overridden by
            MMBase so the 'class' attribute must be present on every
            occurence. The actual value is set by the 'value' attribute. </para>
          <para>
            The root tag must appear after the category tags. </para>
        </section>
        <section>
          <title>Appenders</title>
          <para>
            Think of an appender as a 'log file'. You can configure several
            appenders. Here is a typical appender configuration: 
            <example>
              <title>Appenders</title>
              <programlisting>
          <![CDATA[
<appender name="logfile" class="org.apache.log4j.FileAppender" >
  <param name="File"   value="&logdir;mmbase.log" />
  <param name="Append" value="true" />
  <layout class="org.apache.log4j.PatternLayout">
    <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p - %m%n" />
  </layout>
</appender>
]]>
            </programlisting>
            </example>
            Here is described that the appender is a file, and that the filename
            is 'mmbase.log' in the directory described by the entity &amp;logdir;. It
            appends the logging to the end if the files exist allready. The
            precise format of one line is described too, and is in this case
            defined by the java class "org.apache.log4j.PatternLayout". The
            documentation of this class, and of the 'ConversionPattern' parameters
            can be found here. The conversion pattern can have an influence on the
            over all performance, so you have to be careful with it.
          </para>
          <para>
            Normally the root category will specify to which appender all
            categories will log (The appender-ref tag in the root tag). A category
            can specify an additional appender. If you want to avoid that this
            category also logs to the appender of 'root' you can use the attribute
            'additivity' of the category tag. 
          </para>
          <para>
            It would e.g. be interesting to log security related issues to a
            seperate logfile, but not to the 'main' log file. Then a new appender
            must be defined, with name 'securityfile', and the category entry for
            'org.mmbase.security' could look like this: 
            <example>
              <title>Category</title>
              <programlisting>
                <![CDATA[
                <category name="org.mmbase.security" class ="&logger;" additivity="false" >
                <priority class="&priority;" value ="info" />
  <appender-ref ref="securityfile" />
</category>
]]>
              </programlisting>
            </example>
          </para>
          <para>
            Per 'FileHandler' also the parameter 'Threshold' can be set, which
            makes it possible to set the logging priority for an appender, which
            means that loging events below this treshold are not logged to this
            appender regardless of the setting of the category. </para>
          <para>
            This describes the functionality of log4j as far as we
            foresee needing it. As one can see in the log4j javadoc
            there is much more functionality available (specialized
            appenders (for example which are rotated), layouts etc).
        </para>
        </section>
      </section>
    </section>
    <section id="caches">
      <title>Caches</title>
        <para>
          MMBase has several caches, which can be configured by a file
          'caches.xml' which must be in in the MMBase configuration directory.
        </para>
        <example>
        <title>Caches</title>
      <programlisting>
<![CDATA[
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE caches PUBLIC "-//MMBase/DTD cache config 1.0//EN" "http://www.mmbase.org/dtd/caches_1_0.dtd">

<caches>
  <!-- ================================================================================
  Node caches
  ================================================================================  -->

  <!-- simple nodes -->
  <cache name="Nodes">
    <status>active</status>
    <size>4096</size>
  </cache>
 .....

</caches>
]]>
      </programlisting>
    </example>
    <para>
      As can be seen in this example, per cache can be configured if it should be active or not and how big it should be. 
    </para>
    <para>
      In caches.xml you can also see which caches can be configured. 
      Defaults are chosen to be reasonable, deviating for the defaults should be done with good reason. 
    </para>
  </section>
  <appendix id="XML">
    <title>XML</title>
    <para>
      Some words about XML, XML Entities and so on. Not related to
      MMBase.
    </para>
    <section id="dtd">
      <title>DTD</title>
      <para>
        The format of XML's is defined by dtd's. 
      </para>
    </section>
    <section id="xml.entities">
      <title>XML Entities</title>
      <para>
        Entities are an XML concept. They work a little like
        contants. In the examples log4j XML configuration files, they
        are used to store some information in a centralized
        way. (classnames, log directories).
      </para>
    </section>
    </appendix>
  </article>
      