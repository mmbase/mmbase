<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<article class="specification">
  <articleinfo>
    <title>Component Framework</title>

    <date>2006-10-13</date>

    <edition>$Id: components.xml,v 1.0 2006/10/03 08:17:09 henk Exp
    $</edition>

    <authorgroup>
      <author>
        <firstname>Nico</firstname>

        <surname>Klasens</surname>
      </author>

      <author>
        <firstname>Henk Hangyi</firstname>
      </author>
    </authorgroup>

    <revhistory>
      <revision>
        <revnumber>[0.1]</revnumber>

        <date>[2006-10-13 ]</date>

        <authorinitials>[HH]</authorinitials>

        <revremark>[Created]</revremark>
      </revision>
    </revhistory>

    <abstract>
      <para>This document describes the MMBase component framework.</para>
    </abstract>

    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified
      is a certification mark of the Open Source Initiative.</para>

      <para>The license (Mozilla version 1.0) can be read at the MMBase site.
      See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>

    <productnumber>Component Framework from MMBase 1.9.</productnumber>
  </articleinfo>

  <section id="introduction">
    <title>Introduction</title>

    <para>The component framework offers component based developing within
    MMBase. Components can be used accessed from jsp-pages directly or be used
    in a portlet engine / portal service. For use in jsp-pages MMBase offers
    tags in the MMBase taglig which put the compenents into action and render
    their content into your page. When using a portlet engine and portal
    service, like the CMSContainer, this engin takes care of analyzing the
    client request, make the selected portlets execute and render their
    content and return the resulting page to the client.</para>
  </section>

  <section id="hello_world">
    <title>Hello World!</title>

    <para>Lets start with a simple example. The following configuration file
    for component "core" defines one block "components". This block has one
    view that renders the body.</para>

    <note>
      <para>The configuration files for the mmbase core are stored in the
      \mmbase\config\ directory. This file can therefore be found in
      \mmbase\config\components\core.xml. TODO: the files for the MMBase core
      should be moved to \mmbase\core\</para>
    </note>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;component
    name="core"
    defaultblock="components"
    xmlns="http://www.mmbase.org/xmlns/component"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mmbase.org/xmlns/component
                        http://www.mmbase.org/xmlns/component.xsd"&gt;
  &lt;description xml:lang="en"&gt;MMBase core components&lt;/description&gt;
  &lt;block name="components" mimetype="text/html"&gt;
    &lt;body jsp="/mmbase/admin/components.jspx" /&gt;
  &lt;/block&gt;
&lt;/component&gt;</programlisting>

    <para>The jsp-include "/mmbase/admin/components.jspx" could look
    like:</para>

    <programlisting>&lt;?xml version="1.0"?&gt;
&lt;div xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:jsp="http://java.sun.com/JSP/Page" 
      xmlns:mm="http://www.mmbase.org/mmbase-taglib-2.0"&gt;
  &lt;jsp:output doctype-root-element="html" doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"/&gt;
  &lt;mm:content type="text/html" language="en" expires="0"&gt;
    &lt;h1&gt;Components admin page&lt;/h1&gt;
    Hello World!
  &lt;/mm:content&gt;
&lt;/div&gt;</programlisting>

    <para>To render this, a jsp-page has to contain the following tag:</para>

    <para>&lt;mm:component name="core" block="components" render="body"
    /&gt;</para>
  </section>

  <section id="configuration">
    <title>Configuration of a component</title>

    <para>The core of a component is the component.xml. It specifies the
    blocks in the component and the views rendered within each block. The
    following example provides the ecards.xml for an ecard component.</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;component
    name="ecards"
    defaultblock="home"
    xmlns="http://www.mmbase.org/xmlns/component"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mmbase.org/xmlns/component
                        http://www.mmbase.org/xmlns/component.xsd"&gt;
  &lt;description&gt;Ecards component&lt;/description&gt;
  &lt;block name="home" mimetype="text/html"&gt;
    &lt;head jsp="ecards_head.jsp" /&gt;
    &lt;body jsp="ecards.jsp" /&gt;
    &lt;process class="org.mmbase.ecards.Process" /&gt;
  &lt;/block&gt;
  &lt;block name="select" mimetype="text/html"&gt;
    &lt;head jsp="ecards_head.jsp" /&gt;
    &lt;body jsp="ecards_selectecard.jsp" /&gt;
    &lt;process class="org.mmbase.ecards.Process" /&gt;
  &lt;/block&gt;
  &lt;block name="done" mimetype="text/html"&gt;
    &lt;head jsp="ecards_head.jsp" /&gt;
    &lt;body jsp="ecards_done.jsp" /&gt;
    &lt;process class="org.mmbase.ecards.Process" /&gt;
  &lt;/block&gt;
&lt;/component&gt;</programlisting>

    <para>In the above example some views are rendered by jsp-includes, other
    views are rendered by java classes. The information available to the jsp
    files are the request parameters and session attributes. For the java
    classes the information is available from HttpServletRequest request and
    HttpServletResponse response. Btw. by using request.getSession() the
    session in which the view is rendered can be accessed.</para>
  </section>

  <section>
    <title>The &lt;mm:component /&gt; tag</title>

    <para>In the "Hello World" example the following tag was used:</para>

    <para>&lt;mm:component name="core" block="components" render="body"
    /&gt;</para>

    <section>
      <title>defaults</title>

      <para>The default block can be specified by using the defaultblock
      attribute of the &lt;component /&gt; tag. In the "Hello World" example
      it is defaultblock="components". If no defaultblock is specified the
      first block is considered to be the default block. The default view that
      is rendered is body. By using the defaults the tag could be rewritten
      to:</para>

      <para>&lt;mm:component name="core" /&gt;</para>

      <para>When a view for a block is not specified, rendering it will result
      in nothing.</para>
    </section>

    <section>
      <title>mimetype</title>

      <para>The mimetype can be used to indicate that the portlet is rendering
      special file types like images, attachments, etc. In the example above
      the we could have used mimetype="application/xhtml+xml". Where Firefox
      interpretes this filetype correctly and will check the validity of the
      page, the present versions of Internet Explorer will prompt the user to
      download this page. Because of this IE bug it is better to use
      "text/html".</para>
    </section>

    <section>
      <title>position of includes</title>

      <para>Here the jsp include "/mmbase/admin/components.jspx" is positioned
      absolute to the root of the webapplication. By setting the request
      parameter doMakeRelative to true, the jsp include is can be positioned
      relative to the jsp page that contains the &lt;mm:component /&gt;
      tag.</para>
    </section>

    <section>
      <title>parameters</title>

      <para>When the &lt;mm:component /&gt; tag is contained in another tag
      all the information from the containing tag is accessable to the
      &lt;mm:component /&gt; tag. For instance in the situation &lt;mm:cloud
      jspvar="cloud"&gt;&lt;mm:component name="core" /&gt;&lt;/mm:cloud&gt;
      the components.jspx could contain &lt;%= cloud.getUser.getIdentifier()
      %&gt;.</para>

      <para>When it is necessary to include extra parameters this can be done
      by using the &lt;mm:param /&gt; tag. E.g. &lt;mm:component
      name="my_game"&gt;&lt;mm:param name="level" value="novice"
      /&gt;&lt;/mm:component&gt;</para>
    </section>
  </section>

  <section>
    <title>Framework</title>

    <para>TODO</para>
  </section>

  <section id="action_flow">
    <title>Action flow within the portlet engine / portal service</title>

    <para>To give an idea of how a portlet engine / portal service works this
    sections gives an overview of the flow of actions that take place when a
    client calls an url:</para>

    <orderedlist>
      <listitem>
        <para>Client calls url</para>
      </listitem>

      <listitem>
        <para>Tomcat (or other application server) routes url to web
        application of the portal</para>
      </listitem>

      <listitem>
        <para>A servlet inside the portal web application receives the
        url</para>
      </listitem>

      <listitem>
        <para>Portal servlet will analyze the request</para>

        <itemizedlist>
          <listitem>
            <para>global navigation path to a page</para>
          </listitem>

          <listitem>
            <para>local navigation for the portlet (indicates which portlet is
            active in this call)</para>
          </listitem>

          <listitem>
            <para>window state for each portlet</para>
          </listitem>

          <listitem>
            <para>portlet mode for each portlet</para>
          </listitem>

          <listitem>
            <para>render parameters for each portlet</para>
          </listitem>

          <listitem>
            <para>action parameters from query string</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Start of action phase</para>

        <itemizedlist>
          <listitem>
            <para>Portal servlet resolves portlet instance which user wants to
            interact with</para>
          </listitem>

          <listitem>
            <para>Portal servlet creates ActionRequest and ActionResponse
            objects</para>
          </listitem>

          <listitem>
            <para>Portal servlet dispatches ActionRequest to the servlet which
            hosts the portlet instance for the action phase and sends the
            action parameters</para>
          </listitem>

          <listitem>
            <para>Portlet instance processes the action parameters maybe with
            the help of its own presentation framework (struts, jsf, jsp,
            tapestry, wicket, whatever)</para>
          </listitem>

          <listitem>
            <para>Portlet instance can change things in the request, session,
            preferences, external system, database, etc.</para>
          </listitem>

          <listitem>
            <para>Portlet instance modifies ActionResponse to tell the Portal
            servlet what should happen next. Redirect to client or render
            phase.</para>
          </listitem>

          <listitem>
            <para>Portal Servlet receives ActionResponse and acts on it</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Start of render phase</para>

        <itemizedlist>
          <listitem>
            <para>Portal servlet resolves page object from global
            navigation.</para>
          </listitem>

          <listitem>
            <para>Portal servlet retrieves all portlet instances on the page.
            For each portlet (in MMBase ComponentPortlet which contains a
            Component) instance</para>

            <itemizedlist>
              <listitem>
                <para>Portal servlet creates RenderRequest and RenderResponse
                objects</para>
              </listitem>

              <listitem>
                <para>Portal servlet dispatches RenderRequest to the servlet
                which hosts the portlet instance.</para>
              </listitem>

              <listitem>
                <para>Portlet instances reads portlet mode and window state.
                (in MMBase block; a block can render multiple views)</para>
              </listitem>

              <listitem>
                <para>Portlet instances calls his own presentation framework
                (struts, jsf, jsp, tapestry, wicket, whatever).</para>
              </listitem>

              <listitem>
                <para>Portlet instances writes markup fragment to
                RenderResponse.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Portal servlet retrieves page template</para>
          </listitem>

          <listitem>
            <para>Portal servlet decorates portlet RenderResponse outputs with
            window and portlet mode buttons and inserts it in the page
            template.</para>
          </listitem>

          <listitem>
            <para>Final result is written to client response</para>
          </listitem>

          <listitem>
            <para>Portal servlet returns response to the client.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <para>In the above flow no separation is made between portal service and
    the portlet engine (eg pluto). The portlet engine provides the runtime
    environment for the portlet instances. The portal service does all page
    related stuff.</para>
  </section>

  <section id="cmsc">
    <title>The CMSContainer: portlets and components</title>

    <para>The CMSContainer is one of the MMBase contributions. For
    documentation of the CMSContainer see the reference list at the end of
    this document. This section addresses the relation between portlets and
    components.</para>

    <section>
      <title>Using components as portlets</title>

      <para>A wrapper class will be developed in the CMSContainer, which makes
      it possible to use any MMBase component in the CMSContainer. This means
      that for the components the CMSContainer will use the components.xml
      from the component instead of the project.xml that is used for the
      portlets in the CMSContainer</para>
    </section>

    <section>
      <title>Using portlets as components</title>

      <para>The other way around the situation is more difficult. When
      portlets depend on the objectmodel of the CMSContainer it is not
      possible to rewrite them to MMBase components that can be reused outside
      the CMSContainer. Only for portlets that do not depend explicitly on the
      objectmodel of the CMSContainer it will be possible to rewrite them into
      components.</para>
    </section>
  </section>

  <section id="location_of_files">
    <title>Some notes on the location of files</title>

    <para>It is handy to use the same structure to store the files of a
    component within an application or contribution. When it comes to
    building, the exact location is of minor importance because the build
    process can reshuffle directories to get them into the right location in
    the build. Below follows an overview of how files are structured at the
    moment.</para>

    <section>
      <title>Applications and contributions</title>

      <para>In the 1.8 MMBase applications and contributions files are stored
      in the following directories:</para>

      <itemizedlist>
        <listitem>
          <para>MyApplication</para>

          <itemizedlist>
            <listitem>
              <para>config</para>

              <itemizedlist>
                <listitem>
                  <para>applications</para>

                  <itemizedlist>
                    <listitem>
                      <para>MyApplication.xml</para>
                    </listitem>

                    <listitem>
                      <para>MyApplication</para>

                      <itemizedlist>
                        <listitem>
                          <para>builders</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>builders</para>
                </listitem>

                <listitem>
                  <para>functions</para>
                </listitem>

                <listitem>
                  <para>log</para>
                </listitem>

                <listitem>
                  <para>modules</para>
                </listitem>

                <listitem>
                  <para>security</para>
                </listitem>

                <listitem>
                  <para>thememanager</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>documentation</para>
            </listitem>

            <listitem>
              <para>packaging: what to do this?</para>
            </listitem>

            <listitem>
              <para>templates</para>
            </listitem>

            <listitem>
              <para>src</para>
            </listitem>

            <listitem>
              <para>META-INF</para>
            </listitem>

            <listitem>
              <para>WEB-INF</para>
            </listitem>

            <listitem>
              <para>readme.txt</para>
            </listitem>

            <listitem>
              <para>build.xml</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>The CMSContainer</title>

      <para>The CMSContainer contains several portlets, which all can be
      viewed as seperate applications. These portlets can be found in
      \contributions\CMSContainer\cmsc. For the CMSC the Maven preferred way
      of storing files is used. The files of these portlets are stored in the
      following directories:</para>

      <itemizedlist>
        <listitem>
          <para>config</para>
        </listitem>

        <listitem>
          <para>resources: resource bundles and property files</para>
        </listitem>

        <listitem>
          <para>src</para>

          <itemizedlist>
            <listitem>
              <para>java</para>
            </listitem>

            <listitem>
              <para>tld</para>
            </listitem>

            <listitem>
              <para>webapp</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>project.xml</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Didactor</title>

      <para>In Didactor the components are structured as follows</para>

      <itemizedlist>
        <listitem>
          <para>mycomponent</para>

          <itemizedlist>
            <listitem>
              <para>config</para>

              <itemizedlist>
                <listitem>
                  <para>applications</para>

                  <itemizedlist>
                    <listitem>
                      <para>MyComponent</para>

                      <itemizedlist>
                        <listitem>
                          <para>MyComponent.xml</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>components</para>

                  <itemizedlist>
                    <listitem>
                      <para>mycomponent.xml</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>translations</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>java</para>
            </listitem>

            <listitem>
              <para>lib</para>
            </listitem>

            <listitem>
              <para>templates</para>
            </listitem>

            <listitem>
              <para>webinf</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Component Framework (MMBase 1.9)</title>

      <para>For the file structure of components the following principle will
      be used. </para>

      <itemizedlist>
        <listitem>
          <para>MyContribution</para>

          <itemizedlist>
            <listitem>
              <para>components</para>

              <itemizedlist>
                <listitem>
                  <para>mycomponent1</para>

                  <itemizedlist>
                    <listitem>
                      <para>config</para>

                      <itemizedlist>
                        <listitem>
                          <para>mycomponent.xml</para>
                        </listitem>

                        <listitem>
                          <para>model.xml</para>
                        </listitem>

                        <listitem>
                          <para>builders</para>
                        </listitem>

                        <listitem>
                          <para>data</para>
                        </listitem>

                        <listitem>
                          <para>functions</para>
                        </listitem>

                        <listitem>
                          <para>log</para>
                        </listitem>

                        <listitem>
                          <para>modules</para>
                        </listitem>

                        <listitem>
                          <para>security</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>

                    <listitem>
                      <para>documentation</para>
                    </listitem>

                    <listitem>
                      <para>editwizards</para>
                    </listitem>

                    <listitem>
                      <para>templates</para>
                    </listitem>

                    <listitem>
                      <para>src</para>
                    </listitem>

                    <listitem>
                      <para>resources</para>
                    </listitem>

                    <listitem>
                      <para>tld / META-INF</para>
                    </listitem>

                    <listitem>
                      <para>WEB-INF</para>
                    </listitem>

                    <listitem>
                      <para>project.xml</para>
                    </listitem>

                    <listitem>
                      <para>readme.txt</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>mycomponent2</para>
                </listitem>

                <listitem>
                  <para>mycomponent3</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>documentation</para>
            </listitem>

            <listitem>
              <para>build.xml</para>
            </listitem>

            <listitem>
              <para>readme.txt</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <note>
        <para>In the new structure the applications directory is replaced by
        the model.xml file in the config directory of the component and a data
        directory containing the default data for the component, the "apps1"
        xml dump.</para>
      </note>

      <note>
        <para>The editwizards are stored in a seperate directory. In this way
        the build process itself can move the editwizards to the directory
        where the target application expects them.</para>
      </note>

      <note>
        <para>The lib directory is not necessary because the needed jar files
        are specified in the project.xml and will be downloaded during the
        build.</para>
      </note>
    </section>
  </section>

  <section id="references">
    <title>References</title>

    <para>The following documents can be used for further reading.</para>

    <itemizedlist>
      <listitem>
        <para>Presentation on JSR168 by Nico Klasens <ulink
        url="???">http://www.mmbase.org/mmbase/attachments/50434/JSR168.zip</ulink></para>
      </listitem>

      <listitem>
        <para>An MMBase Component Framework by Johannes Verelst<ulink
        url="???">
        http://www.mmbase.org/mmbase/attachments/50347/MMBase_framework_-_tech.doc</ulink></para>
      </listitem>

      <listitem>
        <para>Design CMS Container by Nico Klasens <ulink
        url="???">http://cmsc.finalist.com/Design CMSC.pdf</ulink> or <ulink
        url="???">http://cvs.mmbase.org/viewcvs/*checkout*/speeltuin/applications/cmsc/Design
        CMSC.pdf</ulink></para>
      </listitem>

      <listitem>
        <para>What Is a Portlet <ulink
        url="???">http://www.onjava.com/lpt/a/6208</ulink></para>
      </listitem>
    </itemizedlist>
  </section>
</article>