<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<article class="specification">
  <articleinfo>
    <title>Component Framework</title>

    <date>2006-10-13</date>

    <edition>$Id: components.xml,v 1.0 2006/10/03 08:17:09 henk Exp
    $</edition>

    <authorgroup>
      <author>
        <firstname>Nico</firstname>

        <surname>Klasens</surname>
      </author>

      <author>
        <firstname>Henk Hangyi</firstname>
      </author>
    </authorgroup>

    <revhistory>
      <revision>
        <revnumber>[0.1]</revnumber>

        <date>[2006-10-13 ]</date>

        <authorinitials>[HH]</authorinitials>

        <revremark>[Created]</revremark>
      </revision>
    </revhistory>

    <abstract>
      <para>This document describes the MMBase component framework.</para>
    </abstract>

    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified
      is a certification mark of the Open Source Initiative.</para>

      <para>The license (Mozilla version 1.0) can be read at the MMBase site.
      See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>

    <productnumber>Component Framework from MMBase 1.9.</productnumber>
  </articleinfo>

  <section id="introduction">
    <title>Introduction</title>

    <para>The component framework adds component based developing to MMBase.
    Components can be accessed from jsp-pages directly or be used in a portlet
    engine / portal service. For use in jsp-pages MMBase offers tags in the
    MMBase taglig which put the components into action and render their
    content into your page. When using a portlet engine and portal service,
    like the CMSContainer, this engine takes care of analyzing the client
    request, make the selected portlets execute and render their content and
    return the resulting page to the client.</para>
  </section>

  <section id="hello_world">
    <title>Hello World!</title>

    <para>Lets start with a simple example. The following configuration file
    for component "core" defines one block "components". This block has one
    renderer that can be used in the html <body /> tag.</para>

    <note>
      <para>The configuration files for the mmbase core are stored in the
      \mmbase\config\ directory. This file can therefore be found in
      /mmbase/config/components/core.xml. TODO: the files for the MMBase core
      should be moved to /mmbase/core/</para>
    </note>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;component
    name="core"
    defaultblock="components"
    xmlns="http://www.mmbase.org/xmlns/component"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mmbase.org/xmlns/component
                        http://www.mmbase.org/xmlns/component.xsd"&gt;
  &lt;description xml:lang="en"&gt;MMBase core components&lt;/description&gt;
  &lt;block name="components" mimetype="text/html"&gt;
    &lt;body jsp="/mmbase/admin/components.jspx" /&gt;
  &lt;/block&gt;
&lt;/component&gt;</programlisting>

    <para>The jsp-include "/mmbase/admin/components.jspx" could look
    like:</para>

    <programlisting>&lt;?xml version="1.0"?&gt;
&lt;div xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:jsp="http://java.sun.com/JSP/Page" 
      xmlns:mm="http://www.mmbase.org/mmbase-taglib-2.0"&gt;
  &lt;jsp:output doctype-root-element="html" doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"/&gt;
  &lt;mm:content type="text/html" language="en" expires="0"&gt;
    &lt;h1&gt;Components admin page&lt;/h1&gt;
    Hello World!
  &lt;/mm:content&gt;
&lt;/div&gt;</programlisting>

    <para>To render this, a jsp-page has to contain the following tag:</para>

    <para>&lt;mm:component name="core" block="components" render="body"
    /&gt;</para>
  </section>

  <section id="configuration">
    <title>Configuration of a component</title>

    <para>The core of a component is the component.xml. It specifies the
    blocks in the component and the renderes within each block. The following
    example provides the ecards.xml for an ecard component.</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;component
    name="ecards"
    defaultblock="home"
    xmlns="http://www.mmbase.org/xmlns/component"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mmbase.org/xmlns/component
                        http://www.mmbase.org/xmlns/component.xsd"&gt;
  &lt;description&gt;Ecards component&lt;/description&gt;
  &lt;block name="home" mimetype="text/html"&gt;
    &lt;process jsp="ecards_init.jsp" /&gt;
    &lt;head jsp="ecards_head.jsp" /&gt;
    &lt;body jsp="ecards.jsp" /&gt;
  &lt;/block&gt;
  &lt;block name="select" mimetype="text/html"&gt;
    &lt;head jsp="ecards_head.jsp" /&gt;
    &lt;body jsp="ecards_selectecard.jsp" /&gt;
  &lt;/block&gt;
  &lt;block name="done" mimetype="text/html"&gt;
    &lt;process class="org.mmbase.ecards.Send" /&gt;
    &lt;head jsp="ecards_head.jsp" /&gt;
    &lt;body jsp="ecards_done.jsp" /&gt;
  &lt;/block&gt;
&lt;/component&gt;</programlisting>

    <para>In the above example some renderes are jsp-includes, other are java
    classes. The information available to the jsp files are the request
    parameters, session attributes and the tags in which the &lt;mm:content
    /&gt; tag is contained. For the java classes the information is available
    from HttpServletRequest request and HttpServletResponse response. Btw. by
    using request.getSession() the session in which the block is rendered can
    be accessed.</para>
  </section>

  <section>
    <title>The &lt;mm:component /&gt; tag</title>

    <para>This section provides an overview over the parameters and
    functionality of the &lt;mm:content /&gt; tag.</para>

    <section>
      <title>defaults</title>

      <para>In the "Hello World" example the following tag was used:</para>

      <para>&lt;mm:component name="core" block="components" render="body"
      /&gt;</para>

      <para>The default block can be specified by using the defaultblock
      attribute of the &lt;component /&gt; tag. In the "Hello World" example
      it is defaultblock="components". If no defaultblock is specified the
      first block is considered to be the default block. The default renderer
      is body. By using the defaults the tag could be rewritten to:</para>

      <para>&lt;mm:component name="core" /&gt;</para>

      <para>When renderer for a block is not specified, rendering the block
      will return nothing.</para>
    </section>

    <section>
      <title>render</title>

      <para>The renderes that are supported in the present implementation are:
      head, body, and process.</para>

      <para>The process renderer of block is called implicitly, if the head or
      the body of that block is called. The process renderer of block will (1)
      only be executed once per calling page and (2) only be executed after
      the first changes to this block.</para>

      <para>The renderer for body with mimetype="text/html" should render a
      div with class="TODO look at portlet css specification".</para>
    </section>

    <section>
      <title>mimetype</title>

      <para>The mimetype can be used to indicate that the component is
      rendering special file types like images, attachments, etc. In the
      example above we could have used mimetype="application/xhtml+xml". Where
      Firefox interpretes this filetype correctly and will check the validity
      of the page, the present versions of Internet Explorer will prompt the
      user to download this page. Because of this IE bug it is better to use
      "text/html".</para>
    </section>

    <section>
      <title>position of includes</title>

      <para>Here the jsp include "/mmbase/admin/components.jspx" is positioned
      absolute to the root of the webapplication. By setting the request
      parameter doMakeRelative to true, the jsp include can be positioned
      relative to the jsp page that contains the &lt;mm:component /&gt;
      tag.</para>
    </section>

    <section>
      <title>parameters</title>

      <para>When the &lt;mm:component /&gt; tag is contained in another tag
      all the information from the containing tag is accessable to the
      &lt;mm:component /&gt; tag. For instance in the situation &lt;mm:cloud
      jspvar="cloud"&gt;&lt;mm:component name="core" /&gt;&lt;/mm:cloud&gt;
      the components.jspx could contain &lt;%= cloud.getUser().getIdentifier()
      %&gt;.</para>

      <para>When it is necessary to include extra parameters this can be done
      by using the &lt;mm:param /&gt; tag.</para>

      <para>Some examples:</para>

      <programlisting>&lt;mm:component name="my_game"&gt;&lt;mm:param name="level" value="novice" /&gt;&lt;/mm:component&gt;</programlisting>

      <programlisting>&lt;!-- this piece uses the poll component to show two polls --&gt;
&lt;mm:node number="first_poll"&gt;&lt;mm:component name="poll"&gt;&lt;mm:node&gt;
&lt;mm:node number="second_poll"&gt;&lt;mm:component name="poll"&gt;&lt;mm:node&gt;</programlisting>
    </section>
  </section>

  <section>
    <title>Framework and changing the behavior of the &lt;mm:url /&gt; and
    &lt;mm:include /&gt; tags</title>

    <para>An MMBase framework provides the context in which components are
    rendered. The present functionality of the framework is that it changes
    the behavior of the &lt;mm:url /&gt; and the &lt;mm:include /&gt; tag. The
    next section shows how frameworks are implemented. The "Hello Again!"
    example gives an example of using a framework.</para>

    <section>
      <title>Framework</title>

      <para>A framework is an implementation of
      org.mmbase.framework.Framework. By implementing the method
      Framework.getUrl() the behaviour of &lt;mm:url /&gt; and &lt;mm:include
      /&gt; can be changed. This can be used to change the layout and the
      includes used in the page, based on the parameters passed to that
      page.</para>

      <para>The framework that will be used for rendering the components an
      MMBase instance is specified in mmbaseroot.xml, by using the
      parameter</para>

      <programlisting>&lt;property name="framework"&gt; ... &lt;/property&gt;</programlisting>

      <para> If no framework is specified in mmbaseroot.xml the
      org.mmbase.framework.BasicFramework will be used.</para>
    </section>

    <section>
      <title>Hello again! and goodbye to &lt;mm:treeinclude /&gt; and
      &lt;mm:treefile /&gt;</title>

      <para>The use of the Framework functionality is shown by the following
      "Hello again!" example.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;component
    xmlns="http://www.mmbase.org/xmlns/component"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mmbase.org/xmlns/component http://www.mmbase.org/xmlns/component.xsd"
    name="helloworld"&gt;
  &lt;description&gt;Hello Again&lt;/description&gt;
  &lt;block name="home" mimetype="text/html"&gt;
    &lt;head jsp="hello_head.jsp" /&gt;
  &lt;/block&gt;
&lt;/component&gt;</programlisting>

      <para>The jsp-include hello_head looks like:</para>

      <programlisting>&lt;%@page language="java" contentType="text/html;charset=utf-8" session="false"%&gt;
&lt;%@taglib uri="http://www.mmbase.org/mmbase-taglib-1.0" prefix="mm"%&gt;
&lt;mm:content type="text/html" language="en"&gt;
&lt;mm:cloud&gt;
   &lt;title&gt;Hello world&lt;/title&gt;
   &lt;link rel="stylesheet" type="text/css" href="&lt;mm:url page="css/hello.css" component="hello" /&gt;" /&gt;
&lt;/mm:cloud&gt;
&lt;/mm:content&gt;</programlisting>

      <para>The jsp-page that uses this component looks like:</para>

      <programlisting>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd"&gt;
&lt;%@page import="org.mmbase.framework.*"%&gt;
&lt;%@page import="org.mmbase.util.functions.*"%&gt;
&lt;%@page language="java" contentType="text/html;charset=utf-8" session="false"%&gt;
&lt;%@taglib uri="http://www.mmbase.org/mmbase-taglib-1.0" prefix="mm"%&gt;
&lt;mm:content type="text/html" language="en"&gt;
&lt;mm:cloud&gt;
&lt;mm:import externid="component" /&gt;
&lt;head&gt;
   &lt;mm:component name="hello" block="home" render="head" /&gt; ? parameters are case-insensitive ?
&lt;/head&gt;
&lt;body&gt;
   &lt;h1&gt;Hello again!&lt;/h1&gt;
&lt;/body&gt;
&lt;/mm:cloud&gt;
&lt;/mm:content&gt;</programlisting>

      <para>The call to &lt;mm:url page="css/hello.css" component="hello"
      /&gt; is picked up by the getUrl() method of the framework which is
      specified for this MMBase instance.</para>

      <para>This method</para>

      <programlisting>getUrl(String page, String component, Cloud cloud, PageContext pageContext, List params)</programlisting>

      <para>could for instance call</para>

      <programlisting>UrlResolver.findUrl(component + "/" + page, cloud, pageContext, params)</programlisting>

      <para>In the findUrl() method the params can be used to select different
      css-es for different portals. The code which is used for this looks
      something like:</para>

      <programlisting>Node portalNode = cloud.getNode((String)params.get("portal"));
String finalpage = findUrl(page, portalNode, mapNode);
if (finalpage != null) {
   return File.separator + finalpage;
}</programlisting>

      <para>The example framework presented here thus provides the
      functionality to use one set of templates, but have subsites with
      different layouts and subsite-specific includes.</para>

      <note>
        <para>If you are familiar with &lt;mm:treeinclude /&gt; and
        &lt;mm:treefile /&gt; you will probably already have recognized that
        this framework replaces the functionality of both these tags.</para>
      </note>
    </section>
  </section>

  <section id="action_flow">
    <title>Action flow within the portlet engine / portal service</title>

    <para>To give an idea of how a portlet engine / portal service works this
    sections gives an overview of the flow of actions that take place when a
    client calls an url:</para>

    <orderedlist>
      <listitem>
        <para>Client calls url</para>
      </listitem>

      <listitem>
        <para>Tomcat (or other application server) routes url to web
        application of the portal</para>
      </listitem>

      <listitem>
        <para>A servlet inside the portal web application receives the
        url</para>
      </listitem>

      <listitem>
        <para>Portal servlet will analyze the request</para>

        <itemizedlist>
          <listitem>
            <para>global navigation path to a page</para>
          </listitem>

          <listitem>
            <para>local navigation for the portlet (indicates which portlet is
            active in this call)</para>
          </listitem>

          <listitem>
            <para>window state for each portlet</para>
          </listitem>

          <listitem>
            <para>portlet mode for each portlet</para>
          </listitem>

          <listitem>
            <para>render parameters for each portlet</para>
          </listitem>

          <listitem>
            <para>action parameters from query string</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Start of action phase</para>

        <itemizedlist>
          <listitem>
            <para>Portal servlet resolves portlet instance which user wants to
            interact with</para>
          </listitem>

          <listitem>
            <para>Portal servlet creates ActionRequest and ActionResponse
            objects</para>
          </listitem>

          <listitem>
            <para>Portal servlet dispatches ActionRequest to the servlet which
            hosts the portlet instance for the action phase and sends the
            action parameters</para>
          </listitem>

          <listitem>
            <para>Portlet instance processes the action parameters maybe with
            the help of its own presentation framework (struts, jsf, jsp,
            tapestry, wicket, whatever)</para>
          </listitem>

          <listitem>
            <para>Portlet instance can change things in the request, session,
            preferences, external system, database, etc.</para>
          </listitem>

          <listitem>
            <para>Portlet instance modifies ActionResponse to tell the Portal
            servlet what should happen next. Redirect to client or render
            phase.</para>
          </listitem>

          <listitem>
            <para>Portal Servlet receives ActionResponse and acts on it</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Start of render phase</para>

        <itemizedlist>
          <listitem>
            <para>Portal servlet resolves page object from global
            navigation.</para>
          </listitem>

          <listitem>
            <para>Portal servlet retrieves all portlet instances on the page.
            For each portlet instance</para>

            <itemizedlist>
              <listitem>
                <para>Portal servlet creates RenderRequest and RenderResponse
                objects</para>
              </listitem>

              <listitem>
                <para>Portal servlet dispatches RenderRequest to the servlet
                which hosts the portlet instance.</para>
              </listitem>

              <listitem>
                <para>Portlet instances reads portlet mode and window
                state.</para>
              </listitem>

              <listitem>
                <para>Portlet instances calls his own presentation framework
                (struts, jsf, jsp, tapestry, wicket, whatever).</para>
              </listitem>

              <listitem>
                <para>Portlet instances writes markup fragment to
                RenderResponse.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Portal servlet retrieves page template</para>
          </listitem>

          <listitem>
            <para>Portal servlet decorates portlet RenderResponse outputs with
            window and portlet mode buttons and inserts it in the page
            template.</para>
          </listitem>

          <listitem>
            <para>Final result is written to client response</para>
          </listitem>

          <listitem>
            <para>Portal servlet returns response to the client.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <para>In the above flow no separation is made between portal service and
    the portlet engine (eg pluto). The portlet engine provides the runtime
    environment for the portlet instances. The portal service does all page
    related stuff.</para>
  </section>

  <section id="cmsc">
    <title>The CMSContainer: portlets and components</title>

    <para>The CMSContainer is one of the MMBase contributions. For
    documentation of the CMSContainer see the reference list at the end of
    this document. This section addresses the relation between portlets and
    components.</para>

    <section>
      <title>Using components as portlets</title>

      <para>A wrapper class will be developed in the CMSContainer, which makes
      it possible to use any MMBase component in the CMSContainer. This means
      that for the components the CMSContainer will use the components.xml
      from the component instead of the project.xml that is used for the
      portlets in the CMSContainer.</para>
    </section>

    <section>
      <title>Using portlets as components</title>

      <para>The other way around the situation is more difficult. When a
      portlet depends on the objectmodel of the CMSContainer it is not
      possible to rewrite it to an MMBase component, that can be reused
      outside the CMSContainer. Only portlets that do not depend explicitly on
      the objectmodel of the CMSContainer can be rewriten into components. The
      present version of the CMSContainer in the MMBase CVS does not contain
      examples of such portlets. But don't get worried: portlets like
      calender, playlist, etc. which are now being developed will be added as
      components later.</para>
    </section>
  </section>

  <section id="location_of_files">
    <title>Some notes on the location of files</title>

    <para>It is handy to use the same structure to store the files of a
    component within an application or contribution. When it comes to
    building, the exact location is of minor importance because the build
    process can reshuffle directories to get them into the right location in
    the build. Below follows an overview of how files are structured at the
    moment.</para>

    <section>
      <title>Applications and contributions</title>

      <para>In the 1.8 MMBase applications and contributions files are stored
      in the following directories:</para>

      <itemizedlist>
        <listitem>
          <para>MyApplication</para>

          <itemizedlist>
            <listitem>
              <para>config</para>

              <itemizedlist>
                <listitem>
                  <para>applications</para>

                  <itemizedlist>
                    <listitem>
                      <para>MyApplication.xml</para>
                    </listitem>

                    <listitem>
                      <para>MyApplication</para>

                      <itemizedlist>
                        <listitem>
                          <para>builders</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>builders</para>
                </listitem>

                <listitem>
                  <para>functions</para>
                </listitem>

                <listitem>
                  <para>log</para>
                </listitem>

                <listitem>
                  <para>modules</para>
                </listitem>

                <listitem>
                  <para>security</para>
                </listitem>

                <listitem>
                  <para>thememanager</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>documentation</para>
            </listitem>

            <listitem>
              <para>packaging: what to do this?</para>
            </listitem>

            <listitem>
              <para>templates</para>
            </listitem>

            <listitem>
              <para>src</para>
            </listitem>

            <listitem>
              <para>META-INF</para>
            </listitem>

            <listitem>
              <para>WEB-INF</para>
            </listitem>

            <listitem>
              <para>readme.txt</para>
            </listitem>

            <listitem>
              <para>build.xml</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>The CMSContainer</title>

      <para>The CMSContainer contains several portlets, which all can be
      viewed as seperate applications. These portlets can be found in
      /contributions/CMSContainer/cmsc. For the CMSC the Maven preferred way
      of storing files is used. The files of these portlets are stored in the
      following directories:</para>

      <itemizedlist>
        <listitem>
          <para>config</para>
        </listitem>

        <listitem>
          <para>resources: resource bundles and property files</para>
        </listitem>

        <listitem>
          <para>src</para>

          <itemizedlist>
            <listitem>
              <para>java</para>
            </listitem>

            <listitem>
              <para>tld</para>
            </listitem>

            <listitem>
              <para>webapp</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>project.xml</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Didactor</title>

      <para>In Didactor the components are structured as follows</para>

      <itemizedlist>
        <listitem>
          <para>mycomponent</para>

          <itemizedlist>
            <listitem>
              <para>config</para>

              <itemizedlist>
                <listitem>
                  <para>applications</para>

                  <itemizedlist>
                    <listitem>
                      <para>MyComponent</para>

                      <itemizedlist>
                        <listitem>
                          <para>MyComponent.xml</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>components</para>

                  <itemizedlist>
                    <listitem>
                      <para>mycomponent.xml</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>translations</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>java</para>
            </listitem>

            <listitem>
              <para>lib</para>
            </listitem>

            <listitem>
              <para>templates</para>
            </listitem>

            <listitem>
              <para>webinf</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Component Framework (MMBase 1.9)</title>

      <para>For the file structure of components the following principle will
      be used.</para>

      <itemizedlist>
        <listitem>
          <para>MyContribution</para>

          <itemizedlist>
            <listitem>
              <para>components</para>

              <itemizedlist>
                <listitem>
                  <para>mycomponent1</para>

                  <itemizedlist>
                    <listitem>
                      <para>config</para>

                      <itemizedlist>
                        <listitem>
                          <para>mycomponent.xml</para>
                        </listitem>

                        <listitem>
                          <para>model.xml</para>
                        </listitem>

                        <listitem>
                          <para>builders</para>
                        </listitem>

                        <listitem>
                          <para>data</para>
                        </listitem>

                        <listitem>
                          <para>functions</para>
                        </listitem>

                        <listitem>
                          <para>log</para>
                        </listitem>

                        <listitem>
                          <para>modules</para>
                        </listitem>

                        <listitem>
                          <para>security</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>

                    <listitem>
                      <para>documentation</para>
                    </listitem>

                    <listitem>
                      <para>editwizards</para>
                    </listitem>

                    <listitem>
                      <para>templates</para>
                    </listitem>

                    <listitem>
                      <para>src</para>
                    </listitem>

                    <listitem>
                      <para>resources</para>
                    </listitem>

                    <listitem>
                      <para>tld / META-INF</para>
                    </listitem>

                    <listitem>
                      <para>WEB-INF</para>
                    </listitem>

                    <listitem>
                      <para>project.xml</para>
                    </listitem>

                    <listitem>
                      <para>readme.txt</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>mycomponent2</para>
                </listitem>

                <listitem>
                  <para>mycomponent3</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>documentation</para>
            </listitem>

            <listitem>
              <para>build.xml</para>
            </listitem>

            <listitem>
              <para>readme.txt</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <note>
        <para>In the new structure the applications directory is replaced by
        the model.xml file in the config directory of the component and a data
        directory containing the default data for the component, the "apps1"
        xml dump.</para>
      </note>

      <note>
        <para>The editwizards are stored in a seperate directory. In this way
        the build process itself can move the editwizards to the directory
        where the target application expects them.</para>
      </note>

      <note>
        <para>The lib directory is not necessary because the needed jar files
        are specified in the project.xml and will be downloaded during the
        build.</para>
      </note>
    </section>
  </section>

  <section id="references">
    <title>References</title>

    <para>The following documents can be used for further reading.</para>

    <itemizedlist>
      <listitem>
        <para>Presentation on JSR168 by Nico Klasens <ulink
        url="???">http://www.mmbase.org/mmbase/attachments/50434/JSR168.zip</ulink></para>
      </listitem>

      <listitem>
        <para>An MMBase Component Framework by Johannes Verelst<ulink
        url="???">
        http://www.mmbase.org/mmbase/attachments/50347/MMBase_framework_-_tech.doc</ulink></para>
      </listitem>

      <listitem>
        <para>Design CMS Container by Nico Klasens <ulink
        url="???">http://cmsc.finalist.com/Design CMSC.pdf</ulink> or <ulink
        url="???">http://cvs.mmbase.org/viewcvs/*checkout*/speeltuin/applications/cmsc/Design
        CMSC.pdf</ulink></para>
      </listitem>

      <listitem>
        <para>What Is a Portlet <ulink
        url="???">http://www.onjava.com/lpt/a/6208</ulink></para>
      </listitem>
    </itemizedlist>
  </section>
</article>