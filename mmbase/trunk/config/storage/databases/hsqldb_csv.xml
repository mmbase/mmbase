<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE storage PUBLIC "-//MMBase//DTD storage config 1.0//EN" "http://www.mmbase.org/dtd/storage_1_0.dtd" >
<storage>
  <!--
      This hsqldb configuration differs from the default because
      1. It stores tables as CSV files rather than as one giant .script file
      2. It stores binaries on disk.

    Use the following settings in your context xml:

  <Environment name="mmbase/mmbaseroot/datadir" value="/home/mmbase/data/didactor_test" type="java.lang.String" />
  <Environment name="mmbase/mmbaseroot/database" value="hsqldb_csv" type="java.lang.String" />
  <Environment name="mmbase/jdbc/url"   value="jdbc:hsqldb:file:$DATADIR$DBM;shutdown=true" type="java.lang.String" />

  Blobs and tables will apper in the datadir.

  -->
  <storagemanagerfactory classname="org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory" version="0.1" />
  <storagemanager classname="org.mmbase.storage.implementation.database.RelationalDatabaseStorageManager" version="0.1" />

  <searchqueryhandler classname="org.mmbase.storage.search.implementation.database.HSqlSqlHandler" />

  <attributes>
    <attribute name="default-storage-identifier-prefix">m</attribute>
    <attribute name="storage-identifier-case">upper</attribute>
    <option name="database-stores-binary-as-file" />
    <option name="database-supports-blob" value="false" />
    <scheme name="change-field-scheme" />
    <scheme name="create-table-scheme">CREATE TEXT TABLE {1} ({2} {3} {5}); SET TABLE {1} SOURCE "{7}_{1}.txt;encoding=UTF-8"</scheme>
    <scheme name="create-object-table-scheme">CREATE TEXT TABLE {1} ({2} {3} {5}); SET TABLE {1} SOURCE "{7}_{1}.txt;encoding=UTF-8"</scheme>
    <scheme name="create-sequence-scheme">CREATE TEXT TABLE {0}_NUMBERTABLE ({1}); SET TABLE {0}_NUMBERTABLE SOURCE "{2}_{0}_NUMBERTABLE.txt;encoding=UTF-8"</scheme>
  </attributes>

  <!-- HSQLdb type mappings -->
  <type-mappings>
    <type-mapping name="DOUBLE" type="DOUBLE" />
    <type-mapping name="LONG" type="BIGINT" />
    <type-mapping name="FLOAT" type="FLOAT" />
    <type-mapping name="INTEGER" type="INTEGER" />
    <type-mapping name="NODE" type="INTEGER" />
    <type-mapping name="STRING" min-size="1" max-size="16777216" type="VARCHAR({0,number,########})" />
    <type-mapping name="XML" min-size="1" max-size="16777216" type="VARCHAR({0,number,########})" />
    <type-mapping name="BINARY" min-size="1" max-size="16777216" type="BINARY" />
    <type-mapping name="DATETIME" type="DATETIME" />
    <type-mapping name="BOOLEAN"  type="BIT" />
    <type-mapping name="DECIMAL"  type="DECIMAL" />

    <type-mapping name="LIST[FLOAT]"   type="OTHER" />
    <type-mapping name="LIST[DOUBLE]"  type="OTHER" />
    <type-mapping name="LIST[LONG]"    type="OTHER" />
    <type-mapping name="LIST[INTEGER]" type="OTHER" />
    <type-mapping name="LIST[NODE]"    type="OTHER" />
    <type-mapping name="LIST[STRING]"  type="OTHER" />
    <type-mapping name="LIST[XML]"     type="OTHER" />
    <type-mapping name="LIST[DATETIME]" type="OTHER" />
    <type-mapping name="LIST[BOOLEAN]"  type="OTHER" />
  </type-mappings>

  <!-- HSQLdb disallowed fields are retrieved from the database -->
  <disallowed-fields>
    <disallowed-field name="number" replacement="m_number"/>
  </disallowed-fields>

</storage>
