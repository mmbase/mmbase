<?xml version="1.0" encoding="UTF-8" ?>
<!-- 

   @author  Michiel Meeuwissen
   @version $Id: log4j.xml,v 1.6 2003-11-25 12:13:53 robmaris Exp $
   @since   MMBase-1.4

   Location of the log4j.dtd. 
   In Tomcat a simple "log4j.dtd" will do, but this does not work in
   older versions of Orion (because of limitation of Xerces). 
   You can give the full path to the dtd in the jar, like:
   SYSTEM "jar:file:/bigdisk/dev/lib/test/log4j.jar!/org/apache/log4j/xml/log4j.dtd"
   or somewhere on the web:
   SYSTEM "http://web.omroep.nl/mmbase/logging/log4j.dtd"
   
   It seems to work better in Orion if you put the log4j.dtd in
   WEB-INF/classes/org/apache/log4j/xml/log4j.dtd
   
-->
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd"
   [
    <!ENTITY mmlevel    "org.mmbase.util.logging.log4j.Log4jLevel" >
]>

<!-- 
  MMBase logging configuration 

  MMBase can use log4j for logging. See
  http://jakarta.apache.org/log4j. This is a sample configuration file for
  it. The name of this file is indicated in <CONFIGDIR>/log/log.xml

  Quick introduction on how to configure log4j.

  In the configuration you find two kind of things: Appenders, and
  Loggers. 

  The Appenders are describing the logfiles. There is only one defined
  in this file. It is not optimized for speed now, it is better use another
  Pattern layout in a speed critical situation.

  There is one special 'Logger', namely 'root'. Other loggers
  inherit from this one, but can override for example the level. 

  Currently the loggers are simply the complete MMBase class-names,
  with only one exception, namely 'STDERR'.

-->

<log4j:configuration  debug="false" xmlns:log4j="http://jakarta.apache.org/log4j/"
  >

  <!-- 
  The appenders of the default log4j configuration are writing to 
  STDOUT on default. 
  This is problably not what you want, but at least it works always.
  See in the eother examples how to configure a log file.
  -->

  <appender name="logfile" class="org.apache.log4j.ConsoleAppender" >
    <param name="Target" value="System.out" />
    <param name="Encoding"   value="UTF-8" />    
    <layout class="org.apache.log4j.PatternLayout">
       <param name="ConversionPattern" value="%d{ABSOLUTE} %-7p %c{4} - %m%n" />
    </layout>
    <!-- for debugging, logging memory use, method and line-number is
    often useful
    <layout class="org.mmbase.util.logging.log4j.MMPatternLayout">
      <param name="ConversionPattern" value="%d{ABSOLUTE} %q %k kb %c{4} %M.%L - %m%n" />
    </layout>
    -->
  </appender>

  <!-- 
  A different appender for 'page' logging. This is writing to stdout now too, but probably you want 
  this to go to another file.
  -->     
  <appender name="pagedebug" class="org.apache.log4j.ConsoleAppender" >
    <param name="Target" value="System.out" />
    <param name="Encoding"   value="UTF-8" />    
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d{MM-dd HH:mm:ss} PAGE %-7p %c{2} %L - %m%n" />
    </layout>
  </appender>


  <!-- 
  Another example: The sqllog appender can be used for
  'MultiConnection' (see below), to achieve logging of every SQL
  query, which is handy during debugging
  -->
  
  <appender name="sqllog" class="org.apache.log4j.FileAppender" >
    <param name="File" value="/tmp/mmbase-sql.log" />
    <param name="Encoding"   value="UTF-8" />    
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d{MM-dd HH:mm:ss} %m%n" />
    </layout>
  </appender>
  
  <!-- categories -->

  <!-- 'page logging' goes to a different appender -->
  <logger name="org.mmbase.PAGE" additivity="false">
    <level class="&mmlevel;" value ="service" />
    <appender-ref ref="pagedebug" />
  </logger>

  <!-- SQL logging -->
  <!--
  <logger name="org.mmbase.module.database.MultiConnection" additivity="false">
    <level class="&mmlevel;" value ="debug" />   
    <appender-ref ref="sqllog" />
  </logger>
   -->

  <!-- examples: different level for a few subtrees -->
   <logger name="org.mmbase.bridge" >
     <level class="&mmlevel;" value ="info" />
   </logger>
  
  <logger name="org.mmbase.security" >
    <level class="&mmlevel;" value ="warn" />
  </logger>

  <!-- perhaps you use your own extensions to MMBase -->
  <logger name="nl.omroep" >
    <level class="&mmlevel;" value ="trace" />
  </logger>
  
    
  <!-- 
  STDERR is a special Category, to wich stderr will be
  (always with level 'warn' or higher)  
  The level can be set to 'fatal' and the stderr will not be
  redirected to mmbase logging.
  -->
 
  <logger name="STDERR">
    <level class="&mmlevel;" value ="info" />	
  </logger>
  
  <root>
    <level class="&mmlevel;" value ="service" />
    <appender-ref ref="logfile" />
  </root>

</log4j:configuration>
