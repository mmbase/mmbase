<!-- ===========================================================================


MMBase Build File
=================

This build file can be used to build the following from CVS or from the source
distribution:

- A MMBase source distribution.
- A MMBase binary distribution.
- A customized mmbase.jar.
- A test environment.

The main properties are source.dir and build.dir. The source.dir is expected
to have the following sub directory's:

  config          (the MMBase CVS config module)
  html            (the MMBase CVS html module)
  documentation   (the MMBase CVS documentation module)
  src/org/mmbase  (the MMBase CVS mmbase module)

The build.dir will have the following sub directory's:

  classes             (compiled MMBase classes)
  download            (default place for the downloaded packages)
  download/extracted  (default place to extract the downloaded packages)
  junit               (test environment)
  mmbase              (the MMBase binary distribution)
  mmbase-src          (the MMBase source distribution)

Compiler
========

Change the property build.compiler to 'modern' for JDK1.3 or to 'jikes' for Jikes.

Ant
===

This build file is tested with Ant 1.4. See <http://jakarta.apache.org/> for
more information about the Ant build tool.

The optional.jar of ant is needed it you want to use the 'documentation' target, on which e.g. the
war target is dependent.


Automated downloads
===================

To use the targets that depend on automated downloads you first have to download
NetComponents and put the NetComponents.jar in your Ant lib directory.
NetComponents can be found at:

  http://www.savarese.org/oro/downloads/index.html#NetComponents

============================================================================ -->

<project name="MMBase" default="usage" basedir=".">
  
  <!-- =================================================================== -->
  <!-- Init                                                                -->
  <!-- =================================================================== -->
  <!-- Read customized values if available -->
  <property file="build.properties"/>
  <!-- Default values for properties that can be customized -->
  <property name="source.dir" location="../../../.." />
  <property name="build.dir" value="${source.dir}/build"/>
  <property name="download.dir" value="${build.dir}/download"/>
  <property name="expand.dir" value="${download.dir}/expanded"/>
  <property name="build.compiler" value="classic"/>
  <property name="optimize" value="on"/>
  <property name="debug" value="off"/>
  <property name="deprecation" value="on"/>
  <property name="javadoc.packages" value="org.mmbase.*"/>
  <property name="distro"      value="MMBase 1.6.0"/>
  <property name="documentation.builders.language" value="en" />
  <!-- Don't change the following properties unless you know what you're doing -->
  <property name="source-config.dir"         location="${source.dir}/config"/>
  <property name="source-html.dir"           location="${source.dir}/html"/>
  <property name="source-documentation.dir"  location="${source.dir}/documentation" />
  <property name="source-src.dir"       location="${source.dir}/src"/>
  <property name="generated-source-src.dir"       location="${build.dir}/src"/>
  <property name="source-taglib.xml"    value="org/mmbase/bridge/jsp/taglib/mmbase-taglib.xml" />
  <property name="source-community.xml" value="org/mmbase/bridge/jsp/taglib/community/mmcommunity-taglib.xml" />
  <property name="xml2tld"              value="org/mmbase/bridge/jsp/taglib/xml2tld.xslt"/>
  <property name="xml2html"             value="org/mmbase/bridge/jsp/taglib/xml2html.xslt"/>
  <property name="webapp.dir"           value="${build.dir}/mmbase/mmbase-webapp"/>
  <property name="mmdocs.dir"           value="${webapp.dir}/mmdocs"/>
  <property name="reference.dir"        value="${webapp.dir}/mmdocs/reference"/>
  <property name="web.dir"              value="${webapp.dir}/WEB-INF"/>
  <property name="release.lib.dir"      value="${web.dir}/lib"/>
  <property name="compile.lib.dir"      value="${build.dir}/lib"/>
  <property name="mmbase.jar"           value="${release.lib.dir}/mmbase.jar"/>

  <target name="init" depends="check.dir.all">
    <tstamp/>
    <mkdir dir="${build.dir}"/>
    <property name="name" value="mmbase"/>
    <property name="version" value="${DSTAMP}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage" description="Help on usage">
    <echo message=""/>
    <echo message="MMBase Build file"/>
    <echo message="*************************************************************"/>
    <echo message=""/>
    <echo message="Use the -projecthelp option to see a short description for"/>
    <echo message="the main targets"/>
    <echo message=""/>
    <echo message="*************************************************************"/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Create the source distribution                                      -->
  <!-- =================================================================== -->
  <target name="srcdist" description="Create the source distribution"
          depends="init,javadocs">
    <!-- copy the java-sources -->
    <mkdir dir="${build.dir}/mmbase-src/src"/>
    <copy todir="${build.dir}/mmbase-src/src">
      <fileset dir="${source-src.dir}">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>
    <!-- copy the config files -->
    <mkdir dir="${build.dir}/mmbase-src/config"/>
    <copy todir="${build.dir}/mmbase-src/config">
      <fileset dir="${source-config.dir}">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>
    <!-- copy the html files -->
    <mkdir dir="${build.dir}/mmbase-src/html"/>
    <copy todir="${build.dir}/mmbase-src/html">
      <fileset dir="${source-html.dir}">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>
    <!-- copy the build file -->
    <copy file="${source-src.dir}/org/mmbase/scripts/build.xml"
          todir="${build.dir}/mmbase-src"/>
    <copy file="${source-src.dir}/org/mmbase/scripts/build-from-srcdist.properties"
          tofile="${build.dir}/mmbase-src/build.properties"/>
    <!-- copy the readme -->
    <!-- not in cvs yet -->
    <!-- zip -->
    <zip zipfile="${build.dir}/${name}-src-${version}.zip"
         basedir="${build.dir}/mmbase-src"/>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the source distribution                                       -->
  <!-- =================================================================== -->
  <target name="clean.srcdist" description="Clean the source distribution">
    <delete dir="${build.dir}/mmbase-src"/>
  </target>


  <!-- =================================================================== -->
  <!-- Create the binary distribution                                      -->
  <!-- =================================================================== -->
  <target name="bindist"  description="Create the binary distribution"
          depends="jar,web">
    <!-- copy a readme from somewhere -->
    <!-- not in cvs yet -->
    <!-- copy the config -->
    <mkdir dir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/config"/>
    <copy todir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/config">
      <fileset dir="${source-config.dir}/default">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>
    <!-- copy the html -->
    <copy todir="${build.dir}/mmbase/mmbase-webapp">
      <fileset dir="${source-html.dir}">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>
    <!-- use web.xml.sample as default -->
    <copy file="${webapp.dir}/WEB-INF/web.xml.sample"
          tofile="${webapp.dir}/WEB-INF/web.xml" overwrite="yes"/>
   <delete file="${webapp.dir}/WEB-INF/web.xml.sample" />
    <!-- copy builders/modules from application dir into default config dir -->
    <!-- Basics -->
     <copy todir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/config/builders" overwrite="yes">
      <fileset dir="${source-config.dir}/default/applications/Basics/builders">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>   
    <!-- BasicAuth -->
     <copy todir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/config/builders" overwrite="yes">
      <fileset dir="${source-config.dir}/default/applications/BasicAuth/builders">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>  
    <!-- BugTracker -->
     <copy todir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/config/builders" overwrite="yes">
      <fileset dir="${source-config.dir}/default/applications/BugTracker/builders">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>  
    <!-- Community-builders -->
     <copy todir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/config/builders" overwrite="yes">
      <fileset dir="${source-config.dir}/default/applications/Community/builders">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>  
    <!-- Community-module -->
    <!-- isn't in cvs at the moment, so don't try to copy it. Maybe I'll add it
     <copy todir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/config/modules" overwrite="yes">
      <fileset dir="${source-config.dir}/default/applications/Community/modules">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>  
    -->
    <!-- MyNews -->
     <copy todir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/config/builders" overwrite="yes">
      <fileset dir="${source-config.dir}/default/applications/MyNews/builders">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>  
    <!-- MyYahoo -->
     <copy todir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/config/builders" overwrite="yes">
      <fileset dir="${source-config.dir}/default/applications/MyYahoo/builders">
        <exclude name="**/CVS/*"/>
      </fileset>
    </copy>  

    <!-- zip -->
    <zip zipfile="${build.dir}/${name}-${version}.zip"
         basedir="${build.dir}/mmbase"/>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the binary distribution                                       -->
  <!-- =================================================================== -->
  <target name="clean.bindist" description="Clean the binary distribution"
          depends="clean.compile">
    <delete dir="${build.dir}/mmbase"/>
  </target>


  <!-- =================================================================== -->
  <!-- Create the lib directories                                          -->
  <!-- =================================================================== -->
  <target 
    name="lib.release" 
    description="Create the lib directory"
    depends="init,expand.xalan,expand.log4j,expand.hsqldb,expand.jspsmartupload">
    <mkdir dir="${release.lib.dir}" />
    <copy file="${xalan.jar}"          todir="${release.lib.dir}" />
    <copy file="${xerces.jar}"         todir="${release.lib.dir}" />  
    <copy file="${xml-apis.jar}"       todir="${release.lib.dir}" />
    <copy file="${log4j.jar}"          tofile="${release.lib.dir}/log4j.jar" />
    <copy file="${jspsmartupload.jar}" todir="${release.lib.dir}" />
    <copy file="${hsqldb.jar}"         todir="${release.lib.dir}" />
        
    <!-- copy licenses for included jars -->
    <copy todir="${build.dir}/mmbase/mmbase-webapp/WEB-INF/lib/legal">
      <fileset dir="${source-src.dir}/org/mmbase/scripts/legal"/>
    </copy>

  </target>

  <target name="lib.compile" description="Create the lib directory"
          depends="init,expand.servlet,expand.xalan,expand.jai,expand.log4j,expand.junit,expand.javamail,expand.javaactivation,get.jdbc">
    <mkdir dir="${compile.lib.dir}"/>
    <copy file="${xalan.jar}"     todir="${compile.lib.dir}" />
    <copy file="${xerces.jar}"    todir="${compile.lib.dir}" />
    <copy file="${xml-apis.jar}"  todir="${compile.lib.dir}" />
    <copy file="${servlet.jar}"   todir="${compile.lib.dir}" />
    <copy file="${jai_codec.jar}" todir="${compile.lib.dir}" />
    <copy file="${jai_core.jar}"  todir="${compile.lib.dir}" />
    <copy file="${log4j.jar}"     tofile="${compile.lib.dir}/log4j.jar" />
    <copy file="${junit.jar}"     todir="${compile.lib.dir}" />
    <copy file="${javamail.jar}"  todir="${compile.lib.dir}" />
    <copy file="${javaactivation.jar}"  todir="${compile.lib.dir}" />
    <copy file="${jdbc.jar}"      todir="${compile.lib.dir}" />
  </target>

  
  <!-- =================================================================== -->
  <!-- Clean the lib directories                                             -->
  <!-- =================================================================== -->

  <target name="clean.lib" description="Clean the lib directory">
     <delete dir="${release.lib.dir}" />
     <delete dir="${compile.lib.dir}" />
  </target>

  <!-- =================================================================== -->
  <!-- Check the directory structure                                       -->
  <!-- =================================================================== -->
  <target name="init.check.dir">
    <available property="dir.config.present"
               file="${source-config.dir}"/>
    <available property="dir.html.present"
               file="${source-html.dir}"/>
    <available property="dir.src.present"
               file="${source-src.dir}"/>
    <available property="dir.org.present"
               file="${source-src.dir}/org"/>
    <available property="dir.mmbase.present"
               file="${source-src.dir}/org/mmbase"/>
  </target>

  <target name="check.dir.config" depends="init.check.dir"
          unless="dir.config.present">
    <property name="source.dir.invalid" value="config"/>
  </target>

  <target name="check.dir.html" depends="init.check.dir"
          unless="dir.html.present">
    <property name="source.dir.invalid" value="html"/>
  </target>

  <target name="check.dir.src" depends="init.check.dir"
          unless="dir.src.present">
    <property name="source.dir.invalid" value="src"/>
  </target>

  <target name="check.dir.org" depends="init.check.dir"
          unless="dir.org.present">
    <property name="source.dir.invalid" value="org"/>
  </target>

  <target name="check.dir.mmbase" depends="init.check.dir"
          unless="dir.mmbase.present">
    <property name="source.dir.invalid" value="mmbase"/>
  </target>

  <target name="check.dir.all"
          depends="check.dir.config,check.dir.html,check.dir.src,check.dir.org,
                   check.dir.mmbase" if="source.dir.invalid">
    <echo message=""/>
    <echo message="Source directory to build from doesn't contain the needed"/>
    <echo message="directory's or the source.dir property is pointing to the"/>
    <echo message="wrong directory. The source.dir property is pointing to:"/>
    <echo message=""/>
    <echo message="  ${source.dir}"/>
    <echo message=""/>
    <echo message="And should have the following sub directory's:"/>
    <echo message=""/>
    <echo message="  config          (the MMBase CVS config module)"/>
    <echo message="  html            (the MMBase CVS html module)"/>
    <echo message="  src/org/mmbase  (the MMBase CVS mmbase module)"/>
    <echo message=""/>
    <echo message="Directory that could not be found:"/>
    <echo message=""/>
    <echo message="  ${source.dir.invalid}"/>
    <echo message=""/>
    <fail message="Invalid directory structure"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepare for compilation                                             -->
  <!-- =================================================================== -->
  <target name="init.compile" depends="lib.compile">
    <mkdir dir="${build.dir}/classes"/>
    <available property="dummy" classname="dummy">
      <classpath id="compile.classpath">
        <fileset dir="${compile.lib.dir}">
          <include name="*.jar"/>
          <exclude name="mmbase.jar"/>
        </fileset>
      </classpath>
    </available>
  </target>


  <!-- =================================================================== -->
  <!-- Compile the source directory                                        -->
  <!-- =================================================================== -->
  <target name="compile" description="Compile the source directory"
     depends="compile.local,compile.remote">
  </target>

  <target name="build"   description="Compile and generate tld's"
     depends="taglib.tld,community.tld,compile" >
  </target>
  <!-- =================================================================== -->
  <!-- Compile the source directory (exclude remote)                       -->
  <!-- =================================================================== -->
  <target name="info14" if="java14">
    <echo>
  WARNING
  MMBase doesn't compile when using J2SE 1.4, you have to change the following files by hand:
	MultiConnection.java and MultiStatement.java (both in the &lt;org/mmbase/modules/database&gt;-dir): uncomment the methods for J2SE 1.4.
	BridgeException (in the &lt;org/mmbase/bridge&gt;-dir): replace code for exception chaining, and remove getCause()/initCause() dummy methods   
	More information is provided in the javadocs in these files.
</echo>
  </target>

  <target name="startcompile" />
 <!-- just to make the output of ant a  little bit clearer. Otherwise
 it look like compiling is part of 'info14' target.... -->
  
  <target name="compile.local" description="Compile the source directory(exclude remote)"
          depends="init.compile">

    <echo message="java version: ${ant.java.version}" />
    <condition property="java14"><equals arg1="${ant.java.version}" arg2="1.4" /></condition>
    <antcall target="info14" />
    <antcall target="startcompile" />

    <copy todir="${build.dir}/classes">
      <fileset dir="${source-src.dir}">
        <include name="**/*.properties"/>
        <include name="**/LICENSE"/>
        <include name="**/*.dtd"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>

    <available property="informix.in.classpath"
               classpathref="compile.classpath"
               classname="com.informix.jdbc.IfxCblob" />

    <available 
      property="naming.in.classpath" 
      classpathref="compile.classpath"
      classname="javax.naming.Context" />
    
    <available
      property="sqlconnection.in.classpath"
      classpathref="compile.classpath"
      classname="javax.sql.DataSource" />

    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
      <exclude name="org/mmbase/module/tools/mmrunner/startMMBase.java"/>
      <exclude name="org/mmbase/module/tools/MMAppTool/startAppTool.java"/>
      <exclude name="org/mmbase/module/RemoteMMCI.java"/>
      <exclude name="org/mmbase/bridge/ContextProvider.java"/>
      <exclude name="org/mmbase/bridge/RemoteContext.java"/>
      <exclude name="org/mmbase/bridge/remote/**"/>
      <exclude name="org/mmbase/module/JMSendMail.java"    unless="naming.in.classpath" />
      <exclude name="org/mmbase/module/database/Naming.java" unless="naming.in.classpath" />
      <exclude name="org/mmbase/module/database/Naming.java" unless="sqlconnection.in.classpath" />
      <exclude name="org/mmbase/module/database/support/MMInformix42Node.java" unless="informix.in.classpath" />
    </javac>
    <tstamp/>
    <echo file="${build.dir}/classes/org/mmbase/builddate.properties">${DSTAMP}</echo>
  </target>


  <!-- =================================================================== -->
  <!-- Prepare for customized compilation                                  -->
  <!-- =================================================================== -->
  <target name="init.compile.cust">
    <!-- needed packages -->
    <available property="xerces.in.classpath"
               classname="org.apache.xerces.parsers.DOMParser"/>
    <available property="servlet.in.classpath"
               classname="javax.servlet.http.HttpServlet"/>
    <!-- optional packages -->
    <available property="xalan.in.classpath"
               classname="org.apache.xalan.xslt.XSLTProcessorFactory"/>
    <available property="jai.in.classpath"
               classname="javax.media.jai.JAI"/>
    <available property="log4j.in.classpath"
                classname="org.apache.log4j.Logger"/>
    <available property="junit.in.classpath"
               classname="junit.runner.BaseTestRunner"/>
    <available property="informix.in.classpath" 
               classname="com.informix.jdbc.IfxCblob"/>

    <!-- javax.naming only appears in jdk 1.3 -->
    <available property="naming.in.classpath" classname="javax.naming.Context" />

    <!-- check directory structure -->
    <available property="dir.src.present"
               file="${source-src.dir}"/>
    <available property="dir.org.present"
               file="${source-src.dir}/org"/>
    <available property="dir.mmbase.present"
               file="${source-src.dir}/org/mmbase"/>
  </target>


  <!-- =================================================================== -->
  <!-- Check the needed packages                                           -->
  <!-- =================================================================== -->
  <target name="check.needed.xerces" depends="init.compile.cust"
          unless="xerces.in.classpath">
    <echo message=""/>
    <echo message="Error: Missing needed package Xerces."/>
    <echo message="You first need to install Xerces (http://xml.apache.org/xerces-j/)"/>
    <echo message="and add it to your classpath, before you can compile and use MMBase."/>
    <echo message=""/>
    <fail message="Missing needed package Xerces."/>
  </target>

  <target name="check.needed.servlet" depends="init.compile.cust"
          unless="servlet.in.classpath">
    <echo message=""/>
    <echo message="Error: Missing needed package javax.servlet."/>
    <echo message="You first need to add servlet.jar to your classpath,"/>
    <echo message="before you can compile and use MMBase."/>
    <echo message="You'll probably find it somewhere in your servlet-engine dir."/>
    <echo message=""/>
    <fail message="Missing needed package javax.servlet."/>
  </target>


  <!-- =================================================================== -->
  <!-- Check the optional packages                                         -->
  <!-- =================================================================== -->
  <target name="check.optional.xalan" depends="init.compile.cust"
          unless="xalan.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package Xalan."/>
    <echo message="You first need to install Xalan (http://xml.apache.org/xalan/)"/>
    <echo message="and add it to your classpath, before you can use all the features of MMBase."/>
    <echo message="MMBase will compile and run without this package,"/> 
    <echo message="if you remove the xslconvert module from your modules.xml."/>
    <echo message=""/>
  </target>

  <target name="check.optional.jai" depends="init.compile.cust"
          unless="jai.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package javax.jai."/>
    <echo message="You can't use the java based Image-Converter without this package,"/> 
    <echo message="you've got to use ImageMagick."/>

    <echo message="JAI can be downloaded from http://www.javasoft.com/products/java-media/jai/"/>
    <echo message="MMBase will compile and run without this package."/>
    <echo message=""/>
  </target>

  <target name="check.optional.log4j" depends="init.compile.cust" unless="log4j.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package Log4j."/>
    <echo message="Logging capabalities will be very limited."/> 
    <echo message="Log4j can be downloaded from http://jakarta.apache.org/log4j/"/>
    <echo message="The Log4j Implementation of MMBase will not compile,"/> 
    <echo message="but MMBase will run without this package though."/>
    <echo message=""/>
  </target>

  <target name="check.optional.junit" depends="init.compile.cust"
          unless="junit.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package JUnit."/>
    <echo message="You will not be able to run tests."/> 
    <echo message="JUnit can be downloaded from http://www.unit.org/"/>
    <echo message="The JUnit tests for MMBase will not compile,"/> 
    <echo message="but MMBase will run without this package though."/>
    <echo message=""/>
  </target>

  <target name="check.optional.informix" depends="init.compile.cust"
          unless="informix.in.classpath">
    <echo message=""/>
    <echo message="Warning: Missing optional package com.informix.jdbc."/>
    <echo message="Informix support for MMBase will not be compiled,"/>
    <echo message="but MMBase will run without this package though."/>
    <echo message=""/>
  </target>

  <target name="check.package.all"
          depends="check.needed.xerces,check.needed.servlet,
                   check.optional.xalan,check.optional.jai,check.optional.log4j,
                   check.optional.junit,check.optional.informix"/>

  <!-- =================================================================== -->
  <!-- Clean the compiled classes                                          -->
  <!-- =================================================================== -->
  <target name="clean.compile" description="Clean the compiled classes"
          depends="clean.lib">
    <delete dir="${build.dir}/classes"/>
  </target>



  <!-- =================================================================== -->
  <!-- Create the MMBase jar file                                          -->
  <!-- =================================================================== -->
  <target name="jar" description="Create the MMBase jar file"
          depends="compile,taglib.tld,community.tld">
    <copy file="${web.dir}/mmbase-taglib.tld"
          tofile="${web.dir}/taglib.tld" />

    <echo file="${build.dir}/manifest.mf">
Name: org/mmbase
Vendor: MMBase Community
URL: http://www.mmbase.org
Comment: The MMBase Content Managment System
Version: ${distro}.${version}
Distribution: ${distro}
Build-by: ${ant.version} 
Build-java-version: ${ant.java.version}
Build-compiler: ${build.compiler}
Main-Class: org.mmbase.Version
</echo>
    
    <mkdir dir="${release.lib.dir}" />
    <jar jarfile="${mmbase.jar}"
         basedir="${build.dir}/classes"
	     includes="org/mmbase/**"
	     manifest="${build.dir}/manifest.mf" >
        <metainf dir="${web.dir}" includes="taglib.tld" />
        <metainf dir="${web.dir}" includes="mmcommunity-taglib.tld" />
    </jar>

    <delete file="${build.dir}/manifest.mf" />
    <delete file="${web.dir}/taglib.tld" />
    <!-- don't delete these, because multiple tld's inside a jar, -->
    <!-- can cause problems on certain servlet-engines -->
    <!--<delete file="${web.dir}/mmbase-taglib.tld" />-->
    <!--<delete file="${web.dir}/mmcommunity-taglib.tld" />-->

  </target>


    <property name="config.build.dir" value="${build.dir}/config"/>
    <property name="minconfig.build.dir" value="${build.dir}/min/config"/>
    <property name="webroot.build.dir" value="${build.dir}/webroot"/>
    
    <!-- =================================================================== -->
    <!-- Create the MMBase config build dir                                  -->
    <!-- =================================================================== -->
  <target name="minimalistic.war.config" depends="init.compile">
        <!-- copy the jsp editors to a reasonable place -->
        <copy todir="${minconfig.build.dir}">
            <fileset dir="${source-config.dir}/default"  defaultexcludes="true">
                <!-- the dirs/files we definitly need -->
                <include name="databases/**"/>
                <include name="xslt/**"/>
                <include name="log/log.xml"/>
                <include name="log/log4j.xml"/>
                <include name="security/security.xml"/>
                <include name="caches.xml"/>
                <include name="magic.xml" /><!-- used if you switch on 'attachments' -->
                
                <!-- the applications we definitly need -->                
                <include name="applications/CloudSecurity.xml"/>
                <include name="applications/CloudSecurity/**"/>
                
                <!-- the modules we definitly need -->                    
                <include name="modules/mmbaseroot.xml"/><!-- tells things about mmbase instantion -->
                <include name="modules/jdbc.xml"/><!-- tells things about jdbc connecion -->
                <include name="modules/mmadmin.xml"/><!-- to load applications, mmadmin isnt uses further in war -->
                
                
                <!-- the builders we definitly need -->
                <include name="builders/core/**"/>
            </fileset>
        </copy>            
    </target>

  <target name="war.config" depends="init.compile">
    <copy todir="${config.build.dir}">
      <fileset dir="${source-config.dir}/default"  defaultexcludes="true">        
        <include name="**"/>
        <exclude name="dtd/**" />
      </fileset>
    </copy>
  </target>


    <!-- =================================================================== -->
    <!-- Create a mmbase-dtds.jar                                            -->
    <!-- =================================================================== -->

  <target name="dtds.jar">
        <echo file="${build.dir}/manifest.mf">
Name: org/mmbase/resources/dtds
Vendor: MMBase Community
URL: http://www.mmbase.org
Comment: The MMBase Content Managment System
Version: ${distro}.${version}
Distribution: ${distro}
Build-by: ${ant.version} 
Build-java-version: ${ant.java.version}
Build-compiler: ${build.compiler}
</echo>

    <mkdir dir="${build.dir}/dtd" />
    <copy todir="${build.dir}/dtd" flatten="true">
      <fileset dir="${source-src.dir}"  defaultexcludes="true">        
        <include name="**/*.dtd"/>
      </fileset>
    </copy>
    <jar jarfile="${build.dir}/mmbase-dtds.jar"
         basedir="${build.dir}/dtd"
	     includes="**" 
	     manifest="${build.dir}/manifest.mf" 
      />
  </target>

  


    <!-- =================================================================== -->
    <!-- Create the MMBase html build dir                                    -->
    <!-- =================================================================== -->
    <!--    <target name="war.webroot" depends="init.compile, javadocs">  -->

    <!-- What for the war is so different?? -->
    <!-- This should depend on bindist!! -->

  <target name="war.webroot" depends="init.compile,documentation,javadocs">
    
    <!-- copy the jsp editors to a reasonable place -->
    <copy todir="${webroot.build.dir}/mmbase/edit">
      <fileset dir="${source-html.dir}/mmeditors/jsp"/>
    </copy>

    <!-- copy the jsp admin pages to a reasonable place -->
    <copy todir="${webroot.build.dir}/mmbase/admin">
      <fileset dir="${source-html.dir}/mmadmin/jsp"/>
    </copy>

    <!-- copy the editwizards to a reasonable place -->
    <copy todir="${webroot.build.dir}/mmbase/edit/wizard">
      <fileset dir="${source-html.dir}/mmapps/editwizard"/>
    </copy>
    
    <!-- docs -->
    <copy todir="${webroot.build.dir}/mmbase/documentation">
      <fileset dir="${mmdocs.dir}"/>
    </copy>         
    
    <!-- examples -->
    <copy todir="${webroot.build.dir}/mmexamples">
      <fileset dir="${source-html.dir}/mmexamples"/>
    </copy>         
    
    <copy todir="${webroot.build.dir}/mmbase/documentation">
      <fileset dir="${build.dir}/mmbase-src/docs"/>
    </copy>
        
  </target>

  <target name="clean.war">
    <delete dir="${webroot.build.dir}" />
    <delete dir="${config.build.dir}" />
    <delete dir="${minconfig.build.dir}" />
    <delete file="${build.dir}/mmbase/mmbase.war" />
    <delete file="${build.dir}/mmbase/minimalistic-mmbase.war" />
  </target>

    <!-- =================================================================== -->
    <!-- Create the MMBase war file                                          -->
    <!-- =================================================================== -->
  <target name="wars" description="Create full-fledged and minimalistic mmbase.war" depends="war,minimalistic.war" />
  
  <target name="war" description="Create a MMBase war-file" depends="lib.release,web,jar,war.config,war.webroot">
    
    <war warfile="${build.dir}/mmbase/mmbase.war" webxml="${source-html.dir}/WEB-INF/web.xml">
      <lib dir="${release.lib.dir}" />
      <!-- here our config has to be.. -->
      <webinf dir="${build.dir}">
        <include name="config/**"/>
      </webinf>
      
      <!-- our file's on the server -->
      <fileset dir="${build.dir}/webroot"/>
    </war>
  </target>
  
  <target name="minimalistic.war" description="Create a minimalistic MMBase war-file" depends="lib.release,web,jar,minimalistic.war.config">
    <war warfile="${build.dir}/mmbase/minimalistic-mmbase.war" webxml="${source-html.dir}/WEB-INF/web.xml">
      <lib dir="${release.lib.dir}" />
      <!-- here our config has to be.. -->
      <webinf dir="${build.dir}/min">
        <include name="config/**"/>
      </webinf>     
    </war>
  </target>


  <!-- =================================================================== -->
  <!-- Create the API documentation                                        -->
  <!-- =================================================================== -->
  <target name="javadocs"
          description="Create the API documentation"
          depends="init,lib.compile"
          unless="did.javadocs"
    >
    <mkdir dir="${build.dir}/mmbase-src/docs"/>
    <mkdir dir="${build.dir}/mmbase-src/docs/api"/>
    <javadoc packagenames="${javadoc.packages}"
             sourcepath="${source-src.dir}"
             destdir="${build.dir}/mmbase-src/docs/api"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="MMBase API"
             doctitle="MMBase"
             maxmemory="100M"
             bottom="MMBase build ${version}">
      <classpath>
        <fileset dir="${compile.lib.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </javadoc>
    <property name="did.javadocs" value="true" />
  </target>


  <!-- =================================================================== -->
  <!-- Create the web directory                                            -->
  <!-- This directory contains 'compiled' stuff, which must appear in the  -->
  <!-- html directory of the web-server. A web server specific tag can copy--> 
  <!-- them from here, depending on this 'web' target                      -->
  <!-- =================================================================== -->
  <target name="web" description="Make the things which must appear in the web-servers html directory"
         depends="init.compile,taglib.tld,community.tld,documentation">
  </target>

  <target name="taglib.tld.check">    
    <uptodate property="taglib.tld.uptodate" targetfile="${web.dir}/mmbase-taglib.tld" >
      <srcfiles dir="${source-src.dir}" includes="${source-taglib.xml},${xml2tld}" />
    </uptodate>
  </target>


  <target name="taglib.tld" description="Make the MMBase taglib  tld"
          depends="init.compile,taglib.tld.check" unless="taglib.tld.uptodate">          
    <mkdir dir="${web.dir}"/>
    <!-- create the mmbase-taglib tld: -->
    <java classname="org.apache.xalan.xslt.Process"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="yes">
      <arg value="-XML"/>
      <arg value="-DIAG"/>
      <arg value="-IN"/>
      <arg value="file:///${source-src.dir}/${source-taglib.xml}" />
      <arg value="-OUT"/>
      <arg value="${web.dir}/mmbase-taglib.tld"/>
      <arg value="-XSL"/>
      <arg value="${source-src.dir}/${xml2tld}" />
    </java>
  </target>

  <target name="taglib.doc.check">
    <uptodate property="taglib.doc.uptodate" targetfile="${reference.dir}/mmbase-taglib.html" >
      <srcfiles dir="${source-src.dir}" includes="${source-taglib.xml},${xml2html}" />
    </uptodate>
  </target>

  <target name="taglib.doc" description="Make the MMBase taglib documentation"
          depends="init.compile,taglib.doc.check" unless="taglib.doc.uptodate">
    <mkdir dir="${reference.dir}/taglib"/>
    <!-- and its documentation: -->
    <java classname="org.apache.xalan.xslt.Process"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="yes">
      <arg value="-EDUMP"/>
      <arg value="-DIAG"/>
      <arg value="-PARAM"/>
      <arg value="basedir"/>
      <arg value="${reference.dir}"/>
      <arg value="-PARAM"/>
      <arg value="files"/>
      <arg value="taglib" />
      <arg value="-XSL"/>
      <arg value="${source-src.dir}/${xml2html}" />
      <arg value="-IN"/>
      <arg value="file:///${source-src.dir}/${source-taglib.xml}" />
      <arg value="-OUT"/>
      <arg value="${reference.dir}/mmbase-taglib.html"/>
    </java>
  </target>

  <target name="community.tld.check">
    <uptodate property="community.tld.uptodate" targetfile="${web.dir}/mmcommunity-taglib.tld" >
      <srcfiles dir="${source-src.dir}" includes="${source-community.xml},${xml2tld}" />
    </uptodate>
  </target>

  <target name="community.tld" description="Make the MMBase community taglib tld"
          depends="init.compile,community.tld.check" unless="community.tld.uptodate">
    <mkdir dir="${web.dir}" />
    <!-- create the mmcommunity tld: -->
    <java classname="org.apache.xalan.xslt.Process"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="yes">
      <arg value="-Q"/>
      <arg value="-DIAG"/>
      <arg value="-IN"/>
      <arg value="file:///${source-src.dir}/${source-community.xml}"/>
      <arg value="-OUT"/>
      <arg value="${web.dir}/mmcommunity-taglib.tld"/>
      <arg value="-XSL"/>
      <arg value="${source-src.dir}/${xml2tld}" />
    </java>
  </target>


  <target name="community.doc.check">
    <uptodate property="community.doc.uptodate" targetfile="${reference.dir}/mmcommunity-taglib.html" >
      <srcfiles dir="${source-src.dir}" includes="${source-community.xml},${xml2html}" />
    </uptodate>
  </target>


  <target name="community.doc" description="Make the MMBase community taglib documentation"
          depends="init.compile,community.doc.check" unless="community.doc.uptodate">          
    <mkdir dir="${reference.dir}/community-taglib"/>
    <!-- and its documentation: -->
    <java classname="org.apache.xalan.xslt.Process"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="yes">
      <arg value="-DIAG"/>
      <arg value="-IN"/>
      <arg value="file:///${source-src.dir}/${source-community.xml}" />
      <arg value="-PARAM"/>
      <arg value="basedir"/>
      <arg value="${reference.dir}"/>
      <arg value="-PARAM"/>
      <arg value="files"/>
      <arg value="community-taglib" />
      <arg value="-OUT"/>
      <arg value="${reference.dir}/mmcommunity-taglib.html"/>
      <arg value="-XSL"/>
      <arg value="${source-src.dir}/${xml2html}" />
    </java>
  </target>



 
  <!-- =================================================================== -->
  <!-- Build the JUnit test environment                                    -->
  <!-- =================================================================== -->
  <target name="junit"
          description="Build the JUnit test environment"
          depends="init,lib.release,lib.compile,jar,expand.hsql">
    <mkdir dir="${build.dir}/junit"/>
    <mkdir dir="${build.dir}/junit/config"/>
    <mkdir dir="${build.dir}/junit/lib"/>
    <copy todir="${build.dir}/junit/config">
      <fileset dir="${source-config.dir}/default"/>
    </copy>
    <copy todir="${build.dir}/junit/config/builders">
      <fileset dir="${source-config.dir}/default/applications/BridgeTest/builders">
        <include name="**/*"/>
      </fileset>
    </copy>
    <replace file="${build.dir}/junit/config/applications/BridgeTest.xml">
      <replacetoken>auto-deploy=&quot;false&quot;</replacetoken>
      <replacevalue>auto-deploy=&quot;true&quot;</replacevalue>
    </replace>
    <replace file="${build.dir}/junit/config/modules/mmbaseroot.xml">
      <replacetoken>&lt;property name=&quot;database&quot;&gt;mysql&lt;/property&gt;</replacetoken>
      <replacevalue>&lt;property name=&quot;database&quot;&gt;hypersonic&lt;/property&gt;</replacevalue>
    </replace>
    <replace file="${build.dir}/junit/config/modules/jdbc.xml">
      <replacetoken>&lt;property name=&quot;password&quot;&gt;url&lt;/property&gt;</replacetoken>
      <replacevalue>&lt;property name=&quot;password&quot;&gt;&lt;/property&gt;</replacevalue>
    </replace>
    <replace file="${build.dir}/junit/config/modules/jdbc.xml">
      <replacetoken>&lt;property name=&quot;database&quot;&gt;install&lt;/property&gt;</replacetoken>
      <replacevalue>&lt;property name=&quot;database&quot;&gt;.&lt;/property&gt;</replacevalue>
    </replace>
    <replace file="${build.dir}/junit/config/modules/jdbc.xml">
      <replacetoken>&lt;property name=&quot;user&quot;&gt;url&lt;/property&gt;</replacetoken>
      <replacevalue>&lt;property name=&quot;user&quot;&gt;sa&lt;/property&gt;</replacevalue>
    </replace>
    <replace file="${build.dir}/junit/config/modules/jdbc.xml">
      <replacetoken>&lt;property name=&quot;driver&quot;&gt;org.gjt.mm.mysql.Driver&lt;/property&gt;</replacetoken>
      <replacevalue>&lt;property name=&quot;driver&quot;&gt;org.hsql.jdbcDriver&lt;/property&gt;</replacevalue>
    </replace>
    <replace file="${build.dir}/junit/config/modules/jdbc.xml">
      <replacetoken>&lt;property name=&quot;url&quot;&gt;jdbc:mysql://$HOST:$PORT/$DBM?user=*****&amp;amp;password=*****&lt;/property&gt;</replacetoken>
      <replacevalue>&lt;property name=&quot;url&quot;&gt;jdbc:mysql://$HOST:$PORT/$DBM?user=xsuser;password=xs4local&lt;/property&gt;</replacevalue>
    </replace>
    <copy file="${junit.jar}"   todir="${build.dir}/junit/lib"/>
    <copy file="${servlet.jar}" todir="${build.dir}/junit/lib"/>
    <copy file="${mmbase.jar}"  todir="${build.dir}/junit/lib"/>
    <copy file="${hsql.jar}"    todir="${build.dir}/junit/lib"/>
    <copy file="${xalan.jar}"   todir="${build.dir}/junit/lib"/>
    <copy file="${xerces.jar}"  todir="${build.dir}/junit/lib"/>
    <copy file="${jai_codec.jar}" todir="${build.dir}/junit/lib"/>
    <copy file="${jai_core.jar}"  todir="${build.dir}/junit/lib"/>
    <copy file="${log4j.jar}"     todir="${build.dir}/junit/lib"/>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the JUnit test environment                                    -->
  <!-- =================================================================== -->
  <target name="clean.junit" description="Clean the JUnit test environment"
          depends="clean.compile">
    <delete dir="${build.dir}/junit"/>
  </target>


  <!-- =================================================================== -->
  <!-- Run the bridgetest classes                                          -->
  <!-- =================================================================== -->
  <target name="run.junit" description="Run the bridgetest classes"
          depends="junit">
    <java classname="junit.swingui.TestRunner" fork="true">
      <classpath>
        <fileset dir="${build.dir}/junit/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg value="org.mmbase.test.bridge.AllTests"/>
      <sysproperty key="mmbase.config" file="${build.dir}/junit/config"/>
    </java>
  </target>


  <!-- =================================================================== -->
  <!-- Compile the AppTool                                                 -->
  <!-- =================================================================== -->
  <target name="compile.apptool" description="Compile the AppTool"
          depends="init.compile">
    <mkdir dir="${build.dir}/apptool/classes"/>
    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/apptool/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
      <include name="org/mmbase/module/tools/MMAppTool/*.java"/>
    </javac>
  </target>


  <!-- =================================================================== -->
  <!-- Build the AppTool                                                   -->
  <!-- =================================================================== -->
  <target name="apptool" description="Build the AppTool"
          depends="jar,compile.apptool">
    <mkdir dir="${build.dir}/apptool/lib"/>
    <copy file="${mmbase.jar}" todir="${build.dir}/apptool/lib"/>
    <copy file="${xerces.jar}" todir="${build.dir}/apptool/lib"/>
    <copy file="${servlet.jar}" todir="${build.dir}/apptool/lib"/>
  </target>


  <!-- =================================================================== -->
  <!-- Run the AppTool                                                     -->
  <!-- =================================================================== -->
  <target name="run.apptool" description="Run the AppTool"
          depends="apptool">
    <java classname="org.mmbase.module.tools.MMAppTool.MMAppTool" fork="true">
      <classpath>
        <pathelement location="${build.dir}/apptool/classes"/>
        <fileset dir="${build.dir}/apptool/lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </java>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the apptool                                                   -->
  <!-- =================================================================== -->
  <target name="clean.apptool" description="Clean the apptool">
    <delete dir="${build.dir}/apptool"/>
  </target>


  <!-- =================================================================== -->
  <!-- Various targets for automated downloads                             -->
  <!-- =================================================================== -->
  <target name="init.get">
    <property name="servlet.version" value="jakarta-servletapi-4"/>
    <property name="servlet.url" value="http://jakarta.apache.org/builds/jakarta-tomcat-4.0/archives/v4.0/${servlet.version}.tar.gz"/>
    <property name="servlet.jar" value="${expand.dir}/${servlet.version}/lib/servlet.jar"/>
    <available property="servlet.present"
               file="${download.dir}/${servlet.version}.tar.gz"/>
    <available property="servlet.expanded"
               file="${expand.dir}/${servlet.version}"/>
    <available property="servlet.jar.present"
               file="${servlet.jar}"/>

    <!-- HypersonicSQL -->
    <property name="hsql.version" value="hsql_142"/>
    <property name="hsql.url" value="http://download.sourceforge.net/hsql/${hsql.version}.zip"/>
    <property name="hsql.jar" value="${expand.dir}/${hsql.version}/hypersonicsql/demo/hsql.jar"/>
    <available property="hsql.present"
               file="${download.dir}/${hsql.version}.zip"/>
    <available property="hsql.expanded"
               file="${expand.dir}/${hsql.version}"/>
               
    <!-- hsqldb -->
    <property name="hsqldb.version" value="hsqldb_1_7_0_RC6a"/>
    <property name="hsqldb.url" value="http://belnet.dl.sourceforge.net/sourceforge/hsqldb/${hsqldb.version}.zip"/>
    <property name="hsqldb.jar" value="${expand.dir}/hsqldb/lib/hsqldb.jar"/>
    <available property="hsqldb.present"
               file="${download.dir}/${hsqldb.version}.zip"/>
    <available property="hsqldb.expanded"
               file="${expand.dir}/hsqldb/lib/hsqldb.jar"/>
               
    <!-- Xalan and Xerces -->
    <!-- 
    <property name="xalan.version" value="xalan-j_2_4_0"/>
    <property name="xalan.fullversion" value="xalan-j_2_4_0"/>
    <property name="xalan.url" value="http://xml.apache.org/dist/xalan-j/${xalan.version}-bin.tar.gz"/>
    <property name="xerces.jar" value="${expand.dir}/${xalan.fullversion}/bin/xercesImpl.jar"/>
    -->
    <property name="xalan.version" value="xalan-j_2_2"/>
    <property name="xalan.fullversion" value="xalan-j_2_2_0"/>
    <property name="xalan.url" value="http://xml.apache.org/dist/xalan-j/old/${xalan.version}-bin.tar.gz"/>
    <property name="xerces.jar" value="${expand.dir}/${xalan.fullversion}/bin/xerces.jar"/>

    <property name="xalan.jar" value="${expand.dir}/${xalan.fullversion}/bin/xalan.jar"/>
    <property name="xml-apis.jar" value="${expand.dir}/${xalan.fullversion}/bin/xml-apis.jar"/>

    <available property="xalan.present"
               file="${download.dir}/${xalan.version}-bin.tar.gz"/>
    <available property="xalan.expanded"
               file="${expand.dir}/${xalan.fullversion}"/>

    <property name="sun.download" value="http://java.sun.com/Download5?protocol=HTTP%20download&amp;platform=zip&amp;domain-checked=&amp;document=download&amp;mirror=http&amp;referer=" />
    <!-- JAI -->
    <property name="jai.version" value="jai1_0_2-lib-solaris"/>
    <property name="jai.url" value="${sun.download}http://java.sun.com/products/java-media/jai/downloads/download-1_0_2.html&amp;download-name=jai1_0_2-lib-solaris.tar.gz&amp;config-file=jai1_0_2.config"/>
    <property name="jai_codec.jar" value="${expand.dir}/${jai.version}/jre/lib/ext/jai_codec.jar"/>
    <property name="jai_core.jar" value="${expand.dir}/${jai.version}/jre/lib/ext/jai_core.jar"/>
    <available property="jai.present"
               file="${download.dir}/${jai.version}.tar.gz"/>
    <available property="jai.expanded"
      file="${expand.dir}/${jai.version}"/>

    <!-- mail.jar -->
    <property name="javamail_version" value="javamail-1_3"/>
    <property name="javamail.version" value="javamail-1.3"/>
    <property name="javamail.url" value="${sun.download}http://java.sun.com/products/javamail/&amp;download-name=${javamail_version}.zip&amp;config-file=${javamail_version}.config"/>
    <property name="javamail.jar" value="${expand.dir}/${javamail.version}/mail.jar" />

    <available property="javamail.present"  file="${download.dir}/${javamail_version}.zip"/>
    <available property="javamail.expanded" file="${expand.dir}/${javamail.version}"/>


    <!-- activation.jar -->
    <property name="javaactivation_version" value="jaf-1_0_2"/>
    <property name="javaactivation.version" value="jaf-1.0.2"/>
   <property name="javaactivation.url" value="${sun.download}http://java.sun.com/products/javabeans/glasgow/jaf.html&amp;download-name=${javaactivation_version}.zip&amp;config-file=${javaactivation_version}.config"/>
    <property name="javaactivation.jar" value="${expand.dir}/${javaactivation.version}/activation.jar" />

    <available property="javaactivation.present"  file="${download.dir}/${javaactivation_version}.zip"/>
    <available property="javaactivation.expanded" file="${expand.dir}/${javaactivation.version}"/>

    <!-- Log4j -->
    <property name="log4j.version" value="1.2.7" /> 
    <property name="log4j.fullversion" value="jakarta-log4j-${log4j.version}"/>
    <property name="log4j.url"         value="http://jakarta.apache.org/log4j/${log4j.fullversion}.tar.gz"/>
    <property name="log4j.jarpath" value="dist/lib/log4j-${log4j.version}.jar" /> 
    <property name="log4j.jar" value="${expand.dir}/${log4j.fullversion}/${log4j.jarpath}" />
    <available property="log4j.present"
               file="${download.dir}/${log4j.fullversion}.tgz"/>
    <available property="log4j.expanded"
               file="${expand.dir}/${log4j.fullversion}"/>
    <!-- JUnit -->
    <property name="junit.version" value="junit3.7"/>
    <property name="junit.url" value="http://download.sourceforge.net/junit/${junit.version}.zip"/>
    <property name="junit.jar" value="${expand.dir}/${junit.version}/junit.jar"/>
    <available property="junit.present"
               file="${download.dir}/${junit.version}.zip"/>
    <available property="junit.expanded"
               file="${expand.dir}/${junit.version}"/>

    <!-- JSPSmartUpload -->
    <property name="jspsmartupload.file" value="jspSmartUpload" />
    <property name="jspsmartupload.url" value="http://www.jspsmart.com/liblocal/download/EN/${jspsmartupload.file}.tar.gz" />
    <property name="jspsmartupload.jar" value="${expand.dir}/jspsmartupload/jspsmartupload.jar" />
    <available property="jspsmartupload.present" file="${download.dir}/${jspsmartupload.file}.tar.gz" />
    <available property="jspsmartupload.expanded" file="${jspsmartupload.jar}" />

    <!-- Docbook XSL -->
    <property name="docbook-xsl.version" value="docbook-xsl-1.53.0"  />
    <property name="docbook-xsl.file" value="${docbook-xsl.version}.tar.gz"  />
    <property name="docbook-xsl.url" value="http://belnet.dl.sourceforge.net/sourceforge/docbook/${docbook-xsl.file}" />
    <available property="docbook-xsl.present"  file="${download.dir}/${docbook-xsl.file}" />
    <available property="docbook-xsl.expanded"  file="${expand.dir}/${docbook-xsl.version}" />


    <!-- JDBC jar -->
    <property  name="jdbc.url" value="http://java.sun.com/Download3?protocol=HTTP%20download&amp;referer=http://java.sun.com/products/jdbc/download.html&amp;download-name=jdbc2_0-stdext.jar&amp;config-file=jdbc2_0-stdext-bin.config&amp;platform=jar&amp;domain-checked=&amp;" />
 
    <property name="jdbc.jar" value="${download.dir}/jdbc.jar" />
    <available property="jdbc.present" file="${jdbc.jar}" />




    <!-- Init actions -->
    <mkdir dir="${download.dir}"/>
    <mkdir dir="${expand.dir}"/>
  </target>


  <target name="get.jdbc" depends="init.get" unless="jdbc.present">
    <get src="${jdbc.url}"
         dest="${jdbc.jar}"
         verbose="on"/>
  </target>

  <target name="get.servlet" depends="init.get" unless="servlet.present">
<get src="${servlet.url}"
         dest="${download.dir}/${servlet.version}.tar.gz"
         verbose="on"/>    
  </target>

  <target name="expand.servlet" depends="get.servlet" unless="servlet.expanded">
    <gunzip src="${download.dir}/${servlet.version}.tar.gz" dest="${expand.dir}"/>
    <untar src="${expand.dir}/${servlet.version}.tar" dest="${expand.dir}/${servlet.version}"/>
    <move todir="${expand.dir}/${servlet.version}">
      <fileset dir="${expand.dir}/${servlet.version}/jakarta-servletapi-4"/>
    </move>
    <delete file="${expand.dir}/${servlet.version}.tar"/>
  </target>

  <target name="get.hsqldb" depends="init.get" unless="hsqldb.present">
    <get src="${hsqldb.url}"
         dest="${download.dir}/${hsqldb.version}.zip"
         verbose="on"
    />
  </target>

  <target name="expand.hsqldb" depends="get.hsqldb" unless="hsqldb.expanded">
    <!-- <mkdir dir="${expand.dir}/${hsqldb.version}"/> -->
    <!-- <unzip src="${download.dir}/${hsqldb.version}.zip" dest="${expand.dir}/${hsqldb.version}"/> -->
    <unzip src="${download.dir}/${hsqldb.version}.zip" dest="${expand.dir}"/>    
  </target>

  <target name="get.xalan" depends="init.get" unless="xalan.present">
    <get src="${xalan.url}"
         dest="${download.dir}/${xalan.version}-bin.tar.gz"
         verbose="on"/>
  </target>

  <target name="expand.xalan" depends="get.xalan" unless="xalan.expanded">
    <gunzip src="${download.dir}/${xalan.version}-bin.tar.gz" dest="${expand.dir}"/>
    <untar src="${expand.dir}/${xalan.version}-bin.tar" dest="${expand.dir}"/>
    <delete file="${expand.dir}/${xalan.version}-bin.tar"/>
  </target>

  <target name="get.jai" depends="init.get" unless="jai.present">
    <get src="${jai.url}"
         dest="${download.dir}/${jai.version}.tar.gz"
         verbose="on"/>
  </target>

  <target name="expand.jai" depends="get.jai" unless="jai.expanded">
    <mkdir dir="${expand.dir}/${jai.version}"/>
    <gunzip src="${download.dir}/${jai.version}.tar.gz" dest="${expand.dir}/${jai.version}"/>
    <untar src="${expand.dir}/${jai.version}/${jai.version}.tar" dest="${expand.dir}/${jai.version}"/>
    <delete file="${expand.dir}/${jai.version}/${jai.version}.tar"/>
  </target>

  <target name="get.javamail" depends="init.get" unless="javamail.present">
    <get src="${javamail.url}"
         dest="${download.dir}/${javamail_version}.zip"
         verbose="on"/>
  </target>

  <target name="expand.javamail" depends="get.javamail" unless="javamail.expanded">
    <unzip src="${download.dir}/${javamail_version}.zip" dest="${expand.dir}"/>
  </target>

  <target name="get.javaactivation" depends="init.get" unless="javaactivation.present">
    <get src="${javaactivation.url}"
         dest="${download.dir}/${javaactivation_version}.zip"
         verbose="on"/>
  </target>

  <target name="expand.javaactivation" depends="get.javaactivation" unless="javaactivation.expanded">
    <unzip src="${download.dir}/${javaactivation_version}.zip" dest="${expand.dir}"/>
  </target>

  <target name="get.log4j" depends="init.get" unless="log4j.present">
    <get src="${log4j.url}"
         dest="${download.dir}/${log4j.fullversion}.tgz"
         verbose="on"/>
  </target>

  <target name="expand.log4j" depends="get.log4j" unless="log4j.expanded">
    <gunzip src="${download.dir}/${log4j.fullversion}.tgz" dest="${expand.dir}/${log4j.fullversion}.tar"/>
    <untar src="${expand.dir}/${log4j.fullversion}.tar" dest="${expand.dir}"/>
    <delete file="${expand.dir}/${log4j.fullversion}.tar"/>
  </target>

  <target name="get.junit" depends="init.get" unless="junit.present">
    <get src="${junit.url}"
         dest="${download.dir}/${junit.version}.zip"
         verbose="on"/>
  </target>

  <target name="expand.junit" depends="get.junit" unless="junit.expanded">
    <unzip src="${download.dir}/${junit.version}.zip" dest="${expand.dir}"/>
  </target>

  <target name="get.hsql" depends="init.get" unless="hsql.present">
    <get src="${hsql.url}"
         dest="${download.dir}/${hsql.version}.zip"
         verbose="on"/>
  </target>

  <target name="expand.hsql" depends="get.hsql" unless="hsql.expanded">
    <mkdir dir="${expand.dir}/${hsql.version}"/>
    <unzip src="${download.dir}/${hsql.version}.zip" dest="${expand.dir}/${hsql.version}"/>
  </target>

  <!-- Jsp Smartupload is necessary for the editwizards -->
  <target name="get.jspsmartupload" depends="init.get" unless="jspsmartupload.present">
    <get src="${jspsmartupload.url}"
         dest="${download.dir}/${jspsmartupload.file}.tar.gz" 
         verbose="on" />
  </target>

  <target name="expand.jspsmartupload" depends="get.jspsmartupload" unless="jspsmartupload.expanded">
    <mkdir dir="${expand.dir}/jspsmartupload" />
    <gunzip src="${download.dir}/${jspsmartupload.file}.tar.gz" dest="${expand.dir}/jspsmartupload/${jspsmartupload.file}.tar"/>
    <untar src="${expand.dir}/jspsmartupload/${jspsmartupload.file}.tar" dest="${expand.dir}/jspsmartupload"/>

    <echo file="${expand.dir}/jspsmartupload/manifest.mf">
Name: com/jspsmart/upload
Version: MMBase build ${version}
</echo>
    <jar jarfile="${expand.dir}/jspsmartupload/jspsmartupload.jar"
         basedir="${expand.dir}/jspsmartupload/jspsmartupload/Web-inf/classes"
	     includes="com/**"
	     manifest="${expand.dir}/jspsmartupload/manifest.mf" >
    </jar>
  </target>


  <target name="get.docbook-xsl" depends="init,init.get" unless="docbook-xsl.present">
    <get src="${docbook-xsl.url}"
         dest="${download.dir}/${docbook-xsl.file}" 
         verbose="on"
      />
  </target>

  <target name="expand.docbook-xsl" depends="get.docbook-xsl" unless="docbook-xsl.expanded">
    <gunzip src="${download.dir}/${docbook-xsl.file}" dest="${expand.dir}/${docbook-xsl.version}.tar"/>
    <untar src="${expand.dir}/${docbook-xsl.version}.tar"        dest="${expand.dir}"/>
    <delete file="${expand.dir}/${docbook-xsl.version}.tar"/>
  </target>

  


  <!-- =================================================================== -->
  <!-- Clean the download directory                                        -->
  <!-- =================================================================== -->
  <target name="clean.download" description="Clean the download directory">
    <delete dir="${download.dir}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the expand directory                                          -->
  <!-- =================================================================== -->
  <target name="clean.expand" description="Clean the expand directory">
    <delete dir="${expand.dir}"/>
  </target>


  <!-- =================================================================== -->
  <!-- (Step 1 for remote) Compile the remote generator classes            -->
  <!-- =================================================================== -->
  <target name="compile.remote.generator" description="Compile the remote generator classes" depends="init">
    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
           <include name="org/mmbase/bridge/remote/generator/*.java"/>
    </javac>
  </target>


  <!-- =================================================================== -->
  <!-- check if MMCI.xml is present                                        -->
  <!-- =================================================================== -->
  <target name="check.mmci.xml.present" description="check if MMCI.xml is present" depends="init">
    <available property="mmci.xml.present" file="${generated-source-src.dir}/MMCI.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- (Step 2 for remote) Generate the source for the remote classes      -->
  <!-- =================================================================== -->
  <target name="generate.remote"
          description="Generate the source for the remote classes"
	depends="init,init.compile,compile.remote.generator,check.mmci.xml.present"
          unless="mmci.xml.present">


    <mkdir dir="${generated-source-src.dir}/org/mmbase/bridge/remote"/>
    <!-- fork="true" is needed because MMBase uses some xerces classes directly but ant is
       using the sun jaxp implementation. By forking we do not use theant classloader -->

    <java classname="org.mmbase.bridge.remote.generator.MMCI" fork="true" classpathref="compile.classpath" >
      <arg value="${generated-source-src.dir}/MMCI.xml" />
	<classpath>
		<pathelement location="${build.dir}/classes" />
	</classpath>
    </java>
	<!-- fork="true" is also needed for the RemoteGenerator so we do not use the ant classloader -->
    <java classname="org.mmbase.bridge.remote.generator.RemoteGenerator" classpathref="compile.classpath" fork="true" >
      <arg value="${generated-source-src.dir}"/>
      <arg value="${generated-source-src.dir}/MMCI.xml"/>
      <classpath>
        <pathelement location="${build.dir}/classes"/>
      </classpath>
    </java>
  </target>


  <!-- =================================================================== -->
  <!-- (Step 3 for remote) Compile the remote classes                      -->
  <!-- =================================================================== -->
  <target name="compile.remote" description="Compile the remote classes" depends="init,init.compile,generate.remote">
    <javac
           destdir="${build.dir}/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
      <src path="${generated-source-src.dir}" />
      <src path="${source-src.dir}" />
      <include name="org/mmbase/bridge/remote/*.java"/>
      <include name="org/mmbase/bridge/remote/rmi/*.java"/>
      <include name="org/mmbase/bridge/remote/implementation/*.java"/>
    </javac>
    <rmic base="${build.dir}/classes" classpathref="compile.classpath">
    	<include name="org/mmbase/bridge/remote/rmi/*.class"/>
        <classpath>
           <pathelement location="${build.dir}/classes"/>
        </classpath>
    </rmic>
    <javac
           destdir="${build.dir}/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
      <src path="${generated-source-src.dir}" />
      <src path="${source-src.dir}" />
      <include name="org/mmbase/bridge/RemoteContext.java"/>
      <include name="org/mmbase/bridge/ContextProvider.java"/>
      <include name="org/mmbase/module/RemoteMMCI.java"/>
    </javac>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the remote-classes                                            -->
  <!-- =================================================================== -->
  <target name="clean.remote" depends="init">
    <delete failonerror="false" dir="${generated-source-src.dir}/org/mmbase/bridge/remote"/>
    <delete failonerror="false" file="${generated-source-src.dir}/MMCI.xml"/>
    <!-- Transition period. Until everybody removed the remote
    code from their source-dir, we clean it also there.
    -->
    <delete failonerror="false">
      <fileset dir="${source-src.dir}">
        <include name="org/mmbase/bridge/remote/*.java"/>
      </fileset>
    </delete>
    <delete file="${source-src.dir}/MMCI.xml"/>
  </target>

 <!-- ================================================================================ -->
 <!-- Perform docbook2html conversion in the documentation module                      -->
 <!-- ================================================================================ -->

  <target name="docbookumentation" 
    depends="expand.docbook-xsl,init,init.compile"
    description="Make the MMBase documentation from docbook-sources">

    <copy todir="${build.dir}" file="${source-documentation.dir}/style/docbook2xhtml.xslt" />
    <replace  file="${build.dir}/docbook2xhtml.xslt" token="[BASESTYLESHEET]" value="${expand.dir}/${docbook-xsl.version}/xhtml/docbook.xsl" />

    <!-- copy also the images and resources -->
    <copy todir="${mmdocs.dir}/" >
      <fileset dir="${source-documentation.dir}" >
        <exclude name="**/*.xml"/>
        <exclude name="**/*.xslt"/>
      </fileset>
    </copy>

    <!-- 
    <style 
    basedir="${source-documentation.dir}" 
    destdir="${mmdocs.dir}"      
      style="${build.dir}/docbook2xhtml.xslt"
      processor="xalan"
      >
      <param name="html.stylesheet" expression="'style.css'"/>
      <include name="**/*.xml" />
    </style>
    -->
    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
           <include name="org/mmbase/util/XSLTransformer.java" />
    </javac>

    <java classname="org.mmbase.util.XSLTransformer"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="no">
      <jvmarg value="-Dmmbase.config=${source.dir}/config/default" />
      <jvmarg value="-mx100m" />
      <classpath>
        <pathelement location="${build.dir}/classes" />
      </classpath>
      <arg value="${build.dir}/docbook2xhtml.xslt" />
      <arg value="${source-documentation.dir}" />
      <arg value="${mmdocs.dir}" />
    </java>
    
  </target>

  <target name="documentation" 
          depends="taglib.doc,community.doc,docbookumentation,documentation.builders">
    <copy todir="${mmdocs.dir}/" >
      <fileset dir="${source-html.dir}/mmdocs" />
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--  Create the Builder documentation                                   -->
  <!-- =================================================================== -->
  <target name="documentation.builders" 
          depends="docbookumentation"
          description="Generate builder-documentation from the builder config files">
    <mkdir dir="${mmdocs.dir}/templaters/builders"/>

    <copy todir="${mmdocs.dir}/templaters/builders" 
          file="${source-documentation.dir}/style/docbook2xhtml.xslt"
          />

    <!-- not used at the moment
    <replace file="${mmdocs.dir}/templaters/builders/docbook2xhtml.xslt" 
             token="[BASESTYLESHEET]" 
             value="${expand.dir}/${docbook-xsl.version}/xhtml/chunk.xsl" />
    -->
    <replace file="${mmdocs.dir}/templaters/builders/docbook2xhtml.xslt" 
             token="[BASESTYLESHEET]" 
             value="${expand.dir}/${docbook-xsl.version}/xhtml/docbook.xsl" />

    <!-- compile class for listing of builders -->
    <javac srcdir="${source-src.dir}"
           destdir="${build.dir}/classes"
           classpathref="compile.classpath"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
           <include name="org/mmbase/util/BuilderLister.java" />
    </javac>
    
    <!-- call class, this will give an xml file with a listing of all the builders -->
    <java classname="org.mmbase.util.BuilderLister"
          classpathref="compile.classpath"
          fork="yes"
          failonerror="no"
          output="${mmdocs.dir}/templaters/builders/allbuilders.xml">
      <jvmarg value="-Dmmbase.config=${source.dir}/config/default" />
      <jvmarg value="-mx100m" />
      <classpath>
        <pathelement location="${build.dir}/classes" />
      </classpath>
      <arg value="${source.dir}/config/default/builders" />
    </java>
  
    <!-- put all builders in one big file -->
    <style      
      style="${source-config.dir}/default/xslt/allbuilders.xsl"
      extension=".xml"
      in="${mmdocs.dir}/templaters/builders/allbuilders.xml"
      out="${mmdocs.dir}/templaters/builders/allbuilders-total.xml"
      >
        <param name="language" expression="${documentation.builders.language}"/>
    </style>

    <!-- convert this file into docbook -->
    <style      
      style="${source-config.dir}/default/xslt/builder2docbook.xsl"
      extension=".xml"
      in="${mmdocs.dir}/templaters/builders/allbuilders-total.xml"
      out="${mmdocs.dir}/templaters/builders/allbuilders-docbook.xml"
      >
        <param name="language" expression="${documentation.builders.language}"/>
    </style>


    <!-- generate xhtml -->
    <style      
      style="${mmdocs.dir}/templaters/builders/docbook2xhtml.xslt"
      extension=".html"
      in="${mmdocs.dir}/templaters/builders/allbuilders-docbook.xml"
      out="${mmdocs.dir}/templaters/builders/index.html"
      >
        <param name="root" expression="../../"/>
    </style>
    
    <!-- remove temp files -->
    <delete file="${mmdocs.dir}/templaters/builders/allbuilders.xml"/>
    <delete file="${mmdocs.dir}/templaters/builders/allbuilders-total.xml"/>
    <delete file="${mmdocs.dir}/templaters/builders/docbook2xhtml.xslt"/>
  </target>

  <!-- =================================================================== -->
  <!-- Clean the documentation directory                                   -->
  <!-- =================================================================== -->
  <target name="clean.documentation" description="Clean the generated documenation">
    <delete dir="${mmdocs.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Clean                                                               -->
  <!-- =================================================================== -->
  <target
    name="clean.build" 
    depends="clean.compile,clean.remote,clean.junit,clean.apptool,clean.lib"
    description="Clean all classes and generated java, safe for every recompilation"
    >
    <!-- junit,apptool? -->
  </target>

  <target 
    name="clean"
    depends="clean.build,clean.documentation,clean.expand,clean.srcdist,clean.bindist,clean.war" 
    description="Clean everything (except for downloading)" />

</project>




