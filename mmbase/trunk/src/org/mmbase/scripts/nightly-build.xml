<?xml version="1.0" ?>
<!-- 
   Nightly  build script

   @author Eduard Witteveen
   @author Michiel Meeuwissen
   @version  $Id: nightly-build.xml,v 1.8 2002-08-22 05:43:56 michiel Exp $
   
-->
<project name="project naam" default="full" basedir=".">
  <property name="version" value="0.0.1" />                          <!-- use an argument -Dversion -->
  <property name="buildlocation.dir"      value="${basedir}/build"/>
  <property name="base.cvs.dir" value="${basedir}/cvs"/>
  <property name="download.dir" value="${basedir}/download" />
  <property name="destination.dir" value="${basedir}/dailybuild-${version}" />
  
  <!-- files that are to be created -->
  <property name="sourcepackage.path" value="${destination.dir}/mmbase-src.zip"/>
  <property name="libpackage.path" value="${destination.dir}/mmbase-lib.zip"/>
  <property name="jarpackage.path" value="${destination.dir}/mmbase.jar"/>
  <property name="warpackage.file" value="${destination.dir}/mmbase.war"/>

  <!-- Make build for this time -->
  <property name="date" value="now" />

  <!-- these are not used
  <property name="build.jar.log.path" value="${destination.dir}/mmbase-jar.log"/>
  <property name="build.web.log.path" value="${destination.dir}/mmbase-web.log"/>
  -->
        
  <!-- ================================================================================
       Getting the source by CVS and store it
       ================================================================================
  -->      
  <property name="base.cvs.config.dir" value="${base.cvs.dir}"/>
  <property name="cvs.config.module" value="config"/>     
  <property name="cvs.config.dir" value="${base.cvs.config.dir}/${cvs.config.module}"/>
  
  <property name="base.cvs.html.dir" value="${base.cvs.dir}"/>
  <property name="cvs.html.module" value="html"/>
  <property name="cvs.html.dir" value="${base.cvs.html.dir}/${cvs.html.module}"/>

  <property name="base.cvs.documentation.dir" value="${base.cvs.dir}"/>
  <property name="cvs.documentation.module" value="documentation"/>
  <property name="cvs.documentation.dir" value="${base.cvs.documentation.dir}/${cvs.documentation.module}"/>
  
  <property name="base.cvs.src.dir" value="${base.cvs.dir}/src/org"/>
  <property name="cvs.mmbase.module" value="mmbase"/>
  <property name="cvs.mmbase.dir" value="${base.cvs.src.dir}/${cvs.mmbase.module}"/>


  <property name="cvsroot" value=":pserver:guest@www.mmbase.org:/usr/local/cvs" />
  <property name="checkoutcommand" value="checkout -D ${date} -P" />

  <target name="cvs">
    <echo>Doing an anonymous CVS login</echo>
    <cvspass cvsroot="${cvsroot}" password="guest" />
		
    <!-- get config from cvs -->
    <mkdir dir="${base.cvs.config.dir}"/>
    <cvs cvsRoot="${cvsroot}"
      command="${checkoutcommand}"
      package="${cvs.config.module}"
      dest="${base.cvs.config.dir}"
      />              
    
    <!-- get html from cvs -->
    <mkdir dir="${base.cvs.html.dir}"/>
    <cvs cvsRoot="${cvsroot}"
      command="${checkoutcommand}"
      package="${cvs.html.module}"
      dest="${base.cvs.html.dir}"
      />                              

    <!-- get documentation from cvs -->
    <mkdir dir="${base.cvs.documentation.dir}"/>
    <cvs cvsRoot="${cvsroot}"
      command="${checkoutcommand}"
      package="${cvs.documentation.module}"
      dest="${base.cvs.documentation.dir}"
      />                              

    <!-- get src from cvs -->
    <mkdir dir="${base.cvs.src.dir}"/>
    <cvs cvsRoot="${cvsroot}"
      command="${checkoutcommand}"
      package="${cvs.mmbase.module}"
      dest="${base.cvs.src.dir}"
      />                              
  </target>
  
  <!-- mirror the CVS tree, because e.g. remote bridge is generated in it, we don't wan't to pollute -->
  <target name="mirror" depends="cvs">
    <!-- first copy our cvs to the dir so, our source stays intact.. -->
    <copy todir="${buildlocation.dir}">
      <fileset dir="${base.cvs.dir}"/>
    </copy>
  </target>
  
  <!-- store / zip the current sources--> 
  <target name="storesource" depends="mirror">
    <mkdir dir="${destination.dir}"/>
     <echo file="${destination.dir}/README.txt">
This is the nightly build ${version}.
It contains the following:
README.txt     This file
mmbase-src.zip The source from which this build was made
mmbase-lib.zip The libraries against which the source were compiled
mmbase.jar     The mmbase.jar (containing all mmbase classes and the mmbase taglib descriptor (tld))
mmbase.war     A web-application archive, configured for an hsql database, and complete with documentation and editors
dtd            The dtd's unpacked from the source directory
api            API-documentation
mmdocs         Other documentation (also in mmbase.war)
nightly-build.xml  Used to generate all this with ant. You can download only this and redo everything locally (you need jdk 1.2/1.3, ant 1.4, cvs, internet-connection, more?)
</echo>

    <zip zipfile="${sourcepackage.path}"
      basedir="${buildlocation.dir}"
     >
      <patternset>
        <exclude name="build/**"/> <!-- handy if you (temporary) remove the clean target -->
      </patternset>
    </zip>
		
    <copy todir="${destination.dir}/dtd">
      <fileset dir="${base.cvs.config.dir}/config/default/dtd"/>
    </copy>

    <copy tofile="${destination.dir}/nightly-build.xml" file="${ant.file}" />
    
  </target>       
  
  <!-- ================================================================================
       Actual work, building war, javadocs.
  -->
  <property name="buildscript.dir" value="src/org/mmbase/scripts"/>
  <property name="buildlocation.buildscript.dir" value="${buildlocation.dir}/${buildscript.dir}"/>
  <property name="buildfile" value="build.xml"/>
  <property name="buildlocation.buildfile.path" value="${buildlocation.buildscript.dir}/${buildfile}"/>   
  <property name="build.compiler" value="jikes" />	
  <property name="optimize" value="off" /><!-- line numbers ?-->
  <property name="debug" value="on" /> <!-- for nightly builds it is more or less logical to compile with debug = on -->	
  

  <target name="build.jar" depends="mirror">
    <ant antfile="${buildlocation.buildfile.path}" dir="${buildlocation.buildscript.dir}" target="jar" />
	</target>

  <target name="build.war" depends="mirror">
    <ant antfile="${buildlocation.buildfile.path}" dir="${buildlocation.buildscript.dir}" target="war" />
	</target>

  <target name="javadocs" depends="mirror">
    <ant antfile="${buildlocation.buildfile.path}" dir="${buildlocation.buildscript.dir}" target="javadocs" />	
  </target>



  <!-- ================================================================================ 
        package / copy  all interesting stuff 
  -->
  <property name="mmbase.compile.lib.dir" value="${buildlocation.dir}/build/lib"/> 
  <property name="mmbase.release.lib.dir" value="${buildlocation.dir}/build/mmbase/mmbase-webapp/WEB-INF/lib"/> 
  <property name="mmbase.jar.file" value="mmbase.jar"/>
  <property name="mmbase.web.dir" value="${buildlocation.dir}/build/webroot"/> 
  

  <target name="storejavadocs" depends="javadocs">
		<!-- the java docs -->
		<copy todir="${destination.dir}">
			<fileset dir="${buildlocation.dir}/build/mmbase-src/docs"/>
    </copy>
  </target>

  <target name="storebuild" depends="build.jar">
    <!-- our build thingies -->
    <!--
    <zip zipfile="${jarpackage.path}">
      <fileset dir="${mmbase.release.lib.dir}" includes="${mmbase.jar.file}" />
      <fileset dir="${mmbase.web.dir}" />
    </zip>
    -->

    <copy file="${mmbase.release.lib.dir}/${mmbase.jar.file}" tofile="${jarpackage.path}"/>

    <!-- the libs we used -->
    <zip zipfile="${libpackage.path}" basedir="${mmbase.compile.lib.dir}">
      <exclude name="${mmbase.jar.file}"/>
      <include name="*.jar"/>
    </zip>         		
  </target>

  <target name="storewar" depends="build.war">
		<!-- the war... -->
    <copy file="${buildlocation.dir}/build/mmbase/mmbase.war" tofile="${warpackage.file}"/>

    <!-- mmdocs -->
    <copy todir="${destination.dir}/mmdocs">
			<fileset dir="${buildlocation.dir}/build/mmbase/mmbase-webapp/mmdocs" />
    </copy>
	</target>       
  
  
  <!-- clean for a new compile -->
  <target name="clean">
		<delete dir="${buildlocation.dir}" /> 
  </target>
  
  <!-- ================================================================================
  The default target is 'full': do a nightly build.
  --> 
  <target name="full" depends="clean,storesource,storejavadocs,storebuild,storewar">
  </target>
</project>
