<?xml version="1.0" encoding="utf-8"?>
<!--
  If you use an application server which does not support web-app version 2.4 (e.g. Tomcat 4.x,
  Orion), then you can use web-2.3.xml in stead of this.

  Web-app 2.4 gives the possibility to use EL (Expression Language)

  $Id: web.xml 35123 2009-05-12 21:20:03Z michiel $
-->
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         version="2.4">
  <description>
    MMBase is an open-source content managment system. See http://www.mmbase.org/
  </description>

  <display-name>MMBase distro</display-name>

  <!-- uncomment this and fill in the right value if you want to relocate your user or config directory
  <context-param>
    <param-name>user.dir</param-name>
    <param-value>$WEBROOT</param-value>
  </context-param>
  <context-param>
    <param-name>mmbase.config</param-name>
    <param-value>WEB-INF/config</param-value>
  </context-param>
  -->
  <!--
    MMBase Taglib settings
    -->
  <!--
  Whether tags should try to evaluate the body without buffering if that is possible. This feature
  of taglibs is not supported by all applications servers (orion, tomcat < 4.1.19?), in which case
  setting this to true will cause rather strange results.
  If your application server does support this well (resin 3, tomcat 5), you can set this to true,
  and improve performance.
  -->
  <context-param>
    <param-name>mmbase.taglib.eval_body_include</param-name>
    <param-value>true</param-value>
  </context-param>

  <!--
    Whether the mm:url tag (and other URL producing tags) should produce relative URL's (relative to
    the page on which the mm:url is called).  You might try to set this to 'true' if you desire only
    relative urls in your site. This is an expirimental option, which is known not to work in
    certain situations (like redirects).
  -->
  <context-param>
    <param-name>mmbase.taglib.url.makerelative</param-name>
    <param-value>false</param-value>
  </context-param>

  <!--
      To avoid accidental recursing mm:include (and extended tags) don't work below a certain level (defaults to 50).
  -->
  <context-param>
    <param-name>mmbase.taglib.max_include_level</param-name>
    <param-value>50</param-value>
  </context-param>

  <!--
    The MMBase taglib stores its variable compatible with EL. If you don't want that (e.g. because
    it was not like this in MMBase 1.7) then you can set this parameter to 'true'
  -->
  <context-param>
    <param-name>mmbase.taglib.isELIgnored</param-name>
    <param-value>false</param-value>
  </context-param>

  <!--
      If true, the image tag wil produce URL's with templates in them. This is to support legacy
      setups (e.g. with an 'servdb' image-servlet). This option is actually unneeded in 1.8, but
      could have its use in 1.7, and is here only for completeness.
  -->
  <context-param>
    <param-name>mmbase.taglib.image.urlconvert</param-name>
    <param-value>false</param-value>
  </context-param>
  <!--
      If true, the image tag will automaticly add 'f(asis)' to every template. This means that
      e.g. a png source image will be converted to a png. This can also be arranged as a
      image-builder property, but in that case this behaviour is not reflected in the 'ckey' of the
      image, so that may lead to backwards-compatibility issues.
  -->
  <context-param>
    <param-name>mmbase.taglib.image.format.asis</param-name>
    <param-value>false</param-value>
  </context-param>

  <context-param>
    <param-name>mmbase.taglib.field.nonExistance</param-name>
    <param-value>exception</param-value>
  </context-param>

  <context-param>
    <param-name>mmbase.taglib.function.nonExistance</param-name>
    <param-value>exception</param-value>
  </context-param>

  <!--
      Whether the server must be 'stalled' until this web-app is completely running.  Recognized by
      MMBase.  If your web-app is in an application server with other application, it is good that
      the initialization of mmbase does not stall the initialization of the complete application
      server. Faster applications can already start serving content, without having to wait for the rest.

      If however your application is 'alone' in the application server and is even load-balanced
      over several servers, then you do want that the application stalls the server, so that the
      load-balancer (with AJP) can see that this one is not actually running (the 503 status code
      does not seem to suffice).
  -->
  <context-param>
    <param-name>stall-server</param-name>
    <param-value>false</param-value>
  </context-param>
  <!--
      When creating a query, it is not necessary to specify which of the path elements are on wich side of the join via insrel.  Using the allowed
      relations in 'typerel' this will be implicitely corrected to the correct value.  If _both_ directions are possible, and it is not specified,
      then MMBase used to fall back to implementing precisely that, so it would add OR's to the query to make both possibilities match.

      The disadvantage of that, is that it most of the time performs very badly in the database. So this implicit fall back direction can be configured.
      If you set it to 'DESTINATION' then if not specified, and both directions are possible, it takes 'DESTINATION'.
  -->
  <context-param>
    <param-name>mmbase.defaultRelationStepDirection</param-name>
    <param-value>DESTINATION</param-value> <!-- Defaults to BOTH in MMBase lt 1.9.4 or this context-param is missing -->
  </context-param>


  <!--
       Whether URL's generated to images must include a filename.
       Possible values are: 'yes' (from filename field, or from title), 'no', or '' (only if the 'filename' field is present, and filled).
  -->
  <context-param>
    <param-name>mmbase.servlet.images.addfilename</param-name>
    <param-value>yes</param-value>
  </context-param>
  <!-- same for attachments -->
  <context-param>
    <param-name>mmbase.servlet.attachments.addfilename</param-name>
    <param-value>yes</param-value>
  </context-param>



  <filter>
    <filter-name>FrameworkFilter</filter-name>
    <filter-class>org.mmbase.framework.FrameworkFilter</filter-class>
    <init-param>
      <param-name>excludes</param-name>
      <param-value>([.]ico$|[.]jpg$|[.]gif$|[.]png$|[.]css$|[.]js$|[.]jsp$|[.]do$)|/errorpages|/editors</param-value>
    </init-param>
  </filter>

  <!--
    Filter for jumpers
    Uncomment this code if you want to activate the jumpers filter.
    You need to install the jumpers builder first
  -->
  <!--
  <filter>
    <filter-name>Jumpers Filter</filter-name>
    <filter-class>org.mmbase.servlet.JumpersFilter</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>Jumpers Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  -->
  <filter-mapping>
    <filter-name>FrameworkFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <listener>
    <!--
         Used by file servlet to detect which file can be deleted again
         Sometimes files ar ecreate for a certain user only.
    -->
    <listener-class>org.mmbase.servlet.FileServletSessionListener</listener-class>
  </listener>

  <listener>
    <listener-class>org.mmbase.bridge.mock.MockSetup</listener-class>
  </listener>


  <!-- The base MMBase servlet informs about the current MMBase version -->
  <servlet>
    <servlet-name>version</servlet-name>
    <servlet-class>org.mmbase.servlet.MMBaseServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!-- The MMBase image serving servlet. -->
  <servlet>
    <servlet-name>images</servlet-name>
    <servlet-class>org.mmbase.servlet.ImageServlet</servlet-class>
    <init-param>
      <!-- Expire time of original images. Cached images never expire. -->
      <param-name>expire</param-name>
      <!-- 10 minutes (default is one hour)-->
      <param-value>600</param-value>
    </init-param>
    <init-param>
      <!-- Whether to accepts image conversion on the URL -->
      <param-name>convert</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <!-- Field of image node to use for 'last modified' -->
      <param-name>lastmodifiedfield</param-name>
      <param-value></param-value>
    </init-param>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <!-- The MMBase attachment serving servlet. -->
  <servlet>
    <servlet-name>attachments</servlet-name>
    <servlet-class>org.mmbase.servlet.AttachmentServlet</servlet-class>
    <init-param>
      <!-- Expire time of original images. Cached images never expire. -->
      <param-name>expire</param-name>
      <!-- 10 minutes (default is one hour)-->
      <param-value>600</param-value>
    </init-param>
    <init-param>
      <!-- Field of attachment node to use for 'last modified' -->
      <param-name>lastmodifiedfield</param-name>
      <param-value></param-value>
    </init-param>
    <load-on-startup>3</load-on-startup>
  </servlet>

  <servlet>
    <servlet-name>files</servlet-name>
    <servlet-class>org.mmbase.servlet.FileServlet</servlet-class>
    <init-param>
      <param-name>listings</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>comparator</param-name>
      <param-value>org.mmbase.servlet.FileNameComparator</param-value>
    </init-param>
    <load-on-startup>4</load-on-startup>
  </servlet>


  <!--
  <servlet>
    <servlet-name>servscan</servlet-name>
    <display-name>Servscan Servlet</display-name>
    <description>Needed for parsing scan pages</description>
    <servlet-class>org.mmbase.servlet.servscan</servlet-class>
    <load-on-startup>6</load-on-startup>
  </servlet>
  -->

  <!-- mapping for version-request -->
  <servlet-mapping>
    <servlet-name>version</servlet-name>
    <url-pattern>/version</url-pattern>
  </servlet-mapping>

  <!-- mapping for image-requests -->
  <servlet-mapping>
    <servlet-name>images</servlet-name>
    <url-pattern>/mmbase/images/*</url-pattern>
  </servlet-mapping>

  <!-- mapping for attachment-requests -->
  <servlet-mapping>
    <servlet-name>attachments</servlet-name>
    <url-pattern>/mmbase/attachments/*</url-pattern>
  </servlet-mapping>


  <servlet-mapping>
    <servlet-name>files</servlet-name>
    <url-pattern>/files/*</url-pattern>
  </servlet-mapping>



  <!--
  <servlet-mapping>
    <servlet-name>servscan</servlet-name>
    <url-pattern>*.shtml</url-pattern>
  </servlet-mapping>
  -->


  <welcome-file-list>
    <welcome-file>index.jspx</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.shtml</welcome-file>
  </welcome-file-list>

  <error-page>
    <error-code>400</error-code>
    <location>/mmbase/errorpages/400.jsp</location>
  </error-page>
  <error-page>
    <error-code>403</error-code>
    <location>/mmbase/errorpages/403.jsp</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/mmbase/errorpages/404.jsp</location>
  </error-page>
  <error-page>
    <exception-type>java.lang.Exception</exception-type>
    <location>/mmbase/errorpages/500.jsp</location>
  </error-page>
  <error-page>
    <error-code>503</error-code>
    <location>/mmbase/errorpages/503.jsp</location>
  </error-page>

  <env-entry>
    <env-entry-name>mmbase/rmmci/bindname</env-entry-name>
    <env-entry-type>java.lang.String</env-entry-type>
    <env-entry-value>exampleremotecontext</env-entry-value>
  </env-entry>

  <resource-ref>
    <description>
      Datasource for the MMBase Database. This datasource must be
      configured in the application server.
      This entry is not needed in tomcat, but jetty needs it.
    </description>
    <res-ref-name>jdbc/MMBase</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>

  <!--  email app is installed, so mail could be sent -->
  <resource-ref>
    <description>
      Mail resource for MMBase.
      Don't forget the configure it with your app-server.
    </description>
    <res-ref-name>mail/Session</res-ref-name>
    <res-type>javax.mail.Session</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>

</web-app>
