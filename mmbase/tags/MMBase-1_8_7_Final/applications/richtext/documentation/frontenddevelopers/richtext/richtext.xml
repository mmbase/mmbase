<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<article class="specification">
  <articleinfo>
    <title>The Richtext Functional Reference</title>
    <date>2005-12-09</date>
    <edition>$Id$</edition>
    <authorgroup>
      <author>
        <firstname>Henk</firstname>
        <surname>Hangyi</surname>
      </author>
      <author>
        <firstname>Michiel</firstname>
        <surname>Meeuwissen</surname>
      </author>
    </authorgroup>

    <revhistory>
      <revision>
        <revnumber>[0.1]</revnumber>
        <date>[2005-12-09 ]</date>
        <authorinitials>[HH]</authorinitials>
        <revremark>[Created]</revremark>
      </revision>
    </revhistory>

    <abstract>
      <para>This functional reference contains a description of the richtext
      xml format, the richtext editor based on kupu and the use of richtext in
      your (xslt) templates.</para>
    </abstract>

    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified
      is a certification mark of the Open Source Initiative.</para>

      <para>The license (Mozilla version 1.0) can be read at the MMBase site.
      See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>

    <productnumber>Richtext XML field from MMBase 1.7 Editor and example
    web-application from MMBase version 1.8.</productnumber>
  </articleinfo>

  <section id="introduction">
    <title>Introduction</title>

    <para>
      Richtext is text which has a `richer' structure then just plain text. It contains a way to add
      emphasis (like the HTML 'em' and 'strong' tags), sub- and superscripts, a way to add
      tables and enumerations, and a structure of nested `sections' can be added.
    </para>
    <para>
      Besides these basic enrichements it can contains anchors to which can be linked other
      objects. Like this, for instance a text can contain images (by MMBase `images' objects), link
      to external web pages (by MMBase `urls' objects), and actually to any arbitrary MMBase
      objects (so `internal' crosslinks to other parts of the same web-application can easily be
      realised.
    </para>
    <para>
      All this structure is in the text is saved in MMBase as XML. The actual text is text XML and
      all references to other objects are real MMBase relations. So when the referred object is
      deleted, the link in the richtext is also automatically removed. Another advantage is that
      with XSLT (xml-style sheets) the conversion to HTML is straightforward (and some say easier
      than JSP).
    </para>

    <screenshot>
      <screeninfo>The richtext editor</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="media/richtext_edit.gif" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>
      Richtext should not be confused with the html-area, used in the
      editwizard. The text of html-area in the editwizard is saved in MMBase as
      HTML. Links in the HTML are urls. This means that when the referred object
      is deleted, the link will not automatically be removed. Another
      disadvantage is that the HTML can contain undesirable code, like Microsoft
      Word styles that are copied into the html-area.
    </para>

    <para>
      Throughout this document the MyRichText application is used as the
      example application for the richtext editor. So to experiment with the
      examples in this document both the richtext editor has to be installed in
      your webapp and the MyRichText application has to be deployed. All the
      path in this document assume that the webapp which you are using has the
      name richtext.
    </para>
    
    <note>
      <para>
        Richtext depends on the latest XML parsers. So please read the
        XERCES.README.txt, which is in the root of your MMBase distribution and
        in the folder documentation\releases in CVS. Anyway, if you use Tomcat
        5.5 in combination JDK 1.5 the richtext will work.
      </para>
    </note>

    <note>
      <para>The richtext editor is new in MMBase 1.8. It might be necessary to
      change some of its features, because people who will use the editor ask
      for other or extended functionality. Issues in the present version of
      the richtext editor which are know to be a candidate for improvement
      are:</para>

      <orderedlist>
        <listitem>
          <para>
            the layout of the richtext editor (a real designer will have
            to have a look at the richtext editor to increase its
            usability)
          </para>
        </listitem>

        <listitem>
          <para>the richtext editor assumes that there is at most one richtext
          field in an object</para>
        </listitem>

      </orderedlist>
    </note>
  </section>

  <section id="architecture">
    <title>First encounter with the richtext editor</title>

    <para>The database definition of the richtext field with the name body in
    the texts.xml builder looks like:</para>

    <programlisting>&lt;datatype base="mmxf" xmlns="http://www.mmbase.org/xmlns/datatypes" /&gt;
&lt;db&gt;
   &lt;name&gt;body&lt;/name&gt;
   &lt;type key="false" notnull="false" size="64000" state="persistent"&gt;XML&lt;/type&gt;
&lt;/db&gt;</programlisting>

    <para>The richtext editor is based on <ulink
    url="http://kupu.oscom.org">kupu</ulink>. MMBase use kupu to show the
    richtext field in your builder, with all the richtext functionality. The
    present implementation of the richtext editor assumes that there is at
    most one richtext field in an MMBase node. After saving the object in the
    richtext editor, the HTML produced by kupu is translated into XML by
    MMBase.</para>

    <para>The text in the richtext editor shown in the previous section is
    saved as the following XML.</para>

    <programlisting>&lt;mmxf xmlns="http://www.mmbase.org/xmlns/mmxf" version="1.1"&gt;
&lt;p&gt;
   &lt;a id="_1134140609"/&gt;
   Richtext is text which contains (links to) other objects.
&lt;/p&gt;
&lt;p&gt;
   Richtext should not be confused with the html-area, used in the editwizard.
&lt;/p&gt;
&lt;p&gt;
   &lt;table class="plain"&gt;
      &lt;tr&gt;
         &lt;td&gt; &lt;/td&gt;
         &lt;td&gt;TEXT&lt;/td&gt;
         &lt;td&gt;HTML&lt;/td&gt;
         &lt;td&gt;XML &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
         &lt;td&gt;Link to another object&lt;/td&gt;
         &lt;td&gt;tags &lt;/td&gt;
         &lt;td&gt;hyperlink &lt;/td&gt;
         &lt;td&gt;real relation &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
         &lt;td&gt;Templating&lt;/td&gt;
         &lt;td&gt;JSP &lt;/td&gt;
         &lt;td&gt;JSP&lt;/td&gt;
         &lt;td&gt;XSLT &lt;/td&gt;
      &lt;/tr&gt;
   &lt;/table&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a id="_1134140611"/&gt;&lt;/p&gt;
&lt;/mmxf&gt;</programlisting>

    <para>When you look in one of the default MMBase you will see that the
    objects, linked in the text, are related to the object containing the text
    field.</para>

    <screenshot>
      <screeninfo>Objects linked in the text are related to the object
      containing the text field.</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="media/related_objects.gif" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>This XML can parsed by an XML style sheet (XSLT) to generate an HTML
    page.<screenshot>
        <screeninfo>The HTML generated from the XML.</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="media/richtext_html.gif" />
          </imageobject>
        </mediaobject>
      </screenshot></para>

    <para>
      One of the basic things that have to be done when creating HTML from
      XML to create hyperlinks from the idrels in the XML. To make this possible
      we have to tell MMBase how a link to a related object looks like. The default XSL stylesheet
      realizes this by depending on `url' functions on the MMBase objects. URL functions can easily
      be added to object by adding a 'functionlist' entry to the builder XML of the type:
    </para>

    <programlisting>&lt;functionlist&gt;
  &lt;function 
    name="url"
    key="{REQUEST.getContextPath}/{INITPARAM.npbsales.home}?article={NODE.number}&amp;amp;template=article"
    &gt;
    &lt;class&gt;org.mmbase.util.functions.PatternNodeFunctionProvider&lt;/class&gt;
  &lt;/function&gt;
&lt;/functionlist&gt;</programlisting>

    <para>Most of the parameters used in the function definition are generated
    automatically, the INITPARAM.xyz are specified in the
    /richtext/WEB-INF/web.xml. The parameters are handled by the
    org.mmbase.util.functions.PatternNodeFunctionProvider.java.</para>
  </section>

  <section id="basicconcepts">
    <title>The richtext editor</title>

    <para>
      You can use the list.jsp which is also used by the editwizards to
      open the richtext editor. The request parameters that are new as compared
      to the use of list.jsp for the editwizards are: wizardjsp, kupu_back,
      tools and link_nodetypes. The entire url is explained in the following
      table. Please have a look at the editwizard documentation to learn more
      about the request parameters of list.jsp.
    </para>

    <table> <!-- a table ?, this is no table! -->
      <title>Example of request parameters in the link to list.jsp</title>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>&lt;a href="/richtext/mmbase/edit/wizard/jsp/list.jsp?</entry>
            <entry>the list.jsp from the edit/wizard application is used</entry>
          </row>

          <row>
            <entry>&amp;wizardjsp=/richtext/mmbase/kupu/mmbase/</entry>
            <entry>the editor that is opened by the list.jsp (of course for
            using the richtext editor this should be mmbase/kupu/mmbase). This
            could as well be /richtext/mmbase/kupu/mmbase/index.jspx</entry>
          </row>

          <row>
            <entry>&amp;kupu_back=/richtext/edit/</entry>

            <entry>used for the backbutton in the richtext editor. This could
            as well be /richtext/edit/index.jspx</entry>
          </row>

          <row>
            <entry>&amp;tools=related</entry>

            <entry>
              tools can be used to dynamically include extra functionality in the richtext
              editor. When you want to add more tools you can add them in a comma seperated list. In
              this example the tool is: /mmbase/kupu/mmbase/tools/related.jspx. The tools are shown
              in the leftpanel of the richtext editor. Another available tool is 'tree', by which
              the current object is shown in a 'tree' of similar objects. The current object can
              e.g. present a certain `chapter' (or `segment' as it is called in the richtext demo
              application) of a book, and the tree then presents the table of contents of the
              complete book.
            </entry>
          </row>

          <row>
            <entry>&amp;link_nodetypes=images,urls,attachments,products,news</entry>

            <entry>
              in the link_nodetypes you can specify the type of objects
              that can be linked to in the richtext. This can be any MMBase object type. Inside the
              richtext editors 'pseudo' URLs will be used (like mmbase://products/1233). On the
              front-end the XSLT must know how to create actual links to these kind of
              objects (the default XSLT's simply presume an 'url' function).
            </entry>
          </row>

          <row>
            <entry>&amp;wizard=kupu/news</entry>

            <entry>
              This is the editwizard definition used by list.jsp. This editwizard are located in the
              directory of the calling page, /richtext/edit. The only actions in the kupu/news.xml
              that are relevant when using the richtext editor are the create and delete action.
            </entry>
          </row>

          <row>
            <entry>&amp;nodepath=categories,related,news</entry>

            <entry>the path that should be followed from the startnode</entry>
          </row>

          <row>
            <entry>&amp;searchdir=destination</entry>

            <entry>the direction in which the nodepath should be used</entry>
          </row>

          <row>
            <entry>&amp;startnodes=347</entry>

            <entry>the node for which the related objects have to be
            shown</entry>
          </row>

          <row>
            <entry>&amp;origin=347</entry>

            <entry>the node number that can be used in the create statement of
            the editwizard</entry>
          </row>

          <row>
            <entry>&amp;orderby=news.number</entry>

            <entry>the field on which the list is ordered</entry>
          </row>

          <row>
            <entry>&amp;directions=down</entry>

            <entry>the direction in which to sort the list, up or down</entry>
          </row>

          <row>
            <entry>&amp;search=yes</entry>

            <entry>whether or not a search box should be displayed on top of
            the list</entry>
          </row>

          <row>
            <entry>&amp;title=Home</entry>

            <entry>title of the list</entry>
          </row>

          <row>
            <entry>&amp;referrer=/edit/index.jspx</entry>
            <entry>not in use for the richtext editor</entry>
          </row>

          <row>
            <entry>&amp;language=en</entry>

            <entry>the language to be used in list.jsp and the richtext
            editor</entry>
          </row>

          <row>
            <entry>"&gt;NewsItems&lt;/a&gt;</entry>

            <entry>the word to click on (but if you didn't know this you
            probably need some other documentation before continuing this
            one)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>In the example application the link to list.jspx is generated by
    ROOT\edit\cat.template.as.jspx. The entire include path from the index.jspx is: index.jspx -&gt;
    content.div.jspx -&gt; cat.li.jspx -&gt; cat.template.as.jspx.</para>

    <para>The richtext editor contains a three panels:</para>

    <itemizedlist>
      <listitem>
        <para>
          the left panel: with the tool list controlled by the "tools="
          parameter and the none-richtext fields of the object
        </para>
      </listitem>

      <listitem>
        <para>the middle panel: with the richtext field of the object. The
        link icon in the header of this panel uses the object types from
        link_nodetypes. The present implementation assumes that there are
        images and blocks related to the richtext object via idrel.</para>
      </listitem>

      <listitem>
        <para>the right panel: with the rich text functionalities like
        link-editting, images, tables and blocks</para>
      </listitem>
    </itemizedlist>
    <para>
      The left and right panels can be hidden by a click on the 'full screen' button in the tool bar
      of the middle panel.
    </para>
  </section>

  <section>
    <title>Kupu and non-kupu functionality in the richtext editor</title>

    <para>
      The kupu functionality can be found in the middle and the right
      panel of the richtext editor. In the richtext editor a selection has been
      made from all the possibilities kupu offers and some extra functionality
      has been added. This section gives an overview of the functionality from
      kupu that has been integrated in the richtext editor and the extra
      functionality added.
    </para>

    <para>
    TODO
    </para>
  </section>

  <section>
    <title>Tools in the richtext editor</title>

    <para>TODO</para>
  </section>

  <section id="objects">
    <title>Some notes on the conversion from HTML produced by KUPU to XML</title>

    <para>TODO</para>
  </section>

  <section id="pages">
    <title>Using XSLT to generate HTML</title>

    <para>The chapter first shows how the MyRichNews generates HTML from the
    XML stored in the richtext field. Then an example shows how to reuse parts
    of the example to build your own HTML pages.</para>

    <section id="xslt_to_html_intro">
      <title>HTML from XML in MyRichNews</title>

      <para>Although it has nothing to do with richtext, this section starts
      with an overview of the templating mechanism used in MyRichNews. This is
      introduction is only there to show you where to find the files which are
      actually showing the richtext fields. The HTML is generated by
      richtext/index.jspx, which includes the file specified by the url field
      from the template object related to the selected category. It passes the
      subcat@cat and class id to this include as request parameters. The file
      included for the Home category is texts.div.jspx.</para>

      <programlisting>&lt;mm:include referids="subcat@cat,class" page="${_node.url}" escape="none" debug="html" /&gt;</programlisting>

      <para>The include texts.div.jspx generates a list of links for the texts
      related to the category. The template parameter in these links is set to
      "article". Bij clicking on these links the following piece of code in
      index.jspx is used to show the include article.div.jspx.</para>

      <programlisting>&lt;mm:present referid="template"&gt;
  &lt;mm:include  page="search.div.jspx"&gt;&lt;mm:param name="class" value="left" /&gt;&lt;/mm:include&gt;
  &lt;mm:include  referids="subcat@cat" page="${template}.div.jspx" escape="none" debug="html" /&gt;
&lt;/mm:present&gt;</programlisting>

      <para>The include article.div.jspx uses /util/body.jspx to show the
      richtext field.The body.jspx looks like:</para>

      <programlisting>&lt;mm:formatter 
  xmlns:mm="http://www.mmbase.org/mmbase-taglib-2.0" 
  xslt="xslt/2xhtml.xslt" escape="none"&gt;
   &lt;mm:listrelationscontainer role="idrel" searchdir="destination"&gt;
     &lt;mm:listrelations&gt;
       &lt;mm:relatednode&gt;
         &lt;mm:listrelations role="idrel" searchdir="destination"&gt;
           &lt;mm:relatednode /&gt;
         &lt;/mm:listrelations&gt;
       &lt;/mm:relatednode&gt;
     &lt;/mm:listrelations&gt;
   &lt;/mm:listrelationscontainer&gt;
   &lt;mm:field name="body" /&gt;
&lt;/mm:formatter&gt;</programlisting>

      <para>
        The formatter tag is used to add layout to the objects listed
        inside the formatter tag. The xslt used is xslt/2xhtml.xslt. This file
        can be found in the /richtext/xslt directory. The file
        /richtext/xslt/2xhtml.xslt extends the file mm:xslt/2xhtml.xslt by using
        the &lt;xsl:import /&gt; tag. The file mm:xslt/2xhtml.xslt is part of
        the mmbase-richtext.jar in your distribution. If you have a archiving
        tool which can uncompress jar-files you will find the file in the
        /config/xslt directory of this jar. In the MMBase CVS the file is
        located in applications/richtext/config/xslt.
      </para>

      <para>
        The mm:xslt/2xhtml.xslt contains extends from mmxf2xhtml.xslt, which deals with the
        richtext, without cross-links (so only with mmxf:* tags). In
        the mm:xslt/2xhtml.xslt the link to objects related to the richtext
        object is generated by using the node function with the name 'url':
        node:function($cloud, string(@id ), 'url', $request).
      </para>

      <para>The HTML generated from the XML in section 2 is:</para>

      <programlisting>&lt;div class="block article"&gt;
   &lt;h1&gt;Richtext !!!&lt;/h1&gt;
   &lt;div class="intro"&gt;
      &lt;p&gt;&lt;/p&gt;
   &lt;/div&gt;
   &lt;div class="objects"&gt;
      &lt;div class="mmxf"&gt;
         &lt;p&gt;
            &lt;a onclick="window.open('/richtext/mmbase/images/1193', 'MMBeest', 'width=404,height=720');"
               href="javascript: void(0);"
               title="MMBeest"
               id="_1134211110"&gt;
               &lt;img src="/richtext/mmbase/images/1183"
                    alt="MMBeest"
                    class="image-right"
                    height="100" width="54"/&gt;
            &lt;/a&gt;
            Richtext is text which contains (links to) other objects.
         &lt;/p&gt;
         &lt;p&gt;Richtext should not be confused with the html-area, used in the editwizard.&lt;/p&gt;
         &lt;table class="plain"&gt;
            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;TEXT&lt;/td&gt;&lt;td&gt;HTML&lt;/td&gt;&lt;td&gt;XML&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Link to another object&lt;/td&gt;&lt;td&gt;tags&lt;/td&gt;&lt;td&gt;hyperlink&lt;/td&gt;&lt;td&gt;real relation&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Templating&lt;/td&gt;&lt;td&gt;JSP&lt;/td&gt;&lt;td&gt;JSP&lt;/td&gt;&lt;td&gt;XSLT&lt;/td&gt;&lt;/tr&gt;
         &lt;/table&gt;
         &lt;p&gt;
            &lt;div id="" class="float note left"&gt;
               &lt;div class="mmxf"&gt;&lt;p&gt;You should use Tomcat 5.5 and JDK 1.5&lt;/p&gt;&lt;/div&gt;
            &lt;/div&gt;
         &lt;/p&gt;
      &lt;/div&gt;
   &lt;/div&gt;
   &lt;div class="outtro"&gt;
      &lt;p&gt;&lt;a href=".?cat=347" class="navigate"&gt;&amp;lt; back&lt;/a&gt;&lt;/p&gt;
   &lt;/div&gt;
&lt;/div&gt;</programlisting>
    </section>

    <section>
      <title>Creating your own HTML from richtext fields</title>

      <para>
        This section shows how you can generate your own HTML pages from
        richtext fields.
      </para>

      <para>
        Basicly the idea is that the default XSLTs generate good quality HTML, and that there should
        not be much need to do it all over again. Style changes can simply be added to your CSS. The
        default XSLT also accepts a few parameters.
      </para>
      <para>
        These parameters currently are thumbwidth (default '100'), thumbheight (default empty),
        thumbsize (default 's(&lt;thumbwidth&gt;&lt;thumbheight&gt;)'), thumbwidth-big (default
        '100'), thumbheight-big (default empty), thumbsize-big (default
        's(&lt;thumbwidth-big&gt;&lt;thumbheight-big&gt;)'), and popupwidth (default empty, which
        means to popup the original image, '-1' means no popup), popupheight (default empty) and
        popupsize (default 's(&lt;popwithwidth&gt;&lt;popupheight&gt;)'). All these parameters are
        about how to present images.
      </para>
      <para>
        There is also a parameter 'newstype'. It is possible to format entire nodes with the XSL (so
        not only the 'rich' fields. The default XSL provides an example for news nodes, and this
        parameter represents the actual node-manager name used in MMBase ('xmlnews' is used in the
        rich text example, but simply 'news' or 'articles' or so is imaginable).
      </para>
      <para>
        Still, it can be desirable to have your own customized XSL's. A good starting point is to
        extends "2xhtml.xslt", and only override behaviour which must be different. E.g. often
        people want 'external' links to pop up in a new browser windows. That would work with an XSL
        like this:        
      </para>
    </section>
  </section>

  <!---->

  <section id="references">
    <title>References</title>

    <para>The following documents can be used for further reading.</para>

    <itemizedlist>
      <listitem>
        <para><ulink url="[refernce link]">[Reference name]</ulink></para>
      </listitem>
    </itemizedlist>
  </section>
</article>