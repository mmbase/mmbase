<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.mmbase</groupId>
    <artifactId>mmbase-application-parent</artifactId>
    <version>2.0-SNAPSHOT</version>
  </parent>

  <artifactId>mmbase-commandserver</artifactId>
  <name>MMBase Command Server</name>
  <packaging>jar</packaging>
  <version>${mmbase.version}</version>

  <description>
    Very small java application that allows you to execute command-line applications from a seperate
    java process. This is because the System.execute call needs to fork() on unix OS-es, which means
    the executed command allocates just as much memory as the entire java JVM has allocated.

    Try java -jar mmbase-commandserver.jar -?

    This is mainly targeted at executing image-magick, but it could execute all kind of external commands.
  </description>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <mainClass>org.mmbase.util.CommandServer</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <repositories>
    <repository>
      <id>mmbase</id>
      <name>MMBase Maven2 repository</name>
      <url>http://www.mmbase.org/maven2</url>
    </repository>
    <repository>
      <id>mmbase-snapshots</id>
      <name>MMBase Maven2 snapshots repository</name>
      <url>http://www.mmbase.org/snapshots</url>
    </repository>
  </repositories>


</project>
