<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article id="administrators_configuration">
  <articleinfo>
    <title>MMBase Configuration documentation</title>

    <date>2006-06-24</date>

    <edition>$Id$</edition>

    <authorgroup>
      <author>
        <firstname>Michiel</firstname>
        <surname>Meeuwissen</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified
      is a certification mark of the Open Source Initiative.</para>

      <para>The license (Mozilla version 1.0) can be read at the MMBase site.
      See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>
  </articleinfo>

  <section id="introduction">
    <title>Introduction</title>

    <para>
      MMBase is configured using many configuration files, most of them are XMLs.
    </para>
    <para>
      A specific configuration file is always referenced to, e.g. in this document, relative to the
      'MMBase configuration root'.
    </para>
    <para>
      A resource inside this MMBase configuration root actually resolves quite complicated, and it
      is not always trivial to know where an actual piece of configuration is coming from. To help
      you with this, in the mmbase admin pages you can find the 'resource editor'.
    </para>
    <para>
      Resolving of an configuration resource works like this. It tries the following strategies
      until one succeeds.
      <itemizedlist>
        <listitem>
          <para>
            If the builder 'resources' is available, it will look up a matching node of that type.
					</para>
				</listitem>
				<listitem>
					<para>
            It will check the application context resource mmbase-config/&lt;name of the
            resource&gt;. If that exists, the value of it will be interpreted as a file-name. That
            file will be opened.
					</para>
				</listitem>
        <listitem>
          <para>
            It will check for the resource in the 'mmbase configuration directory' This directory
            defaults to WEB-INF/config.  This directory can be changed using the 'servlet context'
            init parameter 'mmbase.config' or using the system property 'mmbase.config'.
          </para>
          <para>
            WEB-INF/config needs not be a real directory, it can also be part of a war.
          </para>
        </listitem>
        <listitem>
          <para>
            The resource will be loaded using a java class loader. The used class name is
            'org.mmbase.config.&lt;name of the resource&gt;
          </para>
          <para>
            This means that the resource can be present anywhere in the present java 'CLASS PATH'.
            It could be below WEB-INF/classes, or in any jar in WEB-INF/lib. If  WEB-INF/classes
            exists, MMBase will prefer to open the resources as files, rather then letting the
            class-loader do it.
          </para>
        </listitem>
      </itemizedlist>
      If locations can be specified, normally they will be resolved relatively to the current
      resource, but also absolute locations (file:///...) would work.
    </para>
  </section>

  <section id="webxml">
    <title>Web.xml configuration</title>

    <para>The base of a web application configuration is always the so-called
    'web.xml'. In a web.xml the following MMBase specific things could be
    found.</para>

    <section id="contextparameters">
      <title>Context parameters</title>

      <para>The parameter 'mmbase.htmlrooturlpath' indicates the context root.
      It must be specified if MMBase does not succeed to determine it
      automatically, otherwise some URLs to some servlets will be generated
      incorrectly. Hopefully this option will be deprecated when the servlet
      2.3 api is supported well (and fully) by all important application
      servers. For Tomcat 4.1 it is not necessary, for Orion 1.6 it is.</para>

      <para>The parameter 'mmbase.config' indicates the MMBase configuration
      directory. If this parameter is missing, the configuration is supposed
      to be in WEB-INF/config (so next to web.xml itself).</para>
    </section>

    <section id="servlets">
      <title>Servlets</title>

      <para>For MMBase to start up, at least one 'MMBaseServlet' must be
      turned on in your web.xml. The following of those servlets are
      available. <variablelist>
          <varlistentry>
            <term><classname>org.mmbase.servlet.MMBaseServlet</classname></term>

            <listitem>
              <para>MMBaseServlet itself is the most basic MMBaseServlet,
              which can be used to serve the MMBase version number. It has no
              properties to be set. You don't need a servlet-mapping to it (if
              you only want to use it to start up mmbase), though "/version"
              would be nice (and specified as such in the MMBase
              distro).</para>

              <para>If mapped to an URL, then it also recognizes a few
              parameters like 'uptime', 'starttime' and 'server', which, when
              supplied, make the servlet return, besides the mmbase version,
              also some system information.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><classname>org.mmbase.servlet.ImageServlet</classname></term>

            <listitem>
              <para>This servlet serves MMBase nodes as images (so also
              icaches). Those nodes must contain an 'handle' field. It has an
              'expire' property, which can be set to specify the 'Expires'
              header (for the node-type 'icaches' this is ignored) in seconds
              after now. A servlet-mapping could be e.g. /images/* or
              /img.db.</para>

              <para>The image servlet also recognizes a 'convert' property,
              which may be `true', in which case it will also accept image
              conversion templates in the URL. This can be switched to true
              for backwards compatibility with `servdb' for which this was the
              way to specify a icache node.</para>

              <para>If you switch this to true, you may also want to switch on
              a 'mmbase.taglib.image.urlconvert' context parameter, which will
              make the image-tag produce these kind of URL's. In 1.8 this does
              not make much sense, because image-transformation would be
              postponed to image serving any way. But it is possible any way
              (from 1.7.4 onwards).</para>

              <para>It is also possible to have the images served by another
              web-application (which you might want for certain load-balancing
              reasons). In that case you don't specify the servlet, but only a
              context parameter 'mmbase.servlet.images.url', containing the
              absolute URL to the image-servlet on the other web-app (so this
              other MMBase must run on the same database!).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><classname>org.mmbase.servlet.AttachmentServlet</classname></term>

            <listitem>
              <para>This servlet looks a lot like ImageServlet, but it is
              focused on 'attachments' nodes, which besides a 'handle' also
              store a 'mimetype' field and a 'filename' field. It has the
              'expire' property just like ImageServlet. Map it e.g. to
              /attachments/* or /attachment.db.</para>

              <para>The attachments can, similar to images, also be served
              from a different server. Using the context paramter
              'mmbase.servlet.attachments.url'</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><classname>org.mmbase.servlet.servdb</classname></term>

            <listitem>
              <para>This servlet is the original one of MMBase 1.5 and before.
              It can do several things and is normally mapped to e.g. /img.db
              and /attachment.db. By the mapping it decides what to do.</para>

              <para>When it is used as an 'imageservlet' it also can accept
              the 'transformation' template to generate a 'icache' node from a
              original image node on the URL. This can be handy, but also
              opens a vulnerability to your site.</para>

              <para>Since servdb is not based on the MMBase bridge, the
              content which it serves is not protected by the security system.
              It will serve any image, attachment etc. disregarding the
              possible read-restrictions on them.</para>

              <para>The implementation of this servlet is nowadays only
              available in mmbase-scan.jar, and it's use is deprecated.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><classname>org.mmbase.servlet.servscan</classname></term>

            <listitem>
              <para>If you also have turned on the right MMBase 'modules',
              this servlet will provide the 'SCAN' template language. For new
              users it is advised not to use SCAN, but to use e.g. JSP (the
              JSP servlet and servlet-mapping are normally shipped with and
              installed in your application server). The SCAN servlet servscan
              has to be mapped to '*.shtml'.</para>

              <para>The implementation of this servlet (and of the SCAN
              language) is nowadays only available in mmbase-scan.jar, and
              it's use is deprecated.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section id="taglibs">
      <title>Taglibs</title>

      <para>If you want to use taglibs in your (jsp) pages - which you
      probably want - then you may have to indicate that as well in web.xml.
      Taglibs that you might want to use are the MMBase taglib, the MMBase
      community taglib, the oscache taglib and the jakarta taglibs. In most
      newer application servers it is enough to have the mmbase-taglib-2.jar
      (or other jars) in your WEB-INF/lib directory to have the MMBase taglib
      (or other taglibs) to your disposal. <!-- TODO links --></para>
    </section>

    <section id="resources">
      <title>Aplication Resources</title>

      <para>Since MMBase 1.6 certain things can (optionally) also be
      configured by the use of references to resources provided by the
      application server. A resource a an instance of a certain type which is
      created and configured and can be referred to by a 'resource
      name'.</para>

      <para>
        Since MMBase 1.8, and even more so in MMBase 1.9, many more things can be configured
        in the application context.
        <itemizedlist>
        <listitem>
          <para>
            As mentioned, the location of any configuration file can be overriden with  a application context resource.
					</para>
				</listitem>
        <listitem>
          <para>
            A database connection pool can be configured. As an alternative to jdbc.xml
					</para>
				</listitem>
        <listitem>
          <para>
            Mailing can be configured.
					</para>
				</listitem>
        <listitem>
          <para>
            Any mmbase module property can be overridden in the application context.
					</para>
        </listitem>
        <listitem>
          <para>
            Any mmbase builder property can be overridden in the application context.
					</para>
        </listitem>
        <listitem>
          <para>
            Properties related to image conversion can also be overriden in the application context,
            using mmbase/imaging/ properties. This could e.g. be used to specify the location of
            image magick if it is not in the path. This could also be done by mmbase-builder/images/
            properties, but it is a bit more generic.
          </para>
        </listitem>
        </itemizedlist>
        We give an example of a context xml as may be used in tomcat.
          <programlisting id="context.xml"><![CDATA[
<Context
    docBase="/home/tomcat/apps/michiel"
    debug="0" reloadable="false" allowLinking="true">

  <!-- demonstrates a bunch of module properties to be overrriden -->
  <Environment name="mmbase/mmbaseroot/datadir"      value="/home/tomcat/data" type="java.lang.String" />

  <Environment name="mmbase/mmbaseroot/language"           value="nl"             type="java.lang.String" />
  <Environment name="mmbase/mmbaseroot/database"           value="mysql"          type="java.lang.String" />
  <Environment name="mmbase/mmbaseroot/basename"           value="fo"             type="java.lang.String" />
  <Environment name="mmbase/mmbaseroot/datasource-context" value="java:comp/env"  type="java.lang.String" />
  <Environment name="mmbase/mmbaseroot/datasource"         value="jdbc/MMBase"    type="java.lang.String" />

  <!-- mail by mmbase module properties: -->
  <Environment name="mmbase/sendmail/mailhost" value="smtp.gmail.com" type="java.lang.String" />
  <Environment name="mmbase/sendmail/user" value="psyvutest" type="java.lang.String" />
  <Environment name="mmbase/sendmail/password" value="password" type="java.lang.String" />
  <Environment name="mmbase/sendmail/mailport" value="465" type="java.lang.String" />
  <Environment name="mmbase/sendmail/mail.smtp.socketFactory.class" value="javax.net.ssl.SSLSocketFactory" type="java.lang.String" />
  <Environment name="mmbase/sendmail/mail.smtp.socketFactory.fallBack" value="true" type="java.lang.String" />


  <!-- mail by application resource -->
  <!--
  <Resource name="mail/Session" auth="Container" type="javax.mail.Session" mail.smtp.host="smtp.xs4all.nl" />
  -->


  <!-- configures the database -->
  <Resource name="jdbc/MMBase"
            auth="Container" type="javax.sql.DataSource"
            maxActive="10" maxIdle="3" maxWait="10000"
            username="fobieen_test"
            password="password"
            driverClassName="com.mysql.jdbc.Driver"
            url="jdbc:mysql://localhost:3306/fobieen_test?autoReconnect=true"/>

  <!-- Set a certain builder property: -->
  <Environment name="mmbase-builders/mmbasecontexts/contextproviders" value="maps"  type="java.lang.String" />



  <!-- place a  few other configuration files outside the war -->
  <Environment name="mmbase-config/log/log4j.xml"
               value="file://${catalina.base}/conf/log/fobieen_test.xml" type="java.lang.String" />

  <Environment name="mmbase-config/utils/multicast.xml"
              value="file://${catalina.base}/conf/multicast/fobieen.xml"    type="java.lang.String" />



</Context>

]]>
          </programlisting>
      </para>
    </section>

    <section id="webxmlexample">
      <title>Example</title>

      <para>Here is an example web.xml. Some things are clarified more by use
      of XML comments in it. <example id="examplewebxml">
          <title>An example web.xml</title>

          <programlisting id="web.xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;
&lt;web-app&gt;

    &lt;!-- comment out if necessary (only in older app-servers)
    &lt;context-param&gt;
        &lt;param-name&gt;mmbase.htmlrooturlpath&lt;/param-name&gt;
        &lt;param-value&gt;/mm/&lt;/param-value&gt;
    &lt;/context-param&gt;
    --&gt;
  &lt;!--
    If you want to serve images from a different server, then you can specify the complete URL to
    the images-servlet in this property.
    The same goes for other 'servlet associations' like 'attachments' and 'downloads'.
    --&gt;
  &lt;!--
  &lt;context-param&gt;
    &lt;param-name&gt;mmbase.servlet.images.url&lt;/param-name&gt;
    &lt;param-value&gt;http://www.myclub.com/mmbase18images/mmbase/images/&lt;/param-value&gt;
  &lt;/context-param&gt;
  --&gt;


    &lt;servlet&gt;
        &lt;servlet-name&gt;version&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.mmbase.servlet.MMBaseServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;images&lt;/servlet-name&gt;
        &lt;display-name&gt;images&lt;/display-name&gt;
        &lt;servlet-class&gt;org.mmbase.servlet.ImageServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;expire&lt;/param-name&gt;&lt;!-- Expire time of original images. Cached images never expire --&gt;
            &lt;param-value&gt;600&lt;/param-value&gt;&lt;!-- 10 minutes --&gt;
         &lt;/init-param&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;convert&lt;/param-name&gt;&lt;!- Whether to accept convertion templates --&gt;
            &lt;param-value&gt;false&lt;/param-value&gt;&lt;!-- no --&gt;
         &lt;/init-param&gt;
        &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;attachments&lt;/servlet-name&gt;
        &lt;display-name&gt;attachments&lt;/display-name&gt;
        &lt;servlet-class&gt;org.mmbase.servlet.AttachmentServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;expire&lt;/param-name&gt;&lt;!-- Expire time of attachment --&gt;
            &lt;param-value&gt;600&lt;/param-value&gt;&lt;!-- 10 minutes --&gt;
        &lt;/init-param&gt;
        &lt;load-on-startup&gt;3&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;version&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/version&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;images&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/images/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;attachments&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/attachments/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;!-- The MMBase taglib
  In Tomcat 5, this section can be left away (it will detect the jar by itself)
  --&gt;
    &lt;taglib&gt;
        &lt;taglib-uri&gt;http://www.mmbase.org/mmbase-taglib-1.0&lt;/taglib-uri&gt;
        &lt;taglib-location&gt;/WEB-INF/lib/mmbase-taglib.jar&lt;/taglib-location&gt;

        &lt;!-- specifying a jar should work according to specs, but does not (yet) in all app-servers
                 if loading the taglib fails, use a separate taglib description file --&gt;
        &lt;!-- &lt;taglib-location&gt;/WEB-INF/mmbase-taglib.tld&lt;/taglib-location&gt; --&gt;
    &lt;/taglib&gt;

    &lt;!-- MMBase community taglib
  In Tomcat 5, this section can be left away (it will detect the jar by itself)
  --&gt;
    &lt;taglib&gt;
        &lt;taglib-uri&gt;http://www.mmbase.org/mmcommunity-taglib-1.0&lt;/taglib-uri&gt;
        &lt;taglib-location&gt;/WEB-INF/lib/mmbase-community.jar&lt;/taglib-location&gt;

        &lt;!-- or use a separate taglib description file  --&gt;
        &lt;!-- &lt;taglib-location&gt;/WEB-INF/mmcommunity-taglib.tld&lt;/taglib-location&gt; --&gt;
    &lt;/taglib&gt;

&lt;/web-app&gt;

                    </programlisting>
        </example></para>
    </section>
  </section>

  <section id="nowebxml">
    <title>Running MMBase without a web.xml</title>

    <para>Sometimes it is useful to run (parts of) MMBase outside a servlet
    environment, for example when you are a developer and want to test only a
    certain part without the overhead of starting up a whole application
    server. Another example is when you make a data-importer.</para>

    <para>In such cases the JVM option (-D) mmbase.config might come in handy,
    because most parts of MMBase somehow do need a configuration. It might be
    for example only to configure the logging system.</para>

    <para>In older MMBase versions it was required to use this JVM option even
    when you did run it as a (set of) servlet(s), but this is not any longer
    the case (since MMBase 1.4), and use of '-Dmmbase.config' other then in
    debugging or other 'stand-alone' situations is discouraged.</para>

    <para>In these older versions of MMBase also the 'mmbase.htmlroot' command
    line option was needed. It still is supported (though not by JSP), but I
    can't think of any situation in which it would be needed (besides when
    using a very old MMBase or perhaps a very old application server), and I
    think this option can now be considered fully deprecated. --&gt; perhaps
    in junit tests?</para>

    <para>To complete this description of how to run MMBase outside a servlet
    environment <example id="start_mmbase">
        <title>Example java code to start MMBase</title>

        <programlisting id="examplenowebxml">
    try {
         //MMBaseContext.init("HERE YOUR CONFIG_DIR",true); // no need for -Dmmbase.config then.
         MMBaseContext.init();
         MMBase mmb = (MMBase) MMBase.getMMBase();

         // now you have the "MMBase" object
         // All data can be accessed now.

         // with the core:
         MMObjectBuilder images = mmb.getBuilder("episode");
         MMObjectNode node=images.getNewNode("admin");
         node.setValue("title",(Object) "TEST");
         node.insert("admin");

         // or nicer, with the bridge:
         Cloud cloud = LocalContext.getCloudContext().getCloud("mmbase"));
         NodeManager images = cloud.getNodeManager("episode");
         Node node = images.createNode();
         node.setField("title", "TEST");
         node.commit();

     } catch (Exception e) {
         System.out.println("Something went wrong" + e.toString());
     }
     </programlisting>
      </example> You have to make sure that mmbase.jar and your servlet.jar
    are in the classpath. The above code shows you how to access the MMBase
    Data.</para>
  </section>

  <section id="builders">
    <title>Builders</title>

    <para>'Builder' is another word for 'object-type'. The builder-definitions
    of your MMBase can be found in config/builders and subdirectories.</para>

    <section id="builder_dtd">
      <title>builder.dtd , builders as urls,people,images ...</title>

      <variablelist>
        <varlistentry>
          <term>&lt;builder maintainer="mmbase.org" version="0"&gt;</term>

          <listitem>
            <para>This file contains all the settings for one builder</para>

            <variablelist>
              <varlistentry>
                <term>maintainer</term>

                <listitem>
                  <para>maintainer of the builder defined as a domain</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>version</term>

                <listitem>
                  <simpara>version of the builder</simpara>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>&lt;status&gt;active&lt;/status&gt;</term>

          <listitem>
            <simpara>state of the builder either active or inactive</simpara>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section id="databases">
    <title>Databases</title>

    <para>In the databases subdirectory of the configuration you find the
    XML's describing supported databases. These files are only used by the old
    (pre-1.7) database layer of MMBase. If you intend to use the new Storage
    layer (recommended), you can remove this directory. For configuration of
    the new Storage Layer, see the <olink
    targetdoc="backenddevelopers-storage-index">storage documentation</olink>.</para>

    <para>Even when you use the old database layer, in an actual installation
    all but one of these files can be removed. It must correspond to the
    'database' property in config/modules/mmbaseroot.xml, if this property is
    present. You can also remove the database property from mmbaseroot.xml (I
    would advice this, because then all database configuration is in
    jdbc.xml), then the 'lookup.xml' file will be used to determine the right
    database configuration XML (so perhaps it is better to leave them) using
    the available driver.</para>

    <para>It is important to make the right driver available, anyhow. This is
    usually done by putting the right jar in WEB-INF/lib. <variablelist>
        <varlistentry>
          <term><classname>com.mysql.jdbc.Driver</classname> from
          mysql-connector-java-2.0.14-bin.jar</term>

          <listitem>
            <para>The mysql driver can be downloaded from <ulink
            url="http://www.mysql.com/downloads/api-jdbc.html">The mysql
            website</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><classname>org.postgresql.Driver</classname> from
          pg73jdbc2.jar (make sure to have a version which works with your
          postgresql version / jdk)</term>

          <listitem>
            <para>The postgresql driver can be downloaded from <ulink
            url="http://jdbc.postgresql.org/download.html">The postgresql
            website</ulink></para>
          </listitem>
        </varlistentry>
      </variablelist> Support for other databases is also present in MMBase.
    The file 'config/databases/lookup.xml' should give some impression about
    which drives are known to work.</para>

    <para>The file in which is configured which driver MMBase must use is
    config/modules/jdbc.xml. Other information for this driver can also be
    included. Here you can configure the username/password for access to the
    database, the database name itself, the port number on which the database
    is listening etc. <example id="examplejdbc.xml">
        <title>An example jdbc.xml</title>

        <programlisting id="jdbc.xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE module PUBLIC "-//MMBase/ DTD module config 1.0//EN" "http://www.mmbase.org/dtd/module_1_0.dtd"&gt;
&lt;module maintainer="mmbase.org" version="0"&gt;
    &lt;status&gt;active&lt;/status&gt;
    &lt;classfile&gt;org.mmbase.module.database.JDBC&lt;/classfile&gt;
    &lt;properties&gt;
        &lt;property name="supportclass"&gt;org.mmbase.module.database.DatabaseSupportShim&lt;/property&gt;
        &lt;property name="driver"&gt;com.mysql.jdbc.Driver&lt;/property&gt;
        &lt;property name="url"&gt;jdbc:mysql://$HOST:$PORT/$DBM&lt;/property&gt;
        &lt;property name="user"&gt;mmbase&lt;/property&gt;
        &lt;property name="password"&gt;mypassword&lt;/property&gt;
        &lt;property name="database"&gt;mmbase_db&lt;/property&gt;
        &lt;property name="host"&gt;localhost&lt;/property&gt;
        &lt;property name="port"&gt;3306&lt;/property&gt;
        &lt;property name="connections"&gt;20&lt;/property&gt; &lt;!-- size of connection pool --&gt;
        &lt;property name="queries"&gt;256&lt;/property&gt;    &lt;!-- connections are refreshed after 256 uses --&gt;
        &lt;property name="probetime"&gt;300&lt;/property&gt;  &lt;!-- running connections are checked once every 300 s --&gt;
    &lt;/properties&gt;
&lt;/module&gt;

                    </programlisting>
      </example></para>

    <para>It is also possible to use the 'data-sources' of the application
    server.  You have to set to properties on mmbaseroot.xml then:
    <example id="datasource">
      <title>Datasource properterties</title>
      <programlisting id="datasourcejdbc.xml">
        <![CDATA[<
                 <property name="datasource-context">java:comp/env</property >
                 <property name="datasource">jdbc/MMBase</property>
        ]]>
      </programlisting>
      </example> So using this the configuration of the database is totally
      left to the application server, and jdbc.xml remains unused.
    </para>
    <para>
      See  also the
      <olink targetdoc="administrators-configuration-index">
        storage documentation</olink> for details.</para>
  </section>

  <section id="logging">
    <title>Configuring logging</title>

    <para>This section describes how the logging facilities of MMBase can be
    configured. It will focus on the default configuration, which is based on
    log4j.</para>

    <para>Information about concepts of log4j can be found <ulink
    url="http://jakarta.apache.org/log4j">here. </ulink></para>

    <section id="settingup">
      <title>Setting up the logging system</title>

      <para>The logging system is set up with the file config/log/log.xml,
      which is an XML file with two entries: <variablelist>
          <varlistentry>
            <term>class</term>

            <listitem>
              <para>The class which implements the logging. The mmbase.jar
              provides now two classes which can be used for this.
              <variablelist>
                  <varlistentry>
                    <term><classname>org.mmbase.util.logging.SimpleImpl</classname></term>

                    <listitem>
                      <para>Provides a very simple implementation, which
                      'logs' on stdout or stderr. So it can not even log to a
                      file by itself.</para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term><classname>org.mmbase.util.logging.log4j.Log4jImpl</classname></term>

                    <listitem>
                      <para>This is the advised and default. This
                      implementation is based on the log4j system, and if this
                      one is chosen, the log4j.jar is required. The version of
                      log4j.jar must be 1.2.</para>
                    </listitem>
                  </varlistentry>
                </variablelist></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>configuration</term>

            <listitem>
              <para>A string to configure the logging system. For 'SimpleImpl'
              this is: stderr|stdout[,&lt;logging level&gt;]. So you can only
              decide where the logging must appear, and below which level it
              should not log (the same levels as in the log4j implementation).
              For Log4jImpl it is a file name, in which the configuration is.
              This is an XML file according to the 'DOMConfigurator' of log4j.
              The rest of this document will give a short description of how
              this file looks like.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section id="logging_levels">
      <title>Logging levels.</title>

      <para>The MMBase implementation of log4j has the following logging
      levels (from low to high). <orderedlist>
          <listitem>
            <simpara>trace</simpara>
          </listitem>

          <listitem>
            <simpara>debug</simpara>
          </listitem>

          <listitem>
            <simpara>service</simpara>
          </listitem>

          <listitem>
            <simpara>info</simpara>
          </listitem>

          <listitem>
            <simpara>warn</simpara>
          </listitem>

          <listitem>
            <simpara>error</simpara>
          </listitem>

          <listitem>
            <simpara>fatal</simpara>
          </listitem>
        </orderedlist></para>

      <para>In the log4j implementation it is per category possible to set the
      'logging level', which means that only above (and on) that level will be
      logged. In 'simple' implementation only one logging level can be set
      (and categories are ignored).</para>

      <para>In the log4j configuration file for log4j versions 1.1 and lower
      levels are called 'priorities'.</para>
    </section>

    <section id="log4j">
      <title>Configuring the log4j implementation</title>

      <section id="log4j_examples">
        <title>Examples</title>

        <para>Everything which is described here will be much quicker clear if
        you have a few examples handy. A few are checked in the MMBase CVS
        with the names 'log4j.xml' (default), 'log4j.example1.xml' (use of two
        appenders), 'log4j.example2.xml' (XMLLayOut), 'log4j.example3.xml'
        (extra appender for important things). A few were provided by the
        log4j project itself too.</para>
      </section>

      <section id="loggers_vs_categories">
        <title>Loggers/Categories</title>

        <para>A category is chain of string separated by dots, which works a
        little like name-spaces. This means that "A.B.C" is in the "A.B"
        category, and "A.B" is in the category "A".</para>

        <para>In MMBase it was chosen that most categories fall together with Java
        class / package names. So if you want to set logging level for
        everything related with the security implementation you have to set
        the category "org.mmbase.security". All MMBase classes/packages can be
        found on www.mmbase.org.</para>

        <para>In the MMBase log4j implementation one extra category is
        defined, namely 'STDERR'. Everything which is produced on stderr
        somewhere in the mmbase code will be redirected to this logging
        category with priority (level) 'info'. Normally, this will not be
        much, but it can be handy during debugging of - for example - jsp
        pages.</para>

        <para>'Categories' inherit properties from each other (if nothing is
        overridden, then 'A.B.C' is like 'A.B'), and there is one 'root'
        category, from which all categories inherit.</para>

        <para>In the log4j XML configuration file, categories are present as
        'logger' tags ('category' in older versions). The name attribute of
        the logger tag contains the category, the previously described string,
        which coincides with Java classes/packages.</para>

        <para>A special category is 'root', which describes the basic
        properties of all categories. It is described with the 'root'
        tag.</para>

        <para>The logging 'level' can be set per category/log by a sub tag of
        'logger', named 'level'. The level class was overridden by MMBase so
        the 'class' attribute must be present on every occurrence. The value
        of this can be stored in an XML entity (&amp;mmlevel;). The actual
        value is set by the 'value' attribute.</para>

        <para>The root tag must appear after the logger tags.</para>
      </section>

      <section id="appenders">
        <title>Appenders</title>

        <para>Think of an appender as a 'log file'. You can configure several
        appenders. Here is a typical appender configuration: <example
            id="appenders_example">
            <title>Appenders</title>

            <programlisting>

&lt;appender name="logfile" class="org.apache.log4j.FileAppender" &gt;
    &lt;param name="File"   value="&amp;logdir;mmbase.log" /&gt;
    &lt;param name="Append" value="true" /&gt;
    &lt;layout class="org.apache.log4j.PatternLayout"&gt;
        &lt;param name="ConversionPattern" value="%d{ABSOLUTE} %-5p - %m%n" /&gt;
    &lt;/layout&gt;
&lt;/appender&gt;

                        </programlisting>
          </example> Here is described that the appender is a file, and that
        the filename is 'mmbase.log' in the directory described by the entity
        &amp;logdir;. It appends the logging to the end if the files exist
        already. The precise format of one line is described too, and is in
        this case defined by the Java class "org.apache.log4j.PatternLayout".
        The documentation of this class, and of the 'ConversionPattern'
        parameters can be found here. The conversion pattern can have an
        influence on the over all performance, so you have to be careful with
        it.</para>

        <para>Normally the root category will specify to which appender all
        categories will log (The appender-ref tag in the root tag). A category
        can specify an additional appender. If you want to avoid that this
        category also logs to the appender of 'root' you can use the attribute
        'additivity' of the category tag.</para>

        <para>It would e.g. be interesting to log security related issues to a
        separate logfile, but not to the 'main' log file. Then a new appender
        must be defined, with name 'securityfile', and the category entry for
        'org.mmbase.security' could look like this: <example id="category">
            <title>Category</title>

            <programlisting>

&lt;logger name="org.mmbase.security" additivity="false" &gt;
        &lt;level class="&amp;mmlevel;" value ="info" /&gt;
        &lt;appender-ref ref="securityfile" /&gt;
&lt;/logger&gt;

                        </programlisting>
          </example></para>

        <para>Per 'FileHandler' also the parameter 'Threshold' can be set,
        which makes it possible to set the logging priority for an appender,
        which means that logging events below this threshold are not logged to
        this appender regardless of the setting of the category.</para>

        <para>This describes the functionality of log4j as far as we foresee
        needing it. As one can see in the log4j javadoc there is much more
        functionality available (specialized appenders (for example which are
        rotated), layouts etc).</para>
      </section>
    </section>
    <section id="special_loggers">
      <title>Special loggers</title>
      <para>
        The following special loggers (not directly corresponding with a java class) are recognized.
        <variablelist>
          <varlistentry>
            <term>STDERR</term>
            <listitem>
              <para>If this is set to a lower level then FATAL, then all System.stder is redirected to this logger</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>org.mmbase.QUERIES</term>
            <listitem>
              <para>All fired queries are logged to this logger (and a few 'sub loggers' like org.mmbase.QUERIES.SELECT). Slow queries are logged at a higher logging level.
              See also the configuration file &lt;config dir&gt;utils/querylogging.xml for thresholds of that.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>org.mmbase.STACK.QUERIES</term>
            <listitem>
              <para>All fired queries are logged to together with a stacktrace, so that you can see where it comes from). Same as org.mmbase.QUERIES otherwise.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>org.mmbase.PAGE</term>
            <listitem>
              <para>If you use mmbase taglib, the start end end of page, as detected by this taglib are logged to this logger.
              Also, if you use the mm:log tag, then this will be logged to this logger.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>org.mmbase.SERVLETS</term>
            <listitem>
              <para>MMBase Servlets log on this loggers how many instances are running.</para>
            </listitem>
          </varlistentry>
      </variablelist>
    </para>
    </section>
  </section>


  <section id="caches">
    <title>Caches</title>

    <para>MMBase has several caches, which can be configured by a file
    'caches.xml' which must be in in the MMBase configuration
    directory.</para>

    <para>Since MMBase-1.8 also the strategies which must be used to
    invalidate entries in Query caches can be configured in this file.</para>

    <example id="caches_example">
      <title>Caches</title>

      <programlisting>

&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE caches PUBLIC "-//MMBase/DTD cache config 1.0//EN" "http://www.mmbase.org/dtd/caches_1_0.dtd"&gt;

&lt;caches&gt;
    &lt;!-- ================================================================================
    Node caches
    ================================================================================  --&gt;

    &lt;!-- simple nodes --&gt;
    &lt;cache name="Nodes"&gt;
        &lt;status&gt;active&lt;/status&gt;
        &lt;size&gt;4096&lt;/size&gt;
    &lt;/cache&gt;
 .....

&lt;/caches&gt;

            </programlisting>
    </example>

    <para>As can be seen in this example, per cache can be configured if it
    should be active or not and how big it should be.</para>

    <para>In caches.xml itself you should see which caches can be configured,
    and also a description about what exactly they actually cache. Defaults
    cache sizes are chosen to be reasonable, deviating from the defaults
    should be done with good reason.</para>
  </section>

  <appendix id="XML">
    <title>XML</title>

    <para>Some words about XML, XML Entities and so on. Not directly related
    to MMBase.</para>

    <section id="dtd">
      <title>DTD's, XSD's and validation</title>

      <para>The format of XML's is defined by dtd's. All MMBase specific XML's
      (recognizable by the DOCTTYPE) are validated when parsed (from MMBase
      1.6 onwards). This means that the dtd's for all these XML type must be
      available. They are available in the mmbase.jar, so you normally will
      not have to worry about them. You can store them in config/dtd where
      MMBase will find them first, so you could override the ones in the jar
      (useful during development). It they cannot be found, validation will
      occur with an empty DTD, resulting in lots of errors in your log.</para>

      <para>Since MMBase 1.8 also some XML's are defined by XML Schema
      Definitions. For example config/datatypes.xml and the new version of the
      builder XML's (with support for datatypes). There is no DOCTYPE on such
      XML's but the root element defined a namespace and 'schemaLocation'. The
      schema is resolved in a similar way as DTD's are resolved.</para>

      <para>If you don't want XML's to be validated, then you can place a
      configuration file config/utils/documentreader.xml (the default version
      is in mmbase.jar), and change it. This can be useful to avoid the
      overhead, or avoid the warning which may fill the log if you have a lot
      of legacy XML's (e.g. some people shipped a zillion of non-validating
      editwizard definitions).</para>

      <para>Validation of non MMBase specific xml's, like web.xml and
      'log4j.xml' is left to the applications responsible for them
      (application server and log4j in these cases).</para>
    </section>

    <section id="xml.entities">
      <title>XML Entities</title>

      <para>Entities are an XML concept. They work a little like constants. In
      the examples log4j XML configuration files, they are used to store some
      information in a centralized way. (classnames, log directories).
      Entities can be recognized by the &amp;-sign.</para>
    </section>

  </appendix>
</article>
