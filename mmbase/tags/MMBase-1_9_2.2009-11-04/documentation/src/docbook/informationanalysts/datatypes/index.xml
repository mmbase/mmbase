<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article id="informationanalysts-datatypes-index">
  <articleinfo>
    <title>Data types in MMBase</title>

    <date>2008-11-19</date>

    <edition>$Id$</edition>

    <authorgroup>
      <author>
        <firstname>Andr√©</firstname>
        <surname>van Toly</surname>
      </author>

      <author>
        <firstname>Michiel</firstname>
        <surname>Meeuwissen</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified
      is a certification mark of the Open Source Initiative.</para>
      <para>The license (Mozilla version 1.0) can be read at the MMBase site.
      See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>
  </articleinfo>

  <section id="datatypes">
    <title>MMBase Data Types</title>

    <para>MMBase datatypes are defined in the resource <filename>&lt;MMBase
    configuration&gt;/datatypes.xml</filename>. See <ulink
    url="http://www.mmbase.org/xmlns/datatypes.xsd">the Xml Schema
    Definition</ulink>, for a formal description of this XML format. This
    resource can exist multiple times, but there is at least one in
    mmbase.jar. The contents of that one are described in <xref
    linkend="available" /></para>

    <para>Other jars (e.g. of MMBase components) can also provide such a
    datatypes.xml, which will also be read in, and added to the repository of
    available datatypes.</para>

    <para>Of course you can also place your own datatypes.xml, e.g. just in
    WEB-INF/config.</para>

    <para>On a running MMBase you can see which datatypes are available in
    /mmbase/validation/. See e.g. at <ulink
    url="http://www.mmbase.org/mmbase/validation">/mmbase/validation at the
    mmbase.org site</ulink>.</para>
  </section>

  <section id="datatype.xml">
    <title>Description of the Data-type XML</title>

    <para>A <filename>datatypes.xml</filename> basically contains a list of
    'datatype' entries. E.g. <programlisting>
&lt;?xml version="1.0" ?&gt;
&lt;datatypes
    xmlns="http://www.mmbase.org/xmlns/datatypes"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mmbase.org/xmlns/datatypes http://www.mmbase.org/xmlns/datatypes.xsd"&gt;


  &lt;datatype id="integer"&gt;
    &lt;description xml:lang="en"&gt;
      Not so very big integer numbers. Common base for all kind of enumerations.
    &lt;/description&gt;
    &lt;class name="org.mmbase.datatypes.IntegerDataType" /&gt;
  &lt;/datatype&gt;
  ...


      </programlisting> There are only a limited number of data types which
    can be defined like 'integer' in this example. Namely only the database
    types of MMBase (string, integer, binary, float, double, long, xml, node,
    datetime and boolean). All other datatypes are based on one of those. This
    can be done in two ways. As a sub element 'specialization':
    <programlisting>
&lt;datatype id="float"&gt;
  &lt;specialization id="scale1-10"&gt;
    &lt;description xml:lang="en"&gt;A scale from 1 to 10.&lt;/description&gt;
    &lt;minInclusive value="1.0"  /&gt;
    &lt;maxInclusive value="10.0"  /&gt;
  &lt;/specialization&gt;
&lt;/datatype&gt;</programlisting> or as a 'datatype' element with a 'base'
    attribute. <programlisting>&lt;datatype base="float" id="scale1-10"&gt;
  &lt;description xml:lang="en"&gt;A scale from 1 to 10.&lt;/description&gt;
  &lt;minInclusive value="1.0"  /&gt;
  &lt;maxInclusive value="10.0"  /&gt;
&lt;/datatype&gt;</programlisting></para>

    <para>It is also possible to replace a data type, by extending from the
    data type with the same id. This is only feasible in
    <filename>WEB-INF/config/datatypes</filename> because that one is parsed
    last.<programlisting>&lt;!-- In this site, email addresses are required --&gt;
&lt;datatype base="emailaddress" id="emailaddress"&gt;
  &lt;required value="true"&gt;
    &lt;description xml:lang="nl"&gt;Je moet een emailadres intypen&lt;/description&gt;
    &lt;description xml:lang="fr"&gt;Un address courriel est requis&lt;/description&gt;
    &lt;description xml:lang="en"&gt;An email address is required&lt;/description&gt;
  &lt;/required&gt;
&lt;/datatype&gt;</programlisting></para>

    <para>In the following subsections we will elaborate a bit on the possible
    sub-elements of a datatype (or 'specialization') element.</para>

    <section id="datatype.description">
      <title>Description, class, default value, and properties</title>

      <para>You can start with descriptions (one for each language). These
      descriptions are used in automated overview pages (as e.g. in
      /mmbase/validation). If you define a data type for inclusion in
      mmbase.jar or in some component, it is advised to at least provide a
      description in English.</para>

      <para>There can be one or no 'class' element then, which defines the
      actual implementation of the
      <structname>org.mmbase.datatypes.DataType</structname> interface which
      backs the data type. The class can often be inherited from the base data
      type. If not, the class must at least extend from the class from the
      base data type.</para>

      <para>With every data type a default value is associated.
      E.g.<programlisting>&lt;datatype id="integer"&gt;
    &lt;specialization id="colors"&gt;
      &lt;description xml:lang="en"&gt;
        colors as can be used in css
      &lt;/description&gt;
      &lt;default value="white" /&gt;
      &lt;enumeration&gt;
        &lt;entry basename="org.mmbase.datatypes.resources.string.colors" /&gt;
      &lt;/enumeration&gt;
    &lt;/specialization&gt;</programlisting> The value is implicitly cast to
      the correct type. In this case 'white' can be converted to an integer,
      because there is a mapping present in the defined enumeration.</para>

      <para>If the class of the data type supports properties which are not
      recognized by the data type XSD (as described in this document) then
      arbitrary properties can be set using 'property' sub
      elements.<programlisting>&lt;specialization id="confirmpassword"&gt;
  &lt;description xml:lang="en"&gt;
    This is a field datatype that of which the value is only valid, if it is equal to the value
    of another field in this node. The other field's name is default 'password' but it can be
    changed by overriding the property 'field'.
  &lt;/description&gt;
  &lt;class name="org.mmbase.datatypes.ConfirmPasswordDataType" /&gt;
  &lt;property name="field" value="password" /&gt;
&lt;/specialization&gt;</programlisting> In this case, the
      'ConfirmPasswordDataType' class has a 'setField' method which is called
      when this data type is instantiated.</para>
    </section>

    <section id="datatype.restrictions">
      <title>Restrictions</title>

      <para>Several 'restrictions' can then be applied to further define the
      'data type'. The following sub sections describe the
      possibilities.</para>

      <section id="enforcementandfixation">
        <title>Enforcement and fixation</title>

        <para>All of the restrictions described in the next sections also
        support the attributes 'enforce' and 'fixed'.</para>

        <para>With the 'enforce' attribute it is indicated how 'strong' the
        restriction on the values is. The possible values are, in order of
        decreasing strength:</para>

        <itemizedlist>
          <listitem>
            <para>absolute: This restriction is enforced by the MMBase, it
            probably cannot even correctly store the value if this restriction
            is not satisfied. This restriction is even enforced in inherited
            datatypes.</para>
          </listitem>

          <listitem>
            <para>always: The restriction is always effective. But extensions
            can change it. This is the default.</para>
          </listitem>

          <listitem>
            <para>onchange: The restriction is only enforced if the value is
            changed, or created. So if it is left unchanged, it is not
            enforced.</para>
          </listitem>

          <listitem>
            <para>oncreate: Only the first time.</para>
          </listitem>

          <listitem>
            <para>never: The value restriction is never enforced. It only
            serves as meta information which can be used as an indication for
            GUI's.</para>
          </listitem>
        </itemizedlist>

        <para>If the restriction is 'fixed', then that means that the
        restriction cannot be overridden at all. (TODO, check this).</para>
      </section>

      <section id="errormessage">
        <title>Error messages</title>

        <para>If a restriction is not satified, then a certain message can be
        provided to the user. On default this message is looked up in the
        resource bundle 'org.mmbase.datatypes.resources.datatypes'. The used
        key is something like &lt;database type&gt;.&lt;name of
        restriction&gt;.error.</para>

        <para>The error description can however, per language, be overridden,
        using 'description' sub elements of the restriction element. For
        example<programlisting>&lt;specialization id="emailaddress"&gt;
  &lt;description xml:lang="en"&gt;
    The valid values of such a field must be a valid email address. The current implemenation is by a rather simple regular expression.
   &lt;/description&gt;
   &lt;pattern value="(?i)\A[A-Z0-9_\-\+\&amp;amp;\*\#]+([\.-]?[A-Z0-9_\-\+\&amp;amp;\*\#])*@([A-Z0-9_-]{2,}[\.]{1})+([A-Z]{2,})\z"&gt;
     &lt;description xml:lang="nl"&gt;'${VALUE}' is geen geldig email adres&lt;/description&gt;
     &lt;description xml:lang="en"&gt;'${VALUE}' is not a valid email-address&lt;/description&gt;
     &lt;description xml:lang="fr"&gt;'${VALUE}' n'est pas un correct address courriel&lt;/description&gt;
     &lt;description xml:lang="eo"&gt;'${VALUE}' ne estas korektforma retadreso&lt;/description&gt;
   &lt;/pattern&gt;
&lt;/specialization&gt;</programlisting> As you see, token replacement is
        done. Currently, NAME, VALUE, CONSTRAINT and CONSTRAINTVALUE are
        recognized. No java.text.MessageFormat features are yet
        supported.</para>
      </section>

      <section id="unique">
        <title>Unique</title>

        <para>A value can be marked to be 'unique'. This can only be applied
        if the data type is associated with a field (See also <xref
        linkend="builders" />) Of course this means that that values which are
        already present, are not valid any more for new objects.</para>
      </section>

      <section id="required">
        <title>Required</title>

        <para>If a data type is 'required' then that means that the values may
        not be <constant>null</constant>. The minimal configuration is as
        follows: <programlisting>&lt;datatype base="line" xmlns="http://www.mmbase.org/xmlns/datatypes"&gt;
  &lt;required value="true" /&gt;
&lt;/dataytype&gt;
</programlisting> But you can provide a bit more customized feedback.
        <programlisting>&lt;datatype base="line" xmlns="http://www.mmbase.org/xmlns/datatypes"&gt;
  &lt;required value="true"&gt;
    &lt;description xml:lang="nl"&gt;Een artikel moet een titel te hebben&lt;/description&gt;
    &lt;description xml:lang="en"&gt;A title is required for an article&lt;/description&gt;
  &lt;/required&gt;
&lt;/dataytype&gt;</programlisting></para>
      </section>

      <section id="minmax">
        <title>Minimal and maximal values</title>

        <para>For datatypes which describe 'comparable' values (and so the
        class implements
        <structname>org.mmbase.datatypes.ComparableDataType</structname>), a
        minimal and maximal value can be assigned.<programlisting>&lt;datatype base="datetime" xmlns="http://www.mmbase.org/xmlns/datatypes"&gt;
   &lt;default value="now" /&gt;
   &lt;minExclusive value="today - 3 day"    enforce="oncreate" /&gt;
   &lt;maxInclusive value="today + 100 year" enforce="onchange" /&gt;
&lt;/datatype&gt;</programlisting> As you can see, these minimal and maximal
        values can be set -Exclusive or -Inclusive, with the obvious
        semantics.</para>

        <note>
          <para>Most datatypes are comparable. But e.g. not binaries or xml's.
          It is most logical for dates, and numerics. For strings it indicates
          alphabetic ordering (I have yet to encounter the first serious use
          of a restriction on minimal or maximal value of a string
          field)</para>
        </note>
      </section>

      <section id="minmaxlength">
        <title>Minimal, maximal and fixed lengths</title>

        <para>The values of some data types have a length (implementations of
        <structname>org.mmbase.datatypes.LengthDataType</structname>). This
        length can also be restricted. Noticeable 'length data types' are
        strings and binaries. The 'maximal length' can also be used as an
        indication for the length of the field in the database (if the
        database is associated with a field).<programlisting>
&lt;datatype base="binary" xmlns="http://www.mmbase.org/xmlns/datatypes"&gt;
  &lt;minLength value="3" /&gt;
  &lt;maxLength value="10000" /&gt;
&lt;/datatype&gt;</programlisting> If minLength and maxLength are equal, you
        can simply use 'length'.</para>

        <note>
          <para>A minimal length of '1' is often a bit confusing, because that
          means approximately the same as 'required'. Especially when using
          taglib generated input-fields. Taglib interprets the empty string as
          'null' if the value is not required. So, it is adviced to use the
          'required' restriction if you find that content for this data type
          is essential.</para>

          <para></para>
        </note>
      </section>

      <section id="pattern">
        <title>Patterns</title>

        <para>For strings, the pattern is interpreted as a regular expression,
        which must match. For date times, the pattern is interpreted as
        SimpleDataFormat pattern (but see also
        org.mmbase.datatypes.DateTimePattern).</para>
      </section>
    </section>

    <section id="enumeration">
      <title>Other properties &amp; enumerations</title>

      <section id="password">
        <title>Password</title>

        <para>For strings you can set the password to 'true', which is only an
        indication to user interfaces. So this is not a restriction, it is
        more like a property (and actually, you can achieve the same effect
        with a property element).<programlisting>
&lt;specialization id="password"&gt;
  &lt;pattern enforce="never" value="\A[^\n\r]*\z" /&gt; &lt;!-- cannot contain newlines --&gt;
  &lt;password value="true" /&gt;

  ..

  this would work too:
&lt;specialization id="password"&gt;
   &lt;property name="password" value="true" ?&gt;
   &lt;pattern enforce="never" value="\A[^\n\r]*\z" /&gt;
   ..
          </programlisting></para>
      </section>

      <section id="enumerations">
        <title>Enumerations</title>

        <para>It is also possible to restrict the values to the entries of a
        certain set. There are several ways to provided those certain values.
        The most basic one, is simply stating every value:<programlisting>
&lt;specialization id="spells"&gt;
&lt;!-- example to test --&gt;
  &lt;enumeration&gt;
    &lt;entry value="1" xml:lang="nl" display="hokus pokus" /&gt;
    &lt;entry value="2" xml:lang="nl" display="simsalabim" /&gt;
    &lt;entry value="3" xml:lang="nl" display="pilatus pas" /&gt;
    &lt;entry value="4" xml:lang="nl" display="abcracadabra" /&gt;
    &lt;entry value="2" xml:lang="en" display="simsalabim" /&gt;
    &lt;entry value="3" xml:lang="en" display="pilatus pas" /&gt;
    &lt;entry value="1" xml:lang="en" display="hocus pocus" /&gt;
  &lt;/enumeration&gt;
&lt;/specialization&gt;</programlisting> You can see that you can enter the
        same value more than once, for different languages. The default value
        to display is the value itself, so it is not needed to specify
        localized display values.</para>

        <para>Enumerations are most often used on data types with
        'base="integer"', but can also work on string data types, and node
        data type (using 'query').</para>

        <para>An enumeration is a restriction, but or course it is mainly a
        powerfull hint to produce a user interface using e.g. a dropdown list
        or so.</para>

        <section id="resourcebundle">
          <title>Enumeration from a Resource bundle</title>

          <para>It is also possible to specify the possible value using a
          ResourceBundle.<programlisting>
&lt;enumeration &gt;
   &lt;entry basename="org.mmbase.datatypes.resources.weekdays" /&gt;
&lt;/enumeration&gt;</programlisting> where the weekdays resource bundle could
          look something like this:<programlisting>
0=sunday
1=monday
2=tuesday
3=wednesday
4=thursday
5=friday
6=saturday</programlisting> If you look in the
          <filename>datatypes.xml</filename> in
          <filename>mmbase.jar</filename> you will find that this 'weekdays'
          enumeration actually defined like this<programlisting>
&lt;enumeration&gt;
   &lt;entry basename="org.mmbase.datatypes.resources.weekdays"
          javaconstants="java.util.Calendar"
/&gt;
&lt;/enumeration&gt;</programlisting> This indicates that the keys of the
          resource bundle are resolved to the actual values using constants in
          the given java class. This results in that the resource bundle can
          look like this:<programlisting>
SUNDAY=sunday
MONDAY=monday
TUESDAY=tuesday
WEDNESDAY=wednesday
THURSDAY=thursday
FRIDAY=friday
SATURDAY=saturday
          </programlisting> Which looks of course a lot nicer.</para>

          <para>The javaconstants attribute can (since 1.8.6) also specify a
          java 1.5 'enum'. The corresponding value is then the value returned
          by a method 'getValue' if the enum has that method. Orderwise it is
          the value returned by 'ordinal()'.</para>
        </section>

        <section id="sorterclass">
          <title>sorterclass attribute</title>

          <para>To specify an alternative presentation order, you can specify
          a 'Comparator' or 'Comparable' class name with the 'sorterclass'
          attribute. This will be used to order the entries, using the
          <emphasis>keys</emphasis>. If it is a comparator, then it will need
          the empty constructor, if it is a comparable, then it will be used
          to 'wrap' the keys, so a constructor must exist, which can accept
          the keys as an argument.</para>

          <programlisting>
&lt;datatype base="long" xmlns="http://www.mmbase.org/xmlns/datatypes"&gt;
  &lt;enumeration&gt;
    &lt;entry
       sorterclass="org.mmbase.util.ReverseComparator"
       basename="org.mmbase.notifications.resources.offset" /&gt;
  &lt;/enumeration&gt;
      &lt;/datatype&gt;
TUESDAY=tuesday
WEDNESDAY=wednesday
THURSDAY=thursday
FRIDAY=friday
SATURDAY=saturday</programlisting>

          <para>A special, and relatively often, value for the value of
          'sorterclass' is org.mmbase.util.SortedBundle$ValueWrapper. Using
          this, the entries will be orderd by (localized)
          <emphasis>value</emphasis>. This will often be used for enumeration
          which have no intrincic order. Drop downs will then be presented in
          alphabetical order. For example, This gives all languages:</para>

          <programlisting>
&lt;enumeration&gt;
   &lt;entry sorterclass="org.mmbase.util.SortedBundle$ValueWrapper"
          basename="org.mmbase.datatypes.resources.iso639" /&gt;
&lt;/enumeration&gt;</programlisting>
        </section>

        <section id="query">
          <title>Enumerations based on MMBase queries</title>

          <para>Enumerations based on MMBase queries are most often used for
          'NODE' typed fields. You simply specify a mmbase query which
          specifies the allowed node values for the field. The query is
          speficied with XML in the namespace
          "http://www.mmbase.org/xmlns/searchquery" (This format is e.g. also
          used in the XML's of the lucene contributions).</para>

          <para>Most oftenly, the query simply lists all nodes of one certain
          type, effectively constraining the NODE-values to nodes of one
          certain type:</para>

          <programlisting>
      &lt;enumeration&gt;
        &lt;query type="typedef" xmlns="http://www.mmbase.org/xmlns/searchquery" /&gt;
        &lt;/enumeration&gt;
      </programlisting>

          <section id="query_for_other_typed_field">
            <title>Enumerations based on MMBase queries for fields which are
            not NODE</title>

            <para>In this case it is essential to also use one or two field,
            and make the query 'distinct' and 'multilevel' (which avoids
            adding the 'number' field implicitely).</para>

            <para>In this example we make a STRING field with possible values
            defined by the field 'code' of another builder.</para>

            <programlisting>
      &lt;datatype base="eline" xmlns="http://www.mmbase.org/xmlns/datatypes" &gt;
        &lt;required value="true" /&gt;
        &lt;enumeration&gt;
          &lt;query path="nz_courses" element="" xmlns="http://www.mmbase.org/xmlns/searchquery"&gt;
            &lt;distinct value="true" /&gt;
            &lt;field name="nz_courses.code" /&gt;
            &lt;field name="nz_courses.name" /&gt;
          &lt;/query&gt;
        &lt;/enumeration&gt;
      &lt;/datatype&gt;</programlisting>

            <para>'element="" makes the query explicitely multilevel, even
            though only one step is present</para>
          </section>
        </section>
      </section>
    </section>

    <section id="processors">
      <title>Processors</title>

      <para>The data type also provides hooks to plug in functionality on
      several events like 'getting a value' 'setting a value' and 'committing
      the object which contains this data type'. This is at the moment only
      sensible for fields. MMBase provides several general purpose processors,
      which you can also use in your own datatypes. But of course you can also
      implement new ones (if you want to do that, we refer to the javadoc of
      the org.mmbase.datatype.processors package)</para>

      <section id="setgetprocessor">
        <title>Set-processors and Get-processors</title>

        <para>Lets take an example:<programlisting>
&lt;specialization id="created"&gt;
  &lt;description xml:lang="en"&gt;
    Read-only date-time field that contains the time of creation of the node.
  &lt;/description&gt;
  &lt;default value="now" /&gt;
  &lt;setprocessor&gt;
     &lt;class name="org.mmbase.datatypes.processors.Readonly" /&gt;
  &lt;/setprocessor&gt;
  &lt;getprocessor type="*"&gt;
    &lt;class name="org.mmbase.datatypes.processors.CreationTimeGuesser" /&gt;
  &lt;/getprocessor&gt;
  &lt;getprocessor type="string"&gt;
    &lt;class name="org.mmbase.datatypes.processors.CreationTimeGuesser" /&gt;
    &lt;class name="org.mmbase.datatypes.processors.FormatDateTime" /&gt;
  &lt;/getprocessor&gt;
&lt;/specialization&gt;</programlisting> Using the 'type' attribute one of the
        MMBase database type can be associated with get- and setprocessors.
        Those database types also correspond to methods in the MMBase bridge
        'Node' interface. In this case we see that when getting a value as a
        string ('getStringValue'), something else happens then when it is
        gotten otherwise ('getDateValue'). In this case the creation time is
        nicely formatted when the value is requested as a string.</para>

        <para>The CreationTimeGuesser processor arranges that if the value is
        empty, it guesses an actual value using the MMBase 'day
        markers'.</para>

        <para>In this example, there is also hooked in a class on the
        set-processor. Namely the processor which simply refuses the action,
        effectively leading to a read-only field. (The CreationTimeGuesser
        itself can use 'setObjectValue' to bypass all set-processors, if it
        wants to store its guessed value for efficiency).</para>

        <note>
          <para>You can specify more than one class for a certain processor.
          They will be 'chained' in such a case.</para>
        </note>

        <note>
          <para>The class may also implemented
          org.mmbase.util.transformers.CharTransformer (or factory), in which
          case an instance of that class is simply wrapped into a Processor,
          which only transforms the value.</para>
        </note>

        <note>
          <para>The instances of the processors can be configured with 'param'
          subtags.</para>
        </note>
      </section>

      <section id="commitprocessors">
        <title>Commit-processors</title>

        <para>Commit-processors are effectively called on commit of the node
        which contains the field with this data type (for other datatypes the
        behavior is as yet undefined). For example<programlisting>
&lt;specialization id="lastmodified"&gt;
  &lt;description xml:lang="en"&gt;
    Read-only date-time field that contains the most recent time at which this node was changed .
  &lt;/description&gt;
  &lt;setprocessor&gt;
    &lt;class name="org.mmbase.datatypes.processors.Readonly" /&gt;
  &lt;/setprocessor&gt;
  &lt;commitprocessor&gt;
    &lt;class name="org.mmbase.datatypes.processors.LastModified" /&gt;
  &lt;/commitprocessor&gt;
  ..
  </programlisting> So, on commit, the 'LastModified' processor is called,
        which simply fills the current time into the value of the field with
        this data type.</para>
      </section>
    </section>
  </section>

  <section id="builders">
    <title>How to associate a data type with a field</title>

    <para>A data type specialization needs to be added to a field in a builder
    configuration file just before the 'db' section. By the way, since the
    datatypes can provide the necessary information, the db section can be
    omitted all together. The following example creates a lastmodified field
    for a node that is automatically adjusted every time a node is
    saved.</para>

    <programlisting>
&lt;field&gt;
  &lt;datatype xmlns="http://www.mmbase.org/xmlns/datatypes" base="lastmodified" /&gt;
  &lt;db&gt;
    &lt;name&gt;updated&lt;/name&gt;
    &lt;type key="false" notnull="false" state="system"&gt;DATETIME&lt;/type&gt;
  &lt;/db&gt;
&lt;/field&gt;
</programlisting>

    <para>which can also be noted like this.</para>

    <programlisting>
&lt;field name="updated" state="system"&gt;
  &lt;datatype xmlns="http://www.mmbase.org/xmlns/datatypes" base="lastmodified"&gt;
    &lt;required value="false" /&gt; &lt;!-- this is btw also the default --&gt;
  &lt;/datatype&gt;
&lt;/field&gt;
</programlisting>

    <note>
      <para>Using 'db' subtag is actually a MMBase pre-1.8 remnant. Since
      MMBase 1.8 the db type of a field can be completely implicit by the data
      type, and the remaining properties of the db-section were not really
      database related. E.g. the name of a field is much more generic, and is
      used not only in the database layer. The database layer may even use
      something else. The 'state' of a field is only partially database
      related. So 'name' and 'state' are now also attributes of the field tag
      itself.</para>

      <para>Keys can be indicated in a seperate 'indexlist' section of the
      builder xml.</para>

      <para>The database property 'notnull' can correspond to the 'required'
      restriction of the data type.</para>
    </note>

    <para>As you can see, this is simply a part of the same XML as also used
    in <filename>datatypes.xml</filename>'s. So, you can also 'anonymously'
    define or refine a data type just for one field.</para>
  </section>

  <section id="bridge">
    <title>Datatypes and the MMBase bridge</title>

    <para>When you use the bridge, you can get the data type associated with a
    certain field use the 'getDataType' method on 'Field'. Then you can use
    the interfaces of 'org.mmbase.datatypes' to explore the possible
    values.</para>
  </section>

  <section id="taglib">
    <title>Datatypes and the MMBase Taglib</title>

    <para>If the mm:fieldinfo tag is used to create form-entries, then the
    data type of the field is explored to do that. If it e.g. detects that
    new-lines are permissible, then a textarea is created.</para>

    <section id="mmform">
      <title>Forms &amp; validation</title>

      <para>TODO: mm:input, mm:form, mm:valid, mm:datatype</para>
    </section>
  </section>

  <section id="javascript">
    <title>Datatypes and JavaScript</title>

    <para>Since MMBase 1.8.5, the meta information provided by MMBase Data
    Types can also be accessed using JavaScript. For that you include the
    javascript file /mmbase/validation/validation.js.jsp, plus some other
    utilities (see /mmbase/valiation/test.jspx), and instatiate an
    "MMBaseValidator". <programlisting id="mmbasevalidator">
&lt;html  xmlns="http://www.w3.org/1999/xhtml"&gt;
  &lt;head&gt;
    &lt;title&gt;Test&lt;/title&gt;
    &lt;jsp:directive.include file="/mmbase/validation/javascript.jspxf" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script type="text/javascript"&gt;new MMBaseValidator(document);&lt;/script&gt;
    ... the rest of your page..
</programlisting></para>

    <para>This javascript library searches (on load) all form elements with
    the class "mm_validate". 'onkeyup' events are added to all those
    elements.</para>

    <para>The data type is determined by inspecting the css class names. If
    one starts with "mm_dt_" then the remaining is interpreted as the MMBase
    Data Type id. There can also be two class names, one starting with mm_f_
    and mm_nm_ which can together identify the datatype of a certain field of
    a nodemanager.</para>

    <para>The mm:fieldinfo tag of the MMBase Taglib will set up the correct
    CSS class for form elements that it creates.</para>

    <para>As soon a data type meta information is needed, then this is
    requested (using 'ajax') with a call to /mmbase/validation/datatype.jspx.
    The resulting XML's are cached in MMBaseValidator.</para>
  </section>

  <section id="available">
    <title>Summary of default datatypes</title>

    <para>This is a summary of all MMBase datatypes and their specializations
    found in the 'datatypes.xml' in <filename>mmbase.jar</filename> and as
    such are per default available. The basic data types (the 'database
    types') are xml, string, datetime, long, boolean, integer, long, float,
    double, binary and node, below their respective titles you will find their
    specializations.</para>

    <section id="section_xml" xmlns="http://docbook.org/ns/docbook">
      <title>xml</title>

      <para>XML fields can be used for 'richtext' fields, or other fields
      which are (supposed to be) valid XML.</para>

      <para>Class: <ulink
      url="http://www.mmbase.org/api/org/mmbase/datatypes/XmlDataType.html">org.mmbase.datatypes.XmlDataType</ulink></para>

      <variablelist>
        <varlistentry>
          <term>html</term>

          <listitem>
            <para>Principally, HTML could be valid XML.</para>

            <para>A set-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/xml/HtmlSetString.html">org.mmbase.datatypes.processors.xml.HtmlSetString</ulink></para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/xml/HtmlGetString.html">org.mmbase.datatypes.processors.xml.HtmlGetString</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>xmlfield</term>

          <listitem>
            <para>Adds processor to getting and setting as String, so that it
            looks like plain text then.</para>

            <para>A set-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/xml/FieldSetString.html">org.mmbase.datatypes.processors.xml.FieldSetString</ulink></para>

            <para>A get-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/xml/FieldGetString.html">org.mmbase.datatypes.processors.xml.FieldGetString</ulink></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section_string" xmlns="http://docbook.org/ns/docbook">
      <title>string</title>

      <para>String fields contain text.</para>

      <para>Class: <ulink
      url="http://www.mmbase.org/api/org/mmbase/datatypes/StringDataType.html">org.mmbase.datatypes.StringDataType</ulink></para>

      <variablelist>
        <varlistentry>
          <term>lastmodifier</term>

          <listitem>
            <para>A ready-only field, which contains the user id of the last
            user that changed the node to which the field belongs.</para>

            <para>Patterns are assigned. \A[^\n\r]*\z</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Readonly.html">org.mmbase.datatypes.processors.Readonly</ulink></para>

            <para>A commit-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/LastModifier.html">org.mmbase.datatypes.processors.LastModifier</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>ip</term>

          <listitem>
            <para>A ready-only field, which contains the IP address of the of
            the last user that changed the node to which the field
            belongs.</para>

            <para>Patterns are assigned. \A[^\n\r]*\z</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Readonly.html">org.mmbase.datatypes.processors.Readonly</ulink></para>

            <para>A commit-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Ip.html">org.mmbase.datatypes.processors.Ip</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>creator</term>

          <listitem>
            <para>A ready-only field, which contains the user id of the user
            that created the node to wich the field belongs.</para>

            <para>Patterns are assigned. \A[^\n\r]*\z</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Readonly.html">org.mmbase.datatypes.processors.Readonly</ulink></para>

            <para>A commit-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Creator.html">org.mmbase.datatypes.processors.Creator</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>md5password</term>

          <listitem>
            <para>In the database an MD5 of the value which is set into this
            field is set. If you try to get this value as a String, the empty
            String is returned.</para>

            <para>This type is designated for passwords</para>

            <para>Patterns are assigned. \A[^\n\r]*\z</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/util/transformers/MD5.html">org.mmbase.util.transformers.MD5</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>confirmpassword</term>

          <listitem>
            <para>This is a field datatype that of which the value is only
            valid, if it is equal to the value of another field in this node.
            The other field's name is default 'password' but it can be changed
            by overriding the property 'field'.</para>

            <para>Class: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/ConfirmPasswordDataType.html">org.mmbase.datatypes.ConfirmPasswordDataType</ulink></para>

            <para>This type is designated for passwords</para>

            <para>Patterns are assigned. \A[^\n\r]*\z</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>lowercaseuppercase</term>

          <listitem>
            <para>Silly example (also used to test) Strings are stored all
            lowercase, but showed all uppercase</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/util/transformers/LowerCaser.html">org.mmbase.util.transformers.LowerCaser</ulink></para>

            <para>A get-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/util/transformers/UpperCaser.html">org.mmbase.util.transformers.UpperCaser</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>dutch-zipcode</term>

          <listitem>
            <para>The valid values of such a field, are zip-codes as they are
            used in the Netherlands.</para>

            <para>Patterns are assigned. (?i)\A[0-9]{4}\s*[A-Z]{2}\z</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/util/transformers/UpperCaser.html">org.mmbase.util.transformers.UpperCaser</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>emailaddress</term>

          <listitem>
            <para>The valid values of such a field must be a valid email
            address. The current implemenation is by a rather simple regular
            expression.</para>

            <para>Patterns are assigned.
            (?i)\A[A-Z0-9_\-\+\&amp;\*\#]+([\.-]?[A-Z0-9_\-\+\&amp;\*\#])*@([A-Z0-9_-]{2,}[\.]{1})+([A-Z]{2,})\z</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>field</term>

          <listitem>
            <para>Mainly supplied for backwards compatibility. A String
            without further restrications. Practicly this will result in
            textarea form entries.</para>

            <para>Patterns are assigned. (?s)\A.*\z</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>requiredfield</term>

          <listitem>
            <para />

            <para>Patterns are assigned. (?s)\A.*\z</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>line</term>

          <listitem>
            <para>A String that may not contain newlines (though this is not
            enforced). Practicly this will result in 'input type="text"' form
            entries.</para>

            <para>Patterns are assigned. \A[^\n\r]*\z</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>eline</term>

          <listitem>
            <para>A String that may not contain newlines (this is enforced).
            Practicly this will result in 'input type="text"' form
            entries.</para>

            <para>Patterns are assigned. \A[^\n\r]*\z</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>security_context</term>

          <listitem>
            <para>Uses 'setContext' and 'getContext'. The idea is to use this
            type for a 'virtual' field.</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/ContextProcessor$Set.html">org.mmbase.datatypes.processors.ContextProcessor$Set</ulink></para>

            <para>A get-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/ContextProcessor$Get.html">org.mmbase.datatypes.processors.ContextProcessor$Get</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>colors</term>

          <listitem>
            <para>Colors as can be used in css.</para>

            <para>Default: white</para>

            <para>Patterns are assigned.
            (?i)\A(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow|#[0-9,a-f]{3}|#[0-9,a-f]{6})\z</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>trimmedline</term>

          <listitem>
            <para>A String that may not contain newlines, after it is trimmed.
            Practicly this will result in 'input type="text"' form
            entries.</para>

            <para>Patterns are assigned. \A\s*[^\n\r]*?\s*\z</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/util/transformers/Trimmer.html">org.mmbase.util.transformers.Trimmer</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>trimmedrequiredline</term>

          <listitem>
            <para>A String that may not contain newlines, after it is trimmed.
            After trimming, there must be at least one character</para>

            <para>Patterns are assigned. \A\s*+[^\n\r]{0,}\S\s*\z</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>owner</term>

          <listitem>
            <para>The values of this field are restricted to the possible
            'security contexts' of the current user as defined by the MMBase
            Security implementation.</para>

            <para>Class: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/SecurityContextDataType.html">org.mmbase.datatypes.SecurityContextDataType</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>components</term>

          <listitem>
            <para>The names of all available MMBase Framework
            Components</para>

            <para>Class: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/ComponentNamesDataType.html">org.mmbase.datatypes.ComponentNamesDataType</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>nodemanagers</term>

          <listitem>
            <para>The names of all available MMBase NodeManagers</para>

            <para>Class: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/NodeManagerNamesDataType.html">org.mmbase.datatypes.NodeManagerNamesDataType</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>whitespacereplacer</term>

          <listitem>
            <para>If you set a value in a field with this datatype, then all
            occurences of one or more whitespace characters are replaced by
            one space before the value is committed to the database.</para>

            <para>A set-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/util/transformers/RegexpReplacerFactory.html">org.mmbase.util.transformers.RegexpReplacerFactory</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>whitespacecollapser</term>

          <listitem>
            <para>If you set a value in a field with this datatype, then all
            occurences of one or more whitespace characters are removed before
            the value is committed to the database.</para>

            <para>A set-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/util/transformers/RegexpReplacerFactory.html">org.mmbase.util.transformers.RegexpReplacerFactory</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>checksum</term>

          <listitem>
            <para>The default 'checksum' datatype checksums the 'handle'
            field, but you can of course define your own (anonymously in the
            builder xml e.g.) for other fields. This is a read-only field
            which is automaticly filled on commit of the node. If you define
            this field as unique, then the effect is that a handle field which
            already is present in the database, cannot be saved.</para>

            <para>Patterns are assigned. \A[^\n\r]*\z</para>

            <para>A get-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/ChecksumGetProcessorFactory.html">org.mmbase.datatypes.processors.ChecksumGetProcessorFactory</ulink></para>

            <para>A commit-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/ChecksumProcessorFactory.html">org.mmbase.datatypes.processors.ChecksumProcessorFactory</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>filename</term>

          <listitem>
            <para>A filename field removes directory information on
            set.</para>

            <para>Patterns are assigned. \A[^\n\r]*\z</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/IgnoreIfChangedProcessor.html">org.mmbase.datatypes.processors.IgnoreIfChangedProcessor</ulink>,
            <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/IgnoreEmptyProcessor.html">org.mmbase.datatypes.processors.IgnoreEmptyProcessor</ulink>,
            <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/FileNameProcessor.html">org.mmbase.datatypes.processors.FileNameProcessor</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>iso639</term>

          <listitem>
            <para>ISO 639 language 2-letter codes (sorted alphabeticly on the
            name of the language in the current locale)</para>

            <para>Patterns are assigned. \A..\z</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>iso3166</term>

          <listitem>
            <para>ISO 3166 language 2-country codes</para>

            <para>Patterns are assigned. \A..\z</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>sgender</term>

          <listitem>
            <para>Gender stored in a string 'M' or 'F'.</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section_datetime" xmlns="http://docbook.org/ns/docbook">
      <title>datetime</title>

      <para>DateTime fields contain absolute points in time. TODO: say
      something about timezones here. Getting it as a String results in a
      formatted datetime according to the locale (of the cloud e.g.).</para>

      <para>Class: <ulink
      url="http://www.mmbase.org/api/org/mmbase/datatypes/DateTimeDataType.html">org.mmbase.datatypes.DateTimeDataType</ulink></para>

      <variablelist>
        <varlistentry>
          <term>created</term>

          <listitem>
            <para>Read-only date-time field that contains the time of creation
            of the node.</para>

            <para>Default: now</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Readonly.html">org.mmbase.datatypes.processors.Readonly</ulink></para>

            <para>A get-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/CreationTimeGuesser.html">org.mmbase.datatypes.processors.CreationTimeGuesser</ulink></para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/CreationTimeGuesser.html">org.mmbase.datatypes.processors.CreationTimeGuesser</ulink>,
            <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/FormatDateTime.html">org.mmbase.datatypes.processors.FormatDateTime</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>lastmodified</term>

          <listitem>
            <para>Read-only date-time field that contains the most recent time
            at which this node was changed .</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Readonly.html">org.mmbase.datatypes.processors.Readonly</ulink></para>

            <para>A commit-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/LastModified.html">org.mmbase.datatypes.processors.LastModified</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>time</term>

          <listitem>
            <para>A date-time field that ignores the date part. Actually this
            is stored as a time on 1970-01-01, but you can use this to
            indicate an hour of any day. Generic editors will not offer to
            edit the date parts of the date-time.</para>

            <para>Default: 100</para>

            <para>Patterns are assigned. HH:mm:ss</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>date</term>

          <listitem>
            <para>A date-time field that ignores the time part.</para>

            <para>Default: today</para>

            <para>Patterns are assigned. Example pattern (for english): MMMM
            dd yyyy</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>20th-century</term>

          <listitem>
            <para>A specialization of 'date', so it ignores the time part. The
            only allowed values are dates which are in the 20th
            century.</para>

            <para>Default: 1950-01-01</para>

            <para>Minimal value (inclusive): 1900-01-01</para>

            <para>Maximal value (exclusive): 2000-01-01</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>20th-century-pedantic</term>

          <listitem>
            <para>Pedantic version of 20th-century. Dates in the year 1900 are
            rejected, dates in the year 2000 are accepted.</para>

            <para>Default: 1950-01-01</para>

            <para>Minimal value (inclusive): 1901-01-01</para>

            <para>Maximal value (exclusive): 2001-01-01</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>birthdate</term>

          <listitem>
            <para>DataType specialized for storing birthdates. So, no times.
            Defaults to 30 years ago. No future dates are accepted.</para>

            <para>Default: today- 30 year</para>

            <para>Maximal value (inclusive): today</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>living-birthdate</term>

          <listitem>
            <para>DataType specialized for storing birthdates for people
            currently alive. Minimal value 140 years ago. Because this gives
            limited number of possible years, a dropdown for the year field
            becomes possible.</para>

            <para>Default: today - 30 year</para>

            <para>Minimal value (inclusive): today - 140 year</para>

            <para>Maximal value (inclusive): today</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>historical</term>

          <listitem>
            <para>Historical dates, with a ERA designator.</para>

            <para>Patterns are assigned. Example pattern (for english): MMMM
            dd yyyy GG</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>weeknumbers</term>

          <listitem>
            <para>Exotic specialization of 'date'. It will allow entering
            dates using the week-number and the name of the day. In
            controdiction to a more conventional notation with month and day
            of the month.</para>

            <para>Patterns are assigned. Example pattern (for english): 'day:
            'EEEEE 'week :'ww 'year: 'yyyy</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>eventtime</term>

          <listitem>
            <para />
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section_long" xmlns="http://docbook.org/ns/docbook">
      <title>long</title>

      <para>Longs can contain very big (positive and negative) integer
      numbers.</para>

      <para>Class: <ulink
      url="http://www.mmbase.org/api/org/mmbase/datatypes/LongDataType.html">org.mmbase.datatypes.LongDataType</ulink></para>

      <variablelist>
        <varlistentry>
          <term>duration</term>

          <listitem>
            <para>Durations are positive longs, which present a number of
            seconds. (for other units, we may have to introduce other
            datatypes).</para>

            <para>Class: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Duration$DataType.html">org.mmbase.datatypes.processors.Duration$DataType</ulink></para>

            <para>Minimal value (inclusive): 0</para>

            <para>A set-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Duration$SetString.html">org.mmbase.datatypes.processors.Duration$SetString</ulink></para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Duration$GetString.html">org.mmbase.datatypes.processors.Duration$GetString</ulink></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section_boolean" xmlns="http://docbook.org/ns/docbook">
      <title>boolean</title>

      <para>Boolean fields can always contain only two possible values which
      could be interpreted in several ways (defaults to 'true' and
      'false').</para>

      <para>Class: <ulink
      url="http://www.mmbase.org/api/org/mmbase/datatypes/BooleanDataType.html">org.mmbase.datatypes.BooleanDataType</ulink></para>

      <variablelist>
        <varlistentry>
          <term>yesno</term>

          <listitem>
            <para>Boolean interpreted as yes/no</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onoff</term>

          <listitem>
            <para>Boolean interpreted as on/off</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>enableddisabled</term>

          <listitem>
            <para>Boolean interpreted as enabled/disabled</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>check</term>

          <listitem>
            <para>Boolean with no explicit enumeration. Will result in
            checkboxes.</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section_integer" xmlns="http://docbook.org/ns/docbook">
      <title>integer</title>

      <para>Not so very big integer numbers. Common base for all kind of
      enumerations.</para>

      <para>Class: <ulink
      url="http://www.mmbase.org/api/org/mmbase/datatypes/IntegerDataType.html">org.mmbase.datatypes.IntegerDataType</ulink></para>

      <variablelist>
        <varlistentry>
          <term>dirs</term>

          <listitem>
            <para>Enumeration for the 'dir' field of certain MMBase system
            builders.</para>

            <para>Default: 2</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>spells</term>

          <listitem>
            <para>Demo-enumeration for wizards.</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>media</term>

          <listitem>
            <para>Media types.</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>ordinals</term>

          <listitem>
            <para>'First', 'second' etc. Implemented by a drop-down, so don't
            expect 'twothousandeth' to work.</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>gender</term>

          <listitem>
            <para>A member of one or other sex, or rather being male or
            female.</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>filesize</term>

          <listitem>
            <para>Integer interpreted as a filesize. Results in a 'string'
            representation postfixed by 'KiB' etc.</para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/FormatFileSize.html">org.mmbase.datatypes.processors.FormatFileSize</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>filesize_deprecated</term>

          <listitem>
            <para>Integer interpreted as a filesize. Results in a 'string'
            representation postfixed by 'kbyte' etc.</para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/FormatFileSize.html">org.mmbase.datatypes.processors.FormatFileSize</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>byte</term>

          <listitem>
            <para>The values 0 - 255 are possible.</para>

            <para>Minimal value (inclusive): 0</para>

            <para>Maximal value (inclusive): 255</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>weekdays</term>

          <listitem>
            <para>Stores a day of the week (so a number from 1 to 7)</para>

            <para>Class: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/WeekdaysDataType.html">org.mmbase.datatypes.WeekdaysDataType</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hour_of_day</term>

          <listitem>
            <para>Stores an hour of the day (so a number from 0 to 23)</para>

            <para>Minimal value (inclusive): 0</para>

            <para>Maximal value (inclusive): 23</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>minute_of_hour</term>

          <listitem>
            <para>Stores a minute in an hour (so a number from 0 to 59)</para>

            <para>Minimal value (inclusive): 0</para>

            <para>Maximal value (inclusive): 59</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>age</term>

          <listitem>
            <para>This field can be used as a virtual field on a nodemanager
            with a birthdate field. This field then contains the 'age' in
            year. This is both settable and gettable.</para>

            <para>Minimal value (inclusive): 0</para>

            <para>A set-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Age$Setter.html">org.mmbase.datatypes.processors.Age$Setter</ulink></para>

            <para>A get-processor is defined for all types <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/Age$Getter.html">org.mmbase.datatypes.processors.Age$Getter</ulink></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section_float" xmlns="http://docbook.org/ns/docbook">
      <title>float</title>

      <para>Floating point numbers.</para>

      <para>Class: <ulink
      url="http://www.mmbase.org/api/org/mmbase/datatypes/FloatDataType.html">org.mmbase.datatypes.FloatDataType</ulink></para>

      <variablelist>
        <varlistentry>
          <term>scale1-10</term>

          <listitem>
            <para>A scale from 1 to 10.</para>

            <para>Minimal value (inclusive): 1.0</para>

            <para>Maximal value (inclusive): 10.0</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section_double" xmlns="http://docbook.org/ns/docbook">
      <title>double</title>

      <para>Double precision floating point numbers.</para>

      <para>Class: <ulink
      url="http://www.mmbase.org/api/org/mmbase/datatypes/DoubleDataType.html">org.mmbase.datatypes.DoubleDataType</ulink></para>

      <variablelist>
        <varlistentry>
          <term>phys_distance</term>

          <listitem>
            <para>Some distance, in the SI unit meters. Always
            positive.</para>

            <para>Minimal value (inclusive): 0</para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/FormatQuantity.html">org.mmbase.datatypes.processors.FormatQuantity</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>phys_temperature</term>

          <listitem>
            <para>A physical temparature.</para>

            <para>Default: 273.15</para>

            <para>Minimal value (inclusive): 0</para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/FormatQuantity.html">org.mmbase.datatypes.processors.FormatQuantity</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>phys_angle</term>

          <listitem>
            <para>An angle in radials (1 radian = 180 / œÄ degrees).</para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/FormatQuantity.html">org.mmbase.datatypes.processors.FormatQuantity</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>phys_mass</term>

          <listitem>
            <para>An physical mass.</para>

            <para>Minimal value (inclusive): 0</para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/FormatQuantity.html">org.mmbase.datatypes.processors.FormatQuantity</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>phys_duration</term>

          <listitem>
            <para>An physical duration, in seconds.</para>

            <para>Minimal value (inclusive): 0</para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/FormatQuantity.html">org.mmbase.datatypes.processors.FormatQuantity</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>phys_energy</term>

          <listitem>
            <para />

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/FormatQuantity.html">org.mmbase.datatypes.processors.FormatQuantity</ulink></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section_binary" xmlns="http://docbook.org/ns/docbook">
      <title>binary</title>

      <para>Blobs. Images, attachments, those kind of things.</para>

      <para>Class: <ulink
      url="http://www.mmbase.org/api/org/mmbase/datatypes/BinaryDataType.html">org.mmbase.datatypes.BinaryDataType</ulink></para>

      <variablelist />
    </section>

    <section id="section_node" xmlns="http://docbook.org/ns/docbook">
      <title>node</title>

      <para>Reference to an MMBase node.</para>

      <para>Class: <ulink
      url="http://www.mmbase.org/api/org/mmbase/datatypes/NodeDataType.html">org.mmbase.datatypes.NodeDataType</ulink></para>

      <variablelist>
        <varlistentry>
          <term>typedef</term>

          <listitem>
            <para>Reference to an MMBase node of the type 'typedef'.</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>reldef</term>

          <listitem>
            <para>Reference to an MMBase node of the type 'reldef'.</para>

            <para>This is an enumeration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>nodenumber</term>

          <listitem>
            <para>Just a node-field, but getting it as a String returns the
            node-number, rather then some odd toString of a Node
            object.</para>

            <para>A get-processor is defined for type string: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/processors/NodeNumber.html">org.mmbase.datatypes.processors.NodeNumber</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>user</term>

          <listitem>
            <para>Only nodes associated with users are possible. Default value
            is current user.</para>

            <para>Class: <ulink
            url="http://www.mmbase.org/api/org/mmbase/datatypes/UserNodeDataType.html">org.mmbase.datatypes.UserNodeDataType</ulink></para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</article>
