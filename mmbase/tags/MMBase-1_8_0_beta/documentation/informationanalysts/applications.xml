<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article>
  <articleinfo>
    <title>MMBase Applications</title>

    <date>2003-02-27</date>

    <edition>$Id: applications.xml,v 1.11 2004/10/28 08:22:36 pierre Exp
    $</edition>

    <authorgroup>
      <author>
        <firstname>Henk</firstname>

        <surname>Hangyi</surname>
      </author>

      <author>
        <firstname>Pierre</firstname>

        <surname>van Rooden</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified
      is a certification mark of the Open Source Initiative.</para>

      <para>The license (Mozilla version 1.0) can be read at the MMBase site.
      See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>

    <revhistory>
      <revision>
        <revnumber>0.1</revnumber>

        <date>2003-02-27</date>

        <authorinitials>HH</authorinitials>
      </revision>

      <revision>
        <revnumber>0.5</revnumber>

        <date>2003-02-28</date>

        <authorinitials>PvR</authorinitials>
      </revision>
    </revhistory>
  </articleinfo>

  <section>
    <title>Introduction</title>

    <para>MMBase provides functionality to package an entire website build on
    top of MMBase. To package an entire website can be necessary. For
    instance, if you need to:</para>

    <itemizedlist>
      <listitem>
        <para>migrate your website from one database to another,</para>
      </listitem>

      <listitem>
        <para>migrate your website from one MMBase version to another,</para>
      </listitem>

      <listitem>
        <para>want to clean-up your object-cloud during or at the end of
        implementing a website in MMBase.</para>
      </listitem>
    </itemizedlist>

    <para>An MMBase application consists of:</para>

    <itemizedlist>
      <listitem>
        <para>configuration files: description of the cloud-structure,
        builders used in the cloud and the backup/export scenario,</para>
      </listitem>

      <listitem>
        <para>the website's content exported in XML-format,</para>
      </listitem>

      <listitem>
        <para>necessary Java functionality contained in MMBase modules,</para>
      </listitem>

      <listitem>
        <para>the frontend of your website: a set of JSP-templates, XSLT,
        flash-animations, etc.</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>The term "application" is often only used for the configuration
      files and the website's content. Since a website is not complete without
      its templates and the necessary modules, this documentation also
      describes how you take care that templates and modules are also added to
      the package.</para>
    </note>
  </section>

  <section>
    <title>Example: the MyNews Application</title>

    <para>A number of demo applications are included in the MMBase release,
    like MyNews (an example of a magazine with news articles) and MyYahoo (an
    example of a page like the topic/url/search kind of interface first shown
    on yahoo and in the Netherlands known as startpagina.nl). You can easily
    install the MyNews application via the /mmexamples/install.jsp and have a
    look at the application in action at /mmexamples/jsp/mynews/index.jsp. In
    this document we will have a close look at the MyNews application and and
    use it to show how you can package your own MMBase applications.</para>
  </section>

  <section>
    <title>The Application Configuration Files</title>

    <para>All configuration files of the applications present in your MMBase
    installation are located in the directory /WEB-INF/config/applications. If
    you have a look at this directory, you will see that it contains a file
    called MyNews.xml and a directory MyNews. All MMBase applications follow
    this structure: an XML-file with the name of the application and a
    directory with the name of the application.</para>

    <section>
      <title>The Application Description File</title>

      <para>The XML-file with the name of the application contains the
      description of the cloud-structure used by that application. We will
      have a closer look at MyNews.xml to see the different parts:</para>

      <itemizedlist>
        <listitem>
          <para><sgmltag class="xmlpi">xml version="1.0"
          encoding="UTF-8"</sgmltag> <sgmltag role="doctype">&lt;!DOCTYPE
          application PUBLIC "-//MMBase/DTD application config 1.0//EN"
          "http://www.mmbase.org/dtd/application_1_0.dtd"&gt;</sgmltag></para>

          <para>Every xml-document must have a reference to its document type
          definition or dtd. For the applications version as implemented in
          MMBase 1.6, the <filename>application_1_0.dtd</filename> is
          used.</para>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;application name="MyNews" maintainer="mmbase.org"
          version="1" auto-deploy="false"&gt; ...
          &lt;/application&gt;</sgmltag></para>

          <para>The whole description of the cloud-structure is enclosed by
          the <sgmltag>application</sgmltag> tag. The attributes <sgmltag
          class="attribute">name</sgmltag>, <sgmltag
          class="attribute">maintainer</sgmltag>, and <sgmltag
          class="attribute">version</sgmltag> can be used to label the
          application. The preferred way of writing names of applications is
          to use capitalized words. The maintainer is the domain name of the
          organization or person who takes the responsibility for updating
          this application. The version number can be used to distinguish
          different versions of your application. The property <sgmltag
          class="attribute">auto-deploy</sgmltag> is important. The
          application will automatically be installed the next time MMBase is
          restarted, when auto-deploy is set to "true" and the application was
          not already present in your MMBase installation. When auto-deploy is
          "false" you can install the application manually via the MMBase
          administrator pages (See the chapter "How to install an MMBase
          application" for more information on this topic).</para>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;neededbuilderlist&gt;&lt;builder
          maintainer="mmbase.org" version="1"&gt;mags&lt;/builder&gt; ....
          &lt;/neededbuilderlist&gt;</sgmltag></para>

          <para>The <sgmltag class="attribute">neededbuilderlist</sgmltag> tag
          contains a list of all the builders that are necessary to run this
          application. Both the builders of regular objects and the builders
          used to create relations have to be listed here.</para>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;neededreldeflist&gt;&lt;reldef source="related"
          target="related" direction="bidirectional" guisourcename="Related"
          guitargetname="Related" builder="insrel" /&gt; ...
          &lt;/neededreldeflist&gt;</sgmltag></para>

          <para>The <sgmltag class="attribute">neededreldeflist</sgmltag> tag
          contains a list of all relation roles that have to be defined for
          this application. When you use the MMBase editors to have a look at
          the RelationDefinition objects in your MMBase installation, you will
          see how closely the <sgmltag class="attribute">&lt;reldef ...
          /&gt;</sgmltag> descriptions follow these objects.</para>

          <para>The most import attributes of every <sgmltag
          class="attribute">reldef</sgmltag> tag below <sgmltag
          class="attribute">neededreldeflist</sgmltag> are `source' and
          `builder', and the function of a `reldef' is actually to connect
          those two. Another word for 'source' is 'role' (as it is called
          often for example in taglib attributes). The `builder' refers to the
          actual database table in which the relations can be stored, and
          therefore defines which fields the relations of this type
          have.</para>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;allowedrelationlist&gt;&lt;relation from="mags"
          to="news" type="posrel" /&gt; ...
          &lt;/allowedrelationlist&gt;</sgmltag></para>

          <para>The <sgmltag>allowedrelationlist</sgmltag> list what type of
          relation (what roles) should be used to relate two object of
          specified type. When you use the MMBase editors to have a look at
          the RelationType objects in your MMBase installation, you will see
          how closely the <sgmltag class="attribute">&lt;relation...
          /&gt;</sgmltag> descriptions follow these objects.</para>

          <para>The `from' and `to' attributes both refer to builder names
          (and could also have been called `sourcebuilder' and
          `destinationbuilder' or `sourcenodetype' and `destinationnodetype').
          The `type' attribute then actually defines the role for this allowed
          relation, so these correspond to the `source' attributes of the
          <sgmltag class="attribute">reldef</sgmltag> tags.</para>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;datasourcelist&gt;&lt;datasource builder="mags"
          path="MyNews/mags.xml" /&gt; ...
          &lt;/datasourcelist&gt;</sgmltag></para>

          <para>The <sgmltag class="attribute">datasourcelist</sgmltag> tag
          specifies where MMBase has to look for the content to fill each
          object when case the application is installed. The <sgmltag
          class="attribute">datasourcelist</sgmltag> only contains the
          datasources of regular objects and does not contain relations. When
          images or attachments are included in the application, MMBase will
          use subdirectories of the MyNews directory to store the images and
          attachments. The MyNews/images.xml and the MyNews/attachments.xml
          contain the handles to these files.</para>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;relationsourcelist&gt;&lt;relationsource
          builder="insrel" path="MyNews/insrel.xml" /&gt; ...
          &lt;/relationsourcelist&gt;</sgmltag></para>

          <para>The <sgmltag class="attribute">relationsourcelist</sgmltag>
          tag specifies where MMBase has to look for the content to fill each
          relation in case the application is installed.</para>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;contextsourcelist&gt;&lt;contextsource
          path="MyNews/backup.xml" type="depth"
          goal="backup"/&gt;&lt;/contextsourcelist&gt;</sgmltag></para>

          <para>The <sgmltag class="attribute">contextsource</sgmltag> tag
          specifies where MMBase has to find the backup (export) scenario for
          this application. The <sgmltag class="attribute">path</sgmltag>
          specifies where to find the file. the <sgmltag
          class="attribute">type</sgmltag> attribute specifies the export
          algorithm to use (currently, only 'depth' is possible). The <sgmltag
          class="attribute">goal</sgmltag> is a freeform field used to
          identify the contextsource to the user.</para>
        </listitem>

        <listitem>
          <para>&lt;contextsourcelist&gt;&lt;contextsource type="full"
          goal="backup"/&gt;&lt;/contextsourcelist&gt;</para>

          <para>Using type="full" provides the possibility of making a full
          backup of your objectcloud in XML.</para>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;description&gt;&lt;![CDATA[MyNews is ...]
          ]&gt;&lt;/description&gt;</sgmltag></para>

          <para>The <sgmltag class="attribute">description</sgmltag> is used
          as an introduction to the application in the MMBase install pages
          and the MMBase admin interface.</para>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;install-notice&gt;&lt;![CDATA[The MyNews
          application is installed ...]
          ]&gt;&lt;/install-notice&gt;</sgmltag></para>

          <para>The <sgmltag class="attribute">install-notice</sgmltag> is
          shown in the MMBase install pages and the MMBase admin interface
          after successful installation of the application. It is not possible
          to add messages to the application configuration file, which are
          shown in case the application fails to install.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Builders Used by the Application</title>

      <para>The builders specified in the <sgmltag>neededbuilderlist</sgmltag>
      can be found in the application folder under
      <filename>[applicationname]/builders</filename>. I.e., for the MyNews
      application, the builders can be found in the directory
      <filename>MyNews/builders/</filename>.</para>
    </section>

    <section>
      <title>The Backup Scenario: backup.xml</title>

      <para>The <sgmltag>contextsource</sgmltag> specifies where the file with
      the backup scenario for this application is located - specified in its
      <sgmltag class="attribute">path</sgmltag> attribute. For MyNews we saw
      that this is "MyNews/backup.xml".</para>

      <para>Most applications come with a 'backup.xml' file that describes the
      startpoint for exporting data (as described below). It is not necessary
      to specify a file - i.e. if an application is only meant to be installed
      and not exported. You can also use other filenames (though 'backup.xml'
      is the convention) or specify multiple contextsources. In the latter
      case, the administration pages require the user to choose the
      contextsource with which to make the export, using the freeform <sgmltag
      class="attribute">goal</sgmltag> attribute to give user-feedback on the
      intention of the contextsource.</para>

      <note>
        <para>While we speak about "backup" here, the system can also be used
        to simply export certain parts of your cloud, for instance for sharing
        with others, or porting data from a test environment to a production
        environment.</para>
      </note>

      <para>The way MMBase makes a backup of the content in an application in
      the form of XML-files needs special attention. To be able to determine
      which objects are necessary for an application and have to be
      incorporated in the backup and which objects are not, MMBase uses a
      backup algorithm. The backup algorithm to use is specified in the
      <sgmltag class="attribute">type</sgmltag> attribute. Currently, the only
      algorithm available for export is 'depth' (Future implementations may
      involve more algorithms).</para>

      <para>The 'depth' backup algorithm starts at the startnode specified in
      the context source (i.e. "backup.xml") file. The startnode is written to
      the appropriate XML backup file and MMBase searches for nodes related to
      this startnode, which are not already included in the backup. These new
      nodes are now taken as the startnodes and the whole process repeats as
      long as their are nodes found that have not already been included in the
      backup or until the maximum depth as specified in backup.xml is
      reached.</para>

      <note>
        <para>The backup scenario that MMBase uses is a very elegant way to
        clean up the content in your application from objects that are not
        used anymore or that have been the result from mistakes in the
        development process. However a drawback of this scenario is that
        objects that can not be reached from the startnodes specified in the
        context source file will not be incorporated in the backup.</para>
      </note>

      <para>If you have a look at this file you see that it consists of the
      following tags:</para>

      <itemizedlist>
        <listitem>
          <para><sgmltag>&lt;contextdepth&gt;</sgmltag></para>

          <para>The tag &lt;contextdepth&gt; encloses the specification of the
          backup scenario.</para>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;startnode&gt;</sgmltag></para>

          <para>The startnode specifies which node should be used by MMBase as
          the start of the backup algorithm. The startnode can be specified in
          one of two ways:</para>

          <itemizedlist>
            <listitem>
              <para><sgmltag>&lt;builder&gt;mags&lt;/builder&gt;&lt;where&gt;title=='MyNews
              magazine'&lt;/where&gt;</sgmltag></para>

              <para>The backup algorithm starts at the mags object with the
              title "MyNews magazine". If there are multiple objects that fit
              the algorithm, the first one found is chosen. It is not possible
              to determine which object that will be.</para>
            </listitem>

            <listitem>
              <para><sgmltag>&lt;startnode alias="mynewsmagazine"
              /&gt;</sgmltag></para>

              <para>The backup algorithm starts at the object with the
              objectalias "mynewsmagazine".</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><sgmltag>&lt;depth&gt;5&lt;/depth&gt;</sgmltag></para>

          <para>Specifies the depth of the search (the maximum number of
          nested searches) used in the backup algorithm (in the example this
          is 5 levels deep).</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Content XML-format</title>

    <para>The application configuration files can be used to backup the
    content of the website in XML-files. When you look at the
    <filename>/WEB-INF/applications/MyNews/</filename> directory, you see the
    XML files with the content of the MyNews application. If you open for
    instance <filename>mags.xml</filename> with a text-editor, you
    find:</para>

    <itemizedlist>
      <listitem>
        <para><sgmltag clas="element">&lt;mags
        exportsource="mmbase://www.mmbase.org/mmexamples/mynews"
        timestamp="20020516170724"&gt;</sgmltag></para>

        <para>The <sgmltag clas="element">mags</sgmltag> tag encloses the
        content of the mag objects. The attributes of the mags tag give an
        indication from where the backup of the application is made (TODO the
        semantic of exportsource is not clear) and specifies the time when the
        backup of the application has been made.</para>
      </listitem>

      <listitem>
        <para><sgmltag clas="element">&lt;node number="8495" owner="system"
        alias="default.mags"&gt;</sgmltag></para>

        <para>The <sgmltag clas="element">node</sgmltag> tag specifies a node
        with its number, owner and aliases (if any). It also includes tags and
        content for each field in the node (using the fieldname as the name of
        the tag).</para>

        <note>
          <para>MMBase renumbers the objects in the application when restoring
          the application. This means that for example the node with alias
          "default.mags" is very likely to have a different node number than
          "8495". This is another reason to not use numbers of objects in your
          templates.</para>
        </note>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>How to Backup an MMBase Application</title>

    <para>Ones you finished the [application].xml of your MMBase application,
    you can use it to make a backup of the content in your website in XML. To
    this end: <orderedlist>
        <listitem>
          <simpara>go the admin-interface on /mmadmin/jsp/</simpara>
        </listitem>

        <listitem>
          <simpara>click on "admin" and log on (in a fresh MMBase install the
          loginname is admin and the password is admin2k)</simpara>
        </listitem>

        <listitem>
          <simpara>click on "applications"</simpara>
        </listitem>

        <listitem>
          <simpara>select your application by clicking one of the triangles at
          the right side of the table</simpara>
        </listitem>

        <listitem>
          <simpara>find the "Save [application]" action in the middle of the
          page</simpara>
        </listitem>

        <listitem>
          <simpara>specify the location where you want the backup to be
          stored</simpara>
        </listitem>

        <listitem>
          <simpara>select the goal of the backup in the combobox. This goals
          selects the contextsource to use for the backup - most of the time
          you will have only one choice, which will be preselected.</simpara>
        </listitem>

        <listitem>
          <simpara>click on "Yes" to make a backup of the
          application</simpara>
        </listitem>
      </orderedlist></para>

    <para>After you clicked the "Yes" button, MMBase shows some statistics of
    the backup procedure. When using the configuration files of your
    application for the first time, it is recommended to examine these
    statistics closely. It might be that you forgot to specify a relation or
    that some parts of the content can not be reached from the startnodes.
    This is the first spot to notice such errors!</para>
  </section>

  <section>
    <title>How to Install a MMBase application</title>

    <note>
      <para>Instead of installing an MMBase application the term "restoring"
      (for a backup) or "loading" an MMBase application is frequently
      used.</para>
    </note>

    <para>You can install (or restore) a MMBase application as follows:
    <orderedlist>
        <listitem>
          <simpara>put the application configuration files in the
          <filename>/WEB-INF/config/applications/</filename>
          directory</simpara>
        </listitem>

        <listitem>
          <simpara>put the XML content files in the
          <filename>/WEB-INF/config/applications/[applicationname]</filename>
          directory</simpara>
        </listitem>

        <listitem>
          <simpara>place the builders of the application in
          <filename>/WEB-INF/config/builders/</filename> or one of its
          subdirectories. You can also place the builders in the
          <filename>/WEB-INF/config/applications/[applicationname]/builders</filename>
          directory, and let the application install your builders. Note that
          this requires that MMBase has the right to write in the
          configuration directory</simpara>
        </listitem>

        <listitem>
          <simpara>go the admin-interface on /mmadmin/jsp/</simpara>
        </listitem>

        <listitem>
          <simpara>click on "admin" and log on (in a fresh MMBase install the
          loginname is admin and the password is admin2k)</simpara>
        </listitem>

        <listitem>
          <simpara>click on "applications"</simpara>
        </listitem>

        <listitem>
          <simpara>select your application by clicking one of the triangles at
          the right side of the table</simpara>
        </listitem>

        <listitem>
          <simpara>find the action "Install [application] " at the top of the
          page and click on "Yes"</simpara>
        </listitem>

        <listitem>
          <simpara>MMBase will respond with the install-notice as specified in
          the [applicationname].xml</simpara>
        </listitem>
      </orderedlist></para>

    <para>Another way to restore an MMBase application is set auto-deploy to
    "true " after step (3) and restart MMBase. You can view the log file to
    see of the restore of the application was carried out correctly.</para>
  </section>

  <section>
    <title>Necessary Java Functionality</title>

    <para>Some MMBase applications need additional functionality contained in
    one of the MMBase modules. For instance, it might be possible that your
    application requires the MMBase sendmail module to send email or that it
    is using the communityprc module for the forum. When packaging your
    application be sure to notice all necessary modules in the install
    instructions.</para>
  </section>

  <section>
    <title>Including The Frontend</title>

    <para>The frontend of your website (a set of JSP-templates, XSLT,
    flash-animations, etc.) will be located in the default-web-app directory
    and/or in one or more subdirectories. For example the templates of the
    MyNews application are located in /mmexamples/jsp/mynews/ If you package
    your application be sure to add these files and directories to the
    package.</para>
  </section>
</article>