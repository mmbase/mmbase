##
##
## UML2MMBase module.
##
## The contents of this file are subject to the Mozilla Public License
##
## Version 1.0 (the "License"); you may not use this file except in
## compliance with the License. You may obtain a copy of the License at
## http://www.mozilla.org/MPL/
##
## Software distributed under the License is distributed on an "AS IS"
## basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
## License for the specific language governing rights and limitations
## under the License.
##
## Velocity Template for de mmbase application XML generation 
## based on a UML class diagram with the MMBase sterotype
## 
## @author  Rudie Ekkelenkamp
## @version 0.1
##
#foreach ( $modelElement in $transform.modelElements )
#if ($transform.getStereotype($modelElement)=="$transform.profile.STEREOTYPE_CLASS_MMBASE")
#set ($class = $modelElement)
#set ($packagename = $transform.findPackageName(${class.package}))
#if (!$packagename || $packagename=="")
#set ($maintainer = "mmbase.org")
#else
#set ($maintainer = $packagename)
#end
#end   
#end
<?xml version="1.0"?>
#if($mmbaseVersion != '1.6')
<!DOCTYPE application PUBLIC "-//MMBase/DTD application config 1.1//EN" "http://www.mmbase.org/dtd/application_1_1.dtd">
#else
<!DOCTYPE application PUBLIC "-//MMBase/DTD application config 1.0//EN" "http://www.mmbase.org/dtd/application_1_0.dtd">
#end
<application name="$mmbaseApplication" maintainer="${maintainer}" version="1" auto-deploy="true">
#if($mmbaseVersion != "1.6")
## for mmbase versions > 1.6 required applications can be specified.
   <requirements>
##Most applications will need at least the Basics and Resources application
      <requires name="Basics" maintainer="mmbase.org" version="1" type="application"/>
      <requires name="Resources" maintainer="mmbase.org" version="1" type="application"/>
   </requirements>
#end
   <neededbuilderlist>
       <!-- These are the basic mmbase relation builders -->
#foreach ( $builder in $transform.basicRelationBuilders )
      <builder maintainer="mmbase.org" version="0">$builder</builder>
#end
       <!-- These are the basic mmbase builders -->
#foreach ( $builder in $transform.basicBuilders )
      <builder maintainer="mmbase.org" version="0">$builder</builder>
#end

      <!-- These are the application specific relation builders -->
#foreach ( $modelElement in $transform.sortedRelationElements )
      #set ($class = $modelElement)
      #set ($packagename = $transform.findPackageName(${class.package}))
      #set ($classnameLowercase = $transform.toLowerCase(${class.name}))
      <builder maintainer="finalist.com" version="${transform.getVersion($class)}">${class.name}</builder>
#end
     <!-- These are the application specific builders -->
#foreach ( $modelElement in $transform.sortedModelClassifiers )
      #set ($class = $modelElement)
      #set ($packagename = $transform.findPackageName(${class.package}))
      #set ($classnameLowercase = $transform.toLowerCase(${class.name}))
      <builder maintainer="finalist.com" version="${transform.getVersion($class)}">${class.name}</builder>
#end
    </neededbuilderlist>
    <neededreldeflist>
#set($relDefs = $transform.relationHelper.getRelationDefinitions($transform.modelElements))
#foreach($relDef in $relDefs)
        <reldef source="$relDef.relationDefinitionName" target="$relDef.relationDefinitionName" direction="$relDef.relationDirection" guisourcename="$relDef.relationDefinitionName" guitargetname="$relDef.relationDefinitionName" builder="$relDef.builderName" />
#end
   </neededreldeflist>
   <allowedrelationlist>
#set ($relationRefs = $transform.relationHelper.getRelationReferences($transform.modelElements))
#foreach ($relationRef in $relationRefs)
      <relation from="$relationRef.sourceName" to="$relationRef.targetName" type="$relationRef.type" />
#end
   </allowedrelationlist>

   <datasourcelist>
   <!-- A testdata/back up skelet is generated. If the testdata is not available, it will still work. -->
#foreach ( $modelElement in $transform.modelElements )
#if ($transform.getStereotype($modelElement)=="$transform.profile.STEREOTYPE_CLASS_MMBASE")
      #set ($class = $modelElement)
      <datasource builder="$class.name" path="$mmbaseApplication/${class.name}.xml" />
#end
#end
#foreach ( $builder in $transform.basicBuilders )
      <datasource builder="${builder}" path="$mmbaseApplication/${builder}.xml"/>
#end
   </datasourcelist>

   <relationsourcelist>
   <!-- A testdata/backup skelet is generated for relation data. If the testdata is not available, it will still work. -->
#foreach ( $builder in $transform.basicRelationBuilders )
      <relationsource builder="${builder}" path="$mmbaseApplication/${builder}.xml"/>
#end
#foreach ( $modelElement in $transform.modelElements )
#if ($transform.getStereotype($modelElement)==$transform.profile.STEREOTYPE_CLASS_RELATION)      <relationsource builder="${modelElement.name}" path="$mmbaseApplication/${modelElement.name}.xml"/>
#end
#end
   </relationsourcelist>

   <contextsourcelist>
      <contextsource goal="backup" type="depth" path="$mmbaseApplication/backup.xml"/>
   </contextsourcelist>

   <description><![CDATA[Installs the application. Included are all the builders.]]></description>
   <install-notice><![CDATA[You have installed the application.]]></install-notice>
</application>