<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE module PUBLIC "//MMBase - module//" "http://www.mmbase.org/dtd/module_1_0.dtd">
<!--
    The MMBaseRoot module is used to configure the basic properties of mmbase.
-->
<module maintainer="mmbase.org" version="0">

  <!-- <status>
  This module is always active.
  MMBase will not run without it.
  -->
  <status>active</status>

  <class>org.mmbase.module.core.MMBase</class>

  <!-- <properties>
  You can define properties to be used by the classfile.
  The properties described here are mandatory.
  -->
  <properties>

  <!--
  name="machinename" defines the name that is used in the mmbase cluster,
  it is used for the mmservers objects. Make sure that this is different
  for each node in your cluster. This is not the machines dns name
  (as defined by host as name or ip number).

  You can add the string ${HOST} to include the name of the host
  running the application server (obtained using
  InetAddress.getLocalHost().getHostName() ).

  You can add the string ${USER} to include the name of the user
  running the application server (obtained using
  System.getProperty("user.name") ).

  This can be useful if you share a web-app over various servers
  (useful for loadbalancing). If you run these servers with different
  user names, you can then use the same configuration for both, and
  still have unique machine names, which you will need to have
  MMBase's clustering system to work properly.

  If you do not specify a machine name, the system falls back to the
  name of the host running the application server, combined with the
  'context' path. This will suffice in most, if not any, cases, so the
  advice is to not add this setting if you don't know excactly what
  you are doing.

  Note that you can also specify this property name as a system
  property by specifying it on the java commandline, using:
  -Dmmbaseroot.mmbasename=myname
  -->
  <!--
  <property name="machinename">MMBaseserver</property>
  -->

  <!--
  name="storagemanagerfactory" defines what factory to use for accessing the storage devices.
  Currently. only DatabaseStorageManagerFactory is implemented, which gives access to various database devices using JDBC.
  -->
  <property name="storagemanagerfactory">org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory</property>
  
  <!-- 
  name="datasource-context" defines the jndi context.
  name="datasource" defines the jndi name of the datasource is bounded to
  The Database connections will be retrieved from the application server, so the application-server
  should define a resource for this. 
  -->
  <!-- property name="datasource-context">java:comp/env</property -->
  <!-- property name="datasource">jdbc/MMBase</property -->

  <!--
  name="database" defines which database we are using as defined in your config
  databases directory (default : org/mmbase/config/default/databases/). It
  is defined by a xml file for example sql92.xml or mysql.xml. This should
  be set in combo with the jdbc.xml files (where you define the database
  server and how to connect to it.

  sql92 for default SQL92 database (normally not used)
  mysql for MySQL (www.mysql.com)
  informix for Informix Universal Server (www.informix.com)

  ** remark : more database are supported or are easy to support, check
  www.mmbase.org's howto's on this we will complete this list
  as soon as possble **

            MyQSL:          mysql
            PostgrSQL:      postgresql71
            HyperSonic:     hypersonic
  -->
  <!-- property name="database">mysql</property -->

  <!--
  name="clustering" the MMBaseChangeInterface which communicates with
  other MMBase instance which use the same storage
  See applications/clustering for implementations
  -->

  <!--
  name="host" the host or ip number of the machine this mmbase node is
  running on. Its important that this name is set correctly because its
  used for communication between mmbase nodes and external devices
  (xml or jini based).
  -->
  <property name="host">127.0.0.1</property>


  <!--
  name="basename" You can have multiple mmbase systems inside your database
  if you want this can be very handy when testing of for running multiple
  setups inside one database its added as a preset to all your table names
  like : BASENAME=test will result in table names like test_object and
  test_urls.
  -->
  <property name="basename">mm</property>

  <!--
  name="language" defines a default language for GUI functionality. Effectively this makes it
  possible to override the JVM's default Locale.

  -->
  <property name="language">en</property>

  <!--
  name="encoding"

  The encoding to be used in the database (if the database layer
  needs to know), and for use as default for the pages.  Recommended
  is 'UTF-8', since this can be used for virtually every language on
  the world, and is a superset of ASCII.

  Default though, it is ISO-8859-1, to ensure backwards
  compatibility. Perhaps this will change to UTF-8 once this is
  tested well.
  -->
  <!-- since, when not mentioned it will be ISO-8859-1, all new systems will get utf-8 -->
  <property name="encoding">UTF-8</property>

  <!--
  name="timezone"

  The TimeZone in which this MMBase works. This has influence on what front end users see as the
  'current time'. It is also the working time zone for many other mmbase code. For example also date
  parsing is done relative to this time zone (so 'noon' is 12:00h for this time zone).

  This serves as a default timezone if one needs to override the one from the JVM.  Defaults (if
  empty) to the default JVM's time zone (which is default the Server's time zone).

  E.g.: Europe/Amsterdam, America/New_York, Asia/Chongqing. 
  See: http://java.sun.com/j2se/1.4.2/docs/api/java/util/TimeZone.html#getAvailableIDs()

  Will fall back to GMT if not understood (will _not_ fall back to server default)
  -->
  <property name="timezone"></property>

  <!--
  name="xmlbuilderwriterdir"
  If specified, MMBase will write xml configuration files  to this directory when loading builders.
  This can be useful if you want to convert old format builder xmls to the new format.

  -->
  <!-- property name="xmlbuilderwriterdir">/home/guest/schooltv/tmpbul/</property -->


  </properties>
</module>

