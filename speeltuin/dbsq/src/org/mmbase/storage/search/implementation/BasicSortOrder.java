/* Generated by Together */

package org.mmbase.storage.search.implementation;

import org.mmbase.storage.search.*;

/**
 * Basic implementation.
 *
 * @author Rob van Maris
 * @version $Revision: 1.2 $
 */
public class BasicSortOrder implements SortOrder {
    
    /** Associated stepfield. */
    private StepField field = null;
    
    /** Direction property. */
    private int direction = SortOrder.ORDER_ASCENDING;
    
    /**
     * Constructor.
     * Creates new BasicSortOrder instance, with
     * direction <code>SortOrder.ORDER_ASCENDING</code>.
     *
     * @param field The associated stepfield.
     * @throws IllegalArgumentException when an invalid argument is supplied.
     */
    // package visibility!
    BasicSortOrder(StepField field) {
        if (field == null) {
            throw new IllegalArgumentException(
            "Invalid field value: " + field);
        }
        this.field = field;
    }
    
    /**
     * Sets direction.
     *
     * @param direction The direction.
     * @throws IllegalArgumentException when an invalid argument is supplied.
     */
    public void setDirection(int direction) {
        if (direction != SortOrder.ORDER_ASCENDING
        && direction != SortOrder.ORDER_DESCENDING) {
            throw new IllegalArgumentException(
            "Invalid direction value: " + direction);
        }
        this.direction = direction;
    }
    
    // javadoc is inherited
    public StepField getField() {
        return field;
    }
    
    // javadoc is inherited
    public int getDirection() {
        return direction;
    }
    
    // javadoc is inherited
    public boolean equals(Object obj) {
        if (obj instanceof SortOrder) {
            SortOrder order = (SortOrder) obj;
            return field.getFieldName().equals(order.getField().getFieldName())
                && field.getStep().getTableName().equals(
                    order.getField().getStep().getTableName())
                && direction == order.getDirection();
        } else {
            return false;
        }
    }
    
    // javadoc is inherited
    public int hashCode() {
        return 61 * field.getFieldName().hashCode()
        + 67 * field.getStep().getTableName().hashCode() + 103 * direction;
    }

    // javadoc is inherited
    public String toString() {
        StringBuffer sb = new StringBuffer("SortOrder(field:");
        sb.append(getField().getAlias()).
        append(", dir:").
        append(getDirection()).
        append(")");
        return sb.toString();
    }
    
}
