/* Generated by Together */

package org.mmbase.module.database.search;

import java.util.List;
/**
 * Encapsulates a request for a search of the object cloud.
 * <p>
 * This corresponds to a SELECT query in SQL syntax.
 */
public interface SearchQuery {
    /**
     * Tests if the search request is to return distinct results. In that case duplicate nodes will be removed from the result.
     * <p>
     * This corresponds to the use of "DISTINCT" in SQL SELECT-syntax
     * . 
     */
    boolean isDistinct();

    /**
     * Gets the SortOrder objects in the order they are to be applied.
     *  This specifies the sorting order of the search results.
     * <p>
     * This corresponds to the ORDER BY clause in SQL SELECT syntax. 
     */
    List getSortOrders();

    /**
     * Gets the steps in the search request.
     * <p>
     * This corresponds to the tables in SQL SELECT-syntax. 
     */
    List getSteps();

    /**
     * Gets the stepfields in the search request.
     * <p>
     * This corresponds to the fields in SQL SELECT-syntax. 
     */
    List getFields();

    /**
     * Gets the constraints on the search results.
     * <p>
     * This corresponds to (part of) the constraints in the WHERE-clause in SQL SELECT-syntax. 
     */
    Constraint getConstraint();

    /**
     * Gets the maximum number of results to be returned, or -1 if the number of results to be returned is unlimited.
     * <p>
     * Note: limiting the number of results may not be supported by the database layer.
     */
    int getMaxNumber();

    /**
     * Gets the (zerobased) offset in the list of results, of the first result to return. Note that, since it is zerobased, it is equal to the number of results that are skipped.<p>
     * Note: skipping results may not be supported by the database layer.
     */
    int getOffset();

    /**
     * Compares this query to the specified object. The result is 
     * <code>true</code> if and only if the argument is a non-null 
     * SearchQuery object representing the same query.
     * 
     * @param obj The object to compare with.
     * @return <code>true</code> if the objects are equal, 
     * <code>false</code> otherwise.
     */
    public boolean equals(Object obj);
    
    // javadoc is inherited
    public int hashCode();

    /** @link dependency 
     * @label constraint
     * @clientRole 0-1
     * @supplierRole 0-1*/
    /*#Constraint lnkConstraint;*/
}
