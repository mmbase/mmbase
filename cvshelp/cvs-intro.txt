
An Introduction to CVS 

Short Short Version:

Local access: export CVSROOT=/usr/local/cvs 
Remote access: export CVS_RSH=ssh ; export CVSROOT=:ext:you@host:/usr/local/cvs' 
Anonymous access: export CVSROOT=:pserver:guest@www.mmbase.org:/usr/local/cvs
cvs login (password guest)

Getting the source the 1st time: cvs checkout myproj
Commiting changes: cvs commit -m 'I did this thing'
Getting new versions of files: cvs update -P -d

Short Version:

Accessing a repository

On the 'repository' machine setting CVSROOT to a local directory is sufficient.
In this case: CVSROOT=/usr/local/cvs ; export CVSROOT
For remote usage there are multiple access methods, I will only show
the 'ext' and 'pserver' methods.
The 'ext' method uses an external program like rsh or ssh.
For that you have to set CVSROOT to ':ext:<username>@<host>:/usr/local/cvs'
and set CVS_RSH to either 'ssh' or 'rsh'.
The 'pserver' method uses an inetd server running on the remote host.
For that you set CVSROOOT to ':pserver:<username>@<host>:usr/local/cvs'
When you use the 'pserver' method you use 'cvs login' to
make yourself known to the system (like a login). After that all cvs commands work
as usual (expect the resulting delays from the network)
Note this assumes unix systems as what your development environment.
After you are done 'cvs logout' logs you out.

Importing a project

This has probably already been done by the maintainer of repository.
But to import a source code tree (which is not under CVS) you
use the import command:
cvs import -m "log msg" projname vendortag releasetag
projname is the name of the project under which you will check it out later.
vendortag and release tags are not used often but so you generally set
them to your username and 'start' respectively.
After the command is done, the tree you just imported should not be used
to work in. It should be archived somewhere and you should checkout the project
to work in it.

Checking out a working copy

cvs checkout myproj
That's it, this will create a directory tree with all the project files in it.
CVS creates directories called 'CVS' to do its bookkeeping in. The information
in those directories can be accessed using the cvs commands (like cvs log).

Options to CVS commands.

CVS has to sorts of options, cvs options and command options.
CVS options appear directly behind the cvs command and command options
appear behind the command. The most used options to cvs itself
are the -d option the specify the repository (if your CVSROOT is not set)
and the -q or -Q option the reduce the output of cvs commands.
'cvs <command>'  is the 'loudest' way to do things, while 'cvs -q <command> reduces
it somewhat, 'cvs -Q <command> is the most silent one.
To make your life easier you can specify options to commands by default
by using a .cvsrc file which contains the command and the option you like it
to have:
diff -c
update -P -d
cvs -q

Commiting your changes.

The commit command sends modifications to the repository.
You must use the -m option to tell what you have changed, this is
called the log message. That way other people can see what you have done.
The command looks like this 'cvs commit -m "log message" hello.java'
If you don't specify a file it commits the current directory-tree.
Watch out the commit is by default recursive, if you want to
restrict it to the currenct directory use the -l flag
(eg. cvs commit -m 'blah' -l)

Getting a new version from the repository.

You get new updates from the repository using the cvs update command.
Be warned that cvs update by default does not bring in new directories
you need to use the -d option for that (cvs update -d)

Adding and removing files.

Adding a file is a two step process. First you add it with the
command 'cvs add' then you commit it as usual.
Adding a directory is a one step process, just the add will do.
Removing a file is similar to adding one, only it takes three steps,
first you remove it from your tree (with rm) then you remove it
from cvs (cvs remove) and last you commit (cvs commit).
Removing a directory is a bit odd, first you remove all the files
(using the method described above). Then you remove the directory
and use the command 'cvs update -P'.

Moving files and directories.
To move files you actually do a remove / add file.
So it looks like this : mv filea fileb ; cvs remove filea ; cvs add fileb ;
cvs commit -m 'moved filea to fileb'
To move directories you have to copy the files around, so you want to
avoid doing that. But here is how it goes anyway.
First you make a new directory, this one you add to cvs (cvs add)
Then you move the files from the old one to the new directory.
Next you cvs remove all the files from the old one.
Then you cvs add al the files in the new one.
As last as always you commit your changes by cvs commit.

Finding out who did what to your code.

The cvs log command is the one you use to see what others have done with the
code. It tends to be a bit verbose, so in most cases you specify a file
not a whole directory.
To see what they really did you can use the cvs diff command and specify
revisions like this : 'cvs diff -c -r 1.3 -r 1.4 hello.java' This
gives you a diff showing the changes from revision 1.3 to 1.4 of the
hello.java source.

Seeing what the changes are in the repository against your own copy.

You use the cvs update command to update your own copy with the repository
one. But if you want to see what the changes are you can use
the cvs diff command to see what they actually are.
Most people like the context diff better then the normal one.
So for the normal one you use 'cvs diff' for the context one you use
the 'cvs diff -c' command. Note that it is not a good idea to do
it at the root of the project tree as this may create heaps of output.
To limit the output of the command a bit you use the -Q option to cvs.
The command look like this then: 'cvs -Q diff -c'

Marking an moment in time (for a release).

Marking a specific release or moment in time can be done by using
the cvs tag command. Like this 'cvs tag Release-1995-12-1'
After this you can use the name from the tag as a 'revision' to
the checkout command to make a distribution. 
If you do that be careful nobody is changing things when you do a 'tag'.

Getting rid of a working copy.

In typical cvs manner the way to remove a working copy is to
stop using it using a command. In this case the cvs release command.
'cvs releaase myproj' is the one. This will fail if you have
uncommited changes. Commit them first (or discard them) and try again.
After it has succeeded you are free to use rm -rf .

Terms:

Revision
A commited change in the history of a file or set of files.
A revision is one "snapshot" in a constantly changing project.

Repository
The master copy where CVS stores a project's full revision history.
Each project has exactly one repository.

Working copy
The copy in which you actually make changes to a project. There can be
many working copies of a giveng project; generally each developer has his
or her own copy.

Check out
To request a working copy from the repository. Your working copy reflects
the state of the project as of the moment you checked it out; when you
and other developers make changes, you must use commit and update to "publish"
your changes and view others' changes.

Commit
To send changes from your working copy into the central repository. Also
known as a 'check-in'.

Log message
A comment you attach to a revision when you commit it, describing the changes.
Others can page through the log messages to get a summary of what's been going
on in a project.

Update
Tor bring others' changes from the repository into your working copy and to
show if your working copy has any uncommitted changes. Be careful not
to confuse this with commit; they are complementary operations. Mnemonic: update
brings your working copy up to date with the repository copy.

Conflict
The situation when two developers try to commit changes to the same region of the
same file. CVS notices and poinst out conflicts, but the developers must resolve
them.

Further reading:
FAQ http://www.loria.fr/~molli/cvs-index.html under documentation
Open Source Development with CVS (Karl Fogel <kfogel@red-bean.com>)
