<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//MMBase//DTD module config 1.0//EN" "http://www.mmbase.org/dtd/module_1_0.dtd">
<module maintainer="mmbase.org" version="0">
  <class>org.mmbase.module.core.MMBase</class>
  <properties>
    <!--
    name="machinename" defines the name that is used in the mmbase cluster,
    it is used for the mmservers objects. Make sure that this is different
    for each node in your cluster. This is not the machines dns name
    (as defined by host as name or ip number).
    -->
    <!-- autodetermining works well
    <property name="machinename">${mmbaseroot.machinename}</property>
    -->

    <!--
        name="host" the host or ip number of the machine this mmbase node is
        running on. Its important that this name is set correctly because its
        used for communication between mmbase nodes and external devices
        (xml or jini based).

        Default it is : java.net.InetAddress.getLocalHost().getHostName(), which may very well be correct.
    -->
    <!--
        <property name="host">${mmbaseroot.host}</property>
    -->


    <!--
    name="database" defines which database we are using as defined in your config
    databases directory (default : org/mmbase/config/default/databases/). It
    is defined by a xml file for example sql92.xml or mysql.xml. This should
    be set in combo with the jdbc.xml files (where you define the database
    server and how to connect to it.

    sql92 for default SQL92 database (normally not used)
    mysql for MySQL (www.mysql.com)
    informix for Informix Universal Server (www.informix.com)

            MySQL:          mysql
            PostgreSQL:     postgresql71
            HyperSonic:     hypersonic
            HsqlDB:         hsqldb

    This property can also be omitted all together. Then the
    'lookup.xml' in config/databases will be used to determin the
    database driver, based on the jdbc connection.

    -->
    <!--
    <property name="database">${mmbaseroot.database}</property>

    -->

    <property name="storagemanagerfactory">org.mmbase.storage.implementation.database.DatabaseStorageManagerFactory</property>
    <!-- leave to lookup.xml on default -->

    <!--
    name="basename" You can have multiple mmbase systems inside your database
    if you want this can be very handy when testing of for running multiple
    setups inside one database its added as a preset to all your table names
    like : BASENAME=test will result in table names like test_object and
    test_urls.
    -->
    <property name="basename">${mmbaseroot.basename}</property>

    <!--
    name="language" defines the language for the gui. The standard gui information for the
    editors can be found in /config/modules/mmlanguage.xml. The gui information of a builder
    is provided by the builder itself (e.g. /config/builders/urls.xml).
    -->
    <property name="language">${mmbaseroot.language}</property>

    <!--
    name="encoding"

    The encoding to be used in the database (if the database layer
    needs to know), and for use as default for the pages.  Recommended
    is 'UTF-8', since this can be used for virtually every language on
    the world, and is a superset of ASCII.

    Default though, it is ISO-8859-1, to ensure backwards
    compatibility. Perhaps this will change to UTF-8 once this is
    tested well.
    -->
    <!-- since, when not mentioned it will be ISO-8859-1, all new systems will get utf-8 -->
    <property name="encoding">UTF-8</property>


    <!--
        name="timezone"

        The TimeZone in which this MMBase works. This has influence on what front end users see as the
        'current time'. It is also the working time zone for many other mmbase code. For example also date
        parsing is done relative to this time zone (so 'noon' is 12:00h for this time zone).

        This serves as a default timezone if one needs to override the one from the JVM.  Defaults (if
        empty) to the default JVM's time zone (which is default the Server's time zone).

        E.g.: Europe/Amsterdam, America/New_York, Asia/Chongqing.
        See: http://java.sun.com/j2se/1.4.2/docs/api/java/util/TimeZone.html#getAvailableIDs()

        Will fall back to GMT if not understood (will _not_ fall back to server default)
    -->
    <property name="timezone"></property>


    <!--
        MMBase in 'development mode' is more strict. Most noticably this has an influence on
        whether you can request the value of non-existing fields without an exception.

        Will fall back to 'false' if the property is missing altogether. The behaviour is more like
        in MMBase < 1.8 then.
    -->
    <property name="development">true</property>


  </properties>
</module>
