<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE principleset PUBLIC "//MMBase - principleset//" "http://www.mmbase.org/dtd/principleset_1_0.dtd">
<principleset name="MMBase Principle example set" description="Principles for the MMBase Opensource project">
  <principle number="1">
    <state>active</state>
    <name><![CDATA[Database independency]]></name>
    <qualification><![CDATA[Binding]]></qualification>
    <explanation><![CDATA[All code is implemented in a database independent way.]]></explanation>
    <argumentation><![CDATA[MMBase is principally indepent of the chosen database. 
So no code in MMBase should depend on features of a specific database (unless of course the code _is_ the specific database layer).

Therefore this is also a principle for applications built on MMBase, otherwise they are not portable to other MMBase installations.
]]></argumentation>
    <consequence><![CDATA[You should use the search-query frame-work to build queries, without falling back to 'legacy'
constraints.

You should not need JDBC-connections yourself, but if you do, use ((DatabaseStorageManager) MMBase.getStorageManager()).getConnection() - do not try to make your own connections nor create your own database configuration - but leave that to MMBase.


You should also add an issue to the mmbase bugtracker to report the problem you try to circumvent.]]></consequence>
    <allowedimplementation><![CDATA[]]></allowedimplementation>
  </principle>
  <principle number="2">
    <state>active</state>
    <name><![CDATA[Assume that you are in a servlet environment]]></name>
    <qualification><![CDATA[Binding]]></qualification>
    <explanation><![CDATA[Your Java code is not just java code, it is java code running in a servlet environment, so it may be subject to certain resctrictions while running.]]></explanation>
    <argumentation><![CDATA[Code is not optimally portable if no consideration is given to this principle.
]]></argumentation>
    <consequence><![CDATA[Make no assumptions on the OS.

Make no assumptions on location or writeability of resources. To open resources (like configuration) you should use the MMBase ResourceLoader. 

Do not use java.io.File. 

The webapp may be installed as a 'war' and it's contents not available as File at all.

If a file-system is needed for some reason, the MMBase 'data directory' can be used, or use File.getTempFile().

Do not write anything to stdout, use the MMBase logging system. This can be configured to go to stdout if desired.]]></consequence>
    <allowedimplementation><![CDATA[]]></allowedimplementation>
  </principle>
  <principle number="3">
    <state>active</state>
    <name><![CDATA[Code conventions]]></name>
    <qualification><![CDATA[Binding]]></qualification>
    <explanation><![CDATA[Code conventions make it easier and more comfortable to read and understand each others code.]]></explanation>
    <argumentation><![CDATA[When writing java, JSP or XML sources, you must take the MMBase Code Conventions into account.]]></argumentation>
    <consequence><![CDATA[When writing java, JSP or XML sources, you must take the MMBase Code Conventions into account.

Summary for java:

 Java code is indented by 4 spaces. Do not use tabs.
 Use SUN's code conventions. See link for MMBase specific conventions.

XML:

 XML code is indented by 2 spaces. Do not use tabs.

JSP:
 Preferably, JSP is like XML (e.g. JSPX). Java code in JSP should be limited to an absolute minimum. Use taglib (MMBase taglib, JSTL). 

 Complicated functionality could be done in some MVC-framework, or be delegated to functions implemented on MMBase datatypes, fields, builders or function sets.


 A JSP should be short.  A few hunderd lines is much.

 Use includes, prefering dynamic includes (mm:include, jsp:include) over static include (jsp:directive.include)

 Switch off the session <jsp:directive.page session="false" />, unless good reason for using the session exists.

 Make pages cacheable by a front-proxy, (e.g. by using mm:content), unless a good reason exists not to (then explicitely make it uncacheable, e.g. by using mm:content expires="0")

Always use UTF-8 for the response.

 Preferred is (valid) XHTML Strict.

Javascript:
 Like java.

CSS:
 K&R, indent with 2 spaces.


]]></consequence>
    <allowedimplementation><![CDATA[Code wich obeys the conventions.]]></allowedimplementation>
  </principle>
  <principle number="5">
    <state>active</state>
    <name><![CDATA[Dependencies]]></name>
    <qualification><![CDATA[Binding]]></qualification>
    <explanation><![CDATA[Dependencies should be minimal, and preferably on already existings ones (no redundancy).]]></explanation>
    <argumentation><![CDATA[It is easier for people not to have to know about several mutually similar functionalities.]]></argumentation>
    <consequence><![CDATA[MMBase 1.8 depends on:

java 1.4

servlet api

backport-concurrency (dropped when migrating to java 1.5)

it's own logging framework (mapping to commons-logging, log4j, java logging exist)

xalan  (may be dropped when migrating to java 1.5)

commons-fileupload



Taglib also depends on: jstl.jar, standard.jar

Other known (optional) dependencies:
 imagemagick
 JAI
 activation and mail

You should not depend on libraries providing the same functionality.

Other dependencies can be introduced with reluctance and with good reason (e.g. several jakarta commons libraries, commons-collections, commons-validator etc)]]></consequence>
    <allowedimplementation><![CDATA[]]></allowedimplementation>
  </principle>
  <principle number="4">
    <state>active</state>
    <name><![CDATA[Use the bridge]]></name>
    <qualification><![CDATA[Binding]]></qualification>
    <explanation><![CDATA[When using Java code to communicate to MMBase one should only use the bridge interfaces.]]></explanation>
    <argumentation><![CDATA[In this way you separate MMBase core code from your own code. This gives core developers more freedom. Your code is less prone to break on an update of MMBase. The bridge is a subset of all MMBase classes, so it is easier to use.

By using the bridge, you also automatically use MMBase security. We desire all exposed MMBase data to be subject to security.]]></argumentation>
    <consequence><![CDATA[The following classes from the org.mmbase package can be used (this list is maintained in
      the build script of RMMCI)
        org/mmbase/bridge/*
        org/mmbase/bridge/util/**
        org/mmbase/storage/search/*
        org/mmbase/datatypes/**
        org/mmbase/security/UserContext
        org/mmbase/security/AuthenticationData*
        org/mmbase/security/Rank
        org/mmbase/security/SecurityException.class

        org/mmbase/util/functions/**

        org/mmbase/cache/CachePolicy*
        org/mmbase/cache/Cache*

        org/mmbase/util/**
        /only if they themselves obey this principle

        org/mmbase/storage/Storable.class
        org/mmbase/storage/StorageException.class

        org/mmbase/core/util/Fields
        org/mmbase/core/*
        org/mmbase/core/event/**


]]></consequence>
    <allowedimplementation><![CDATA[Implementations can use the above classes. Normally they should leave instantiating the classes to the bridge - do not instantiate them through their constructors.]]></allowedimplementation>
  </principle>
</principleset>
